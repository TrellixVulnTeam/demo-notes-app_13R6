"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebSocketApi = void 0;
const constructs_1 = require("constructs");
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const apig = __importStar(require("@aws-cdk/aws-apigatewayv2-alpha"));
const apigAuthorizers = __importStar(require("@aws-cdk/aws-apigatewayv2-authorizers-alpha"));
const apigIntegrations = __importStar(require("@aws-cdk/aws-apigatewayv2-integrations-alpha"));
const Stack_1 = require("./Stack");
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const apigV2Domain = __importStar(require("./util/apiGatewayV2Domain"));
const apigV2AccessLog = __importStar(require("./util/apiGatewayV2AccessLog"));
/////////////////////
// Construct
/////////////////////
/**
 * The `WebSocketApi` construct is a higher level CDK construct that makes it easy to create a WebSocket API. It provides a simple way to define your routes and allows you to configure the specific Lambda functions if necessary. It also allows you to configure authorization and custom domains. See the [examples](#examples) for more details.
 *
 * @example
 * ```js
 * import { WebSocketApi } from "@serverless-stack/resources";
 *
 * new WebSocketApi(stack, "Api", {
 *   routes: {
 *     $connect: "src/connect.main",
 *     $default: "src/default.main",
 *     $disconnect: "src/disconnect.main",
 *     sendMessage: "src/sendMessage.main",
 *   },
 * });
 * ```
 */
class WebSocketApi extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props || {};
        this.cdk = {};
        this.functions = {};
        this.permissionsAttachedForAllRoutes = [];
        this.createWebSocketApi();
        this.createWebSocketStage();
        this.addAuthorizer();
        this.addRoutes(this, this.props.routes || {});
        // Allows functions to make ApiGatewayManagementApi.postToConnection calls.
        this.attachPermissions([
            new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                actions: ["execute-api:ManageConnections"],
                resources: [this._connectionsArn],
            }),
        ]);
    }
    /**
     * Url of the WebSocket API
     */
    get url() {
        return this.cdk.webSocketStage.url;
    }
    /**
     * Custom domain url if it's configured
     */
    get customDomainUrl() {
        return this._customDomainUrl;
    }
    /**
     * List of routes of the websocket api
     */
    get routes() {
        return Object.keys(this.functions);
    }
    get _connectionsArn() {
        return Stack_1.Stack.of(this).formatArn({
            service: "execute-api",
            resourceName: `${this.cdk.webSocketStage.stageName}/POST/*`,
            resource: this.cdk.webSocketApi.apiId,
        });
    }
    /**
     * Add routes to an already created WebSocket API
     *
     * @example
     * ```js
     * api.addRoutes(stack, {
     *   "$connect": "src/connect.main",
     * })
     * ```
     */
    addRoutes(scope, routes) {
        Object.keys(routes).forEach((routeKey) => {
            // add route
            const fn = this.addRoute(scope, routeKey, routes[routeKey]);
            // attached existing permissions
            this.permissionsAttachedForAllRoutes.forEach((permissions) => fn.attachPermissions(permissions));
        });
    }
    /**
     * Get the instance of the internally created Function, for a given route key where the `routeKey` is the key used to define a route. For example, `$connect`.
     *
     * @example
     * ```js
     * const fn = api.getFunction("$connect");
     * ```
     */
    getFunction(routeKey) {
        return this.functions[this.normalizeRouteKey(routeKey)];
    }
    /**
     * Attaches the given list of permissions to all the routes. This allows the functions to access other AWS resources.
     *
     * @example
     *
     * ```js
     * api.attachPermissions(["s3"]);
     * ```
     */
    attachPermissions(permissions) {
        Object.values(this.functions).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllRoutes.push(permissions);
    }
    /**
     * Attaches the given list of permissions to a specific route. This allows that function to access other AWS resources.
     *
     * @example
     * ```js
     * api.attachPermissionsToRoute("$connect", ["s3"]);
     * ```
     *
     */
    attachPermissionsToRoute(routeKey, permissions) {
        const fn = this.getFunction(routeKey);
        if (!fn) {
            throw new Error(`Failed to attach permissions. Route "${routeKey}" does not exist.`);
        }
        fn.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "WebSocketApi",
            data: {
                httpApiId: this.cdk.webSocketApi.apiId,
                customDomainUrl: this._customDomainUrl,
                routes: Object.entries(this.functions).map(([routeKey, fn]) => ({
                    route: routeKey,
                    fn: (0, Construct_1.getFunctionRef)(fn),
                })),
            },
        };
    }
    createWebSocketApi() {
        const { cdk } = this.props;
        const id = this.node.id;
        const app = this.node.root;
        if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.webSocketApi)) {
            this.cdk.webSocketApi = cdk === null || cdk === void 0 ? void 0 : cdk.webSocketApi;
        }
        else {
            // Validate input
            if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.webSocketStage)) {
                throw new Error(`Cannot import the "webSocketStage" when the "webSocketApi" is not imported.`);
            }
            const webSocketApiProps = ((cdk === null || cdk === void 0 ? void 0 : cdk.webSocketApi) ||
                {});
            // Create WebSocket API
            this.cdk.webSocketApi = new apig.WebSocketApi(this, "Api", Object.assign({ apiName: app.logicalPrefixedName(id) }, webSocketApiProps));
        }
    }
    createWebSocketStage() {
        const { cdk, accessLog, customDomain } = this.props;
        if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.webSocketStage)) {
            if (accessLog !== undefined) {
                throw new Error(`Cannot configure the "accessLog" when "webSocketStage" is a construct`);
            }
            if (customDomain !== undefined) {
                throw new Error(`Cannot configure the "customDomain" when "webSocketStage" is a construct`);
            }
            this.cdk.webSocketStage = cdk === null || cdk === void 0 ? void 0 : cdk.webSocketStage;
        }
        else {
            const webSocketStageProps = ((cdk === null || cdk === void 0 ? void 0 : cdk.webSocketStage) ||
                {});
            // Validate input
            if (webSocketStageProps.domainMapping !== undefined) {
                throw new Error(`Do not configure the "webSocketStage.domainMapping". Use the "customDomain" to configure the Api domain.`);
            }
            // Configure Custom Domain
            const customDomainData = apigV2Domain.buildCustomDomainData(this, customDomain);
            let domainMapping;
            if (customDomainData) {
                if (customDomainData.isApigDomainCreated) {
                    this.cdk.domainName = customDomainData.apigDomain;
                }
                if (customDomainData.isCertificatedCreated) {
                    this.cdk.certificate =
                        customDomainData.certificate;
                }
                domainMapping = {
                    domainName: customDomainData.apigDomain,
                    mappingKey: customDomainData.mappingKey,
                };
                this._customDomainUrl = `wss://${customDomainData.url}`;
            }
            // Create stage
            this.cdk.webSocketStage = new apig.WebSocketStage(this, "Stage", Object.assign({ webSocketApi: this.cdk.webSocketApi, stageName: this.node.root.stage, autoDeploy: true, domainMapping }, webSocketStageProps));
            // Configure Access Log
            this.cdk.accessLogGroup = apigV2AccessLog.buildAccessLogData(this, accessLog, this.cdk.webSocketStage, true);
        }
    }
    addAuthorizer() {
        var _a;
        const { authorizer } = this.props;
        if (!authorizer || authorizer === "none") {
            this.authorizer = "none";
        }
        else if (authorizer === "iam") {
            this.authorizer = "iam";
        }
        else if ((_a = authorizer.cdk) === null || _a === void 0 ? void 0 : _a.authorizer) {
            this.authorizer = authorizer.cdk.authorizer;
        }
        else if (!authorizer.function) {
            throw new Error(`Missing "function" for authorizer`);
        }
        else {
            this.authorizer = new apigAuthorizers.WebSocketLambdaAuthorizer("WebSocketAuthorizer", authorizer.function, {
                authorizerName: authorizer.name,
                identitySource: authorizer.identitySource,
            });
        }
    }
    addRoute(scope, routeKey, routeValue) {
        var _a;
        ///////////////////
        // Normalize routeKey
        ///////////////////
        routeKey = this.normalizeRouteKey(routeKey);
        if (this.functions[routeKey]) {
            throw new Error(`A route already exists for "${routeKey}"`);
        }
        ///////////////////
        // Create Function
        ///////////////////
        const lambda = Function_1.Function.fromDefinition(scope, routeKey, Function_1.Function.isInlineDefinition(routeValue) ? routeValue : routeValue.function, (_a = this.props.defaults) === null || _a === void 0 ? void 0 : _a.function, `The "defaults.function" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the routes using FunctionProps, so the Api construct can apply the "defaults.function" to them.`);
        ///////////////////
        // Get authorization
        ///////////////////
        const { authorizationType, authorizer } = this.buildRouteAuth();
        ///////////////////
        // Create route
        ///////////////////
        const route = new apig.WebSocketRoute(scope, `Route_${routeKey}`, {
            webSocketApi: this.cdk.webSocketApi,
            routeKey,
            integration: new apigIntegrations.WebSocketLambdaIntegration(`Integration_${routeKey}`, lambda),
            authorizer: routeKey === "$connect" ? authorizer : undefined,
        });
        ///////////////////
        // Configure authorization
        ///////////////////
        // Note: as of CDK v1.138.0, aws-apigatewayv2.WebSocketRoute does not
        //       support IAM authorization type. We need to manually configure it.
        if (routeKey === "$connect") {
            // Configure route authorization type
            // Note: we need to explicitly set `cfnRoute.authorizationType` to `NONE`
            //       because if it were set to `AWS_IAM`, and then it is removed from
            //       the CloudFormation template (ie. set to undefined), CloudFormation
            //       doesn't updates the route. The route's authorizationType would
            //       still be `AWS_IAM`.
            const cfnRoute = route.node.defaultChild;
            cfnRoute.authorizationType = authorizationType;
        }
        ///////////////////
        // Store function
        ///////////////////
        this.functions[routeKey] = lambda;
        return lambda;
    }
    buildRouteAuth() {
        if (this.authorizer === "none") {
            return { authorizationType: "NONE" };
        }
        else if (this.authorizer === "iam") {
            return { authorizationType: "AWS_IAM" };
        }
        return {
            authorizationType: "CUSTOM",
            authorizer: this.authorizer,
        };
    }
    normalizeRouteKey(routeKey) {
        return routeKey.trim();
    }
}
exports.WebSocketApi = WebSocketApi;
//# sourceMappingURL=data:application/json;base64,