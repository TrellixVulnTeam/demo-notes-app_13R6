"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Topic = void 0;
const constructs_1 = require("constructs");
const sns = __importStar(require("aws-cdk-lib/aws-sns"));
const snsSubscriptions = __importStar(require("aws-cdk-lib/aws-sns-subscriptions"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const Queue_1 = require("./Queue");
/////////////////////
// Construct
/////////////////////
/**
 * The `Topic` construct is a higher level CDK construct that makes it easy to create a serverless pub/sub service. You can create a topic that has a list of subscribers. And you can publish messages to it from any part of your serverless app.
 *
 * You can have two types of subscribers; Function subscribers (subscribe with a Lambda function) or Queue subscribers (subscribe with a SQS queue).
 *
 * This construct makes it easier to define a topic and its subscribers. It also internally connects the subscribers and topic together.
 *
 * @example
 * ### Using the minimal config
 *
 * ```js
 * import { Topic } from "@serverless-stack/resources";
 *
 * new Topic(stack, "Topic", {
 *   subscribers: {
 *     subscriber1: "src/function1.handler",
 *     subscriber2: "src/function2.handler"
 *   },
 * });
 * ```
 */
class Topic extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props || {};
        this.cdk = {};
        this.subscribers = {};
        this.permissionsAttachedForAllSubscribers = [];
        this.createTopic();
        this.addSubscribers(this, (props === null || props === void 0 ? void 0 : props.subscribers) || {});
    }
    /**
     * The ARN of the internally created SNS Topic.
     */
    get topicArn() {
        return this.cdk.topic.topicArn;
    }
    /**
     * The name of the internally created SNS Topic.
     */
    get topicName() {
        return this.cdk.topic.topicName;
    }
    /**
     * Get a list of subscriptions for this topic
     */
    get subscriptions() {
        return Object.values(this.subscribers).map((sub) => {
            let children;
            // look for sns.Subscription inside Queue.sqsQueue
            if (sub instanceof Queue_1.Queue) {
                children = sub.cdk.queue.node.children;
            }
            // look for sns.Subscription inside Function
            else {
                children = sub.node.children;
            }
            const child = children.find((child) => {
                return (0, Construct_1.isCDKConstructOf)(child, "aws-cdk-lib.aws_sns.Subscription");
            });
            return child;
        });
    }
    /**
     * A list of the internally created function instances for the subscribers.
     */
    get subscriberFunctions() {
        return Object.values(this.subscribers).filter((subscriber) => subscriber instanceof Function_1.Function);
    }
    /**
     * Add subscribers to the topic.
     *
     * @example
     * ```js {5}
     * const topic = new Topic(stack, "Topic", {
     *   subscribers: {
     *     subscriber1: "src/function1.handler",
     *     subscriber2: "src/function2.handler"
     *   },
     * });
     * topic.addSubscribers(stack, {
     *   subscriber3: "src/function3.handler"
     * });
     * ```
     */
    addSubscribers(scope, subscribers) {
        Object.entries(subscribers).forEach(([subscriberName, subscriber]) => {
            this.addSubscriber(scope, subscriberName, subscriber);
        });
    }
    /**
     * Attaches the given list of permissions to all the subscriber functions. This allows the subscribers to access other AWS resources.
     *
     * @example
     *
     * ```js
     * const topic = new Topic(stack, "Topic", {
     *   subscribers: {
     *     subscriber1: "src/function1.handler",
     *     subscriber2: "src/function2.handler"
     *   },
     * });
     * topic.attachPermissions(["s3"]);
     * ```
     */
    attachPermissions(permissions) {
        Object.values(this.subscribers)
            .filter((subscriber) => subscriber instanceof Function_1.Function)
            .forEach((subscriber) => subscriber.attachPermissions(permissions));
        this.permissionsAttachedForAllSubscribers.push(permissions);
    }
    /**
     * Attaches the list of permissions to a given subscriber by index
     * @example
     * ```js {5}
     * const topic = new Topic(stack, "Topic", {
     *   subscribers: {
     *     subscriber1: "src/function1.handler",
     *     subscriber2: "src/function2.handler"
     *   },
     * });
     *
     * topic.attachPermissionsToSubscriber("subscriber1", ["s3"]);
     * ```
     */
    attachPermissionsToSubscriber(subscriberName, permissions) {
        const subscriber = this.subscribers[subscriberName];
        if (!(subscriber instanceof Function_1.Function)) {
            throw new Error(`Cannot attach permissions to the "${this.node.id}" Topic subscriber because it's not a Lambda function`);
        }
        subscriber.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "Topic",
            data: {
                topicArn: this.cdk.topic.topicArn,
                // TODO: Deprecate eventually and mirror KinesisStream
                subscribers: Object.values(this.subscribers).map(Construct_1.getFunctionRef),
                subscriberNames: Object.keys(this.subscribers),
            },
        };
    }
    createTopic() {
        const app = this.node.root;
        const { cdk } = this.props;
        if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.topic)) {
            this.cdk.topic = cdk === null || cdk === void 0 ? void 0 : cdk.topic;
        }
        else {
            const snsTopicProps = ((cdk === null || cdk === void 0 ? void 0 : cdk.topic) || {});
            this.cdk.topic = new sns.Topic(this, "Topic", Object.assign({ topicName: app.logicalPrefixedName(this.node.id) }, snsTopicProps));
        }
    }
    addSubscriber(scope, subscriberName, subscriber) {
        if (subscriber instanceof Queue_1.Queue ||
            subscriber.queue) {
            subscriber = subscriber;
            this.addQueueSubscriber(scope, subscriberName, subscriber);
        }
        else {
            subscriber = subscriber;
            this.addFunctionSubscriber(scope, subscriberName, subscriber);
        }
    }
    addQueueSubscriber(scope, subscriberName, subscriber) {
        var _a;
        // Parse subscriber props
        let subscriptionProps;
        let queue;
        if (subscriber instanceof Queue_1.Queue) {
            subscriber = subscriber;
            queue = subscriber;
        }
        else {
            subscriber = subscriber;
            subscriptionProps = (_a = subscriber.cdk) === null || _a === void 0 ? void 0 : _a.subscription;
            queue = subscriber.queue;
        }
        this.subscribers[subscriberName] = queue;
        // Create Subscription
        this.cdk.topic.addSubscription(new snsSubscriptions.SqsSubscription(queue.cdk.queue, subscriptionProps));
    }
    addFunctionSubscriber(scope, subscriberName, subscriber) {
        var _a, _b;
        // Parse subscriber props
        let subscriptionProps;
        let functionDefinition;
        if (typeof subscriber !== "string" && "function" in subscriber) {
            subscriptionProps = (_a = subscriber.cdk) === null || _a === void 0 ? void 0 : _a.subscription;
            functionDefinition = subscriber.function;
        }
        else {
            subscriber = subscriber;
            functionDefinition = subscriber;
        }
        // Create function
        const fn = Function_1.Function.fromDefinition(scope, `Subscriber_${this.node.id}_${subscriberName}`, functionDefinition, (_b = this.props.defaults) === null || _b === void 0 ? void 0 : _b.function, `The "defaults.function" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the subscribers using FunctionProps, so the Topic construct can apply the "defaults.function" to them.`);
        this.subscribers[subscriberName] = fn;
        // Create Subscription
        this.cdk.topic.addSubscription(new snsSubscriptions.LambdaSubscription(fn, subscriptionProps));
        // Attach existing permissions
        this.permissionsAttachedForAllSubscribers.forEach((permissions) => fn.attachPermissions(permissions));
    }
}
exports.Topic = Topic;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVG9waWMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVG9waWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBdUM7QUFDdkMseURBQTJDO0FBQzNDLG9GQUFzRTtBQUV0RSwyQ0FLcUI7QUFDckIseUNBS29CO0FBQ3BCLG1DQUFnQztBQXFIaEMscUJBQXFCO0FBQ3JCLFlBQVk7QUFDWixxQkFBcUI7QUFFckI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBb0JHO0FBQ0gsTUFBYSxLQUFNLFNBQVEsc0JBQVM7SUFXbEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFrQjtRQUMxRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWpCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxJQUFJLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQVMsQ0FBQztRQUNyQixJQUFJLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztRQUN0QixJQUFJLENBQUMsb0NBQW9DLEdBQUcsRUFBRSxDQUFDO1FBRS9DLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFBLEtBQUssYUFBTCxLQUFLLHVCQUFMLEtBQUssQ0FBRSxXQUFXLEtBQUksRUFBRSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsSUFBVyxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7T0FFRztJQUNILElBQVcsU0FBUztRQUNsQixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUFXLGFBQWE7UUFDdEIsT0FBTyxNQUFNLENBQUMsTUFBTSxD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QUFFLFFBQVEsRUFDN0IsK05BQStOLENBQ2hPLENBQUM7UUFDRixJQUFJLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FBQztRQUV0QyxzQkFBc0I7UUFDdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUM1QixJQUFJLGdCQUFnQixDQUFDLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxpQkFBaUIsQ0FBQyxDQUMvRCxDQUFDO1FBRUYsOEJBQThCO1FBQzlCLElBQUksQ0FBQyxvQ0FBb0MsQ0FBQyxPQUFPLENBQUMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUNoRSxFQUFFLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLENBQ2xDLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFyUUQsc0JBcVFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCAqIGFzIHNucyBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXNuc1wiO1xuaW1wb3J0ICogYXMgc25zU3Vic2NyaXB0aW9ucyBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXNucy1zdWJzY3JpcHRpb25zXCI7XG5pbXBvcnQgeyBBcHAgfSBmcm9tIFwiLi9BcHBcIjtcbmltcG9ydCB7XG4gIGdldEZ1bmN0aW9uUmVmLFxuICBTU1RDb25zdHJ1Y3QsXG4gIGlzQ0RLQ29uc3RydWN0LFxuICBpc0NES0NvbnN0cnVjdE9mLFxufSBmcm9tIFwiLi9Db25zdHJ1Y3RcIjtcbmltcG9ydCB7XG4gIEZ1bmN0aW9uIGFzIEZuLFxuICBGdW5jdGlvblByb3BzLFxuICBGdW5jdGlvbklubGluZURlZmluaXRpb24sXG4gIEZ1bmN0aW9uRGVmaW5pdGlvbixcbn0gZnJvbSBcIi4vRnVuY3Rpb25cIjtcbmltcG9ydCB7IFF1ZXVlIH0gZnJvbSBcIi4vUXVldWVcIjtcbmltcG9ydCB7IFBlcm1pc3Npb25zIH0gZnJvbSBcIi4vdXRpbC9wZXJtaXNzaW9uXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSW50ZXJmYWNlc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogVXNlZCB0byBkZWZpbmUgYSBxdWV1ZSBzdWJzY3JpYmVyIGZvciBhIHRvcGljXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBuZXcgVG9waWMoc3RhY2ssIFwiVG9waWNcIiwge1xuICogICBzdWJzY3JpYmVyczoge1xuICogICAgIHN1YnNjcmliZXI6IHtcbiAqICAgICAgIHR5cGU6IFwicXVldWVcIixcbiAqICAgICAgIHF1ZXVlOiBuZXcgUXVldWUoc3RhY2ssIFwiUXVldWVcIiwge1xuICogICAgICAgICBjb25zdW1lcjogXCJzcmMvZnVuY3Rpb24uaGFuZGxlclwiXG4gKiAgICAgICB9KVxuICogICAgIH1cbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRvcGljUXVldWVTdWJzY3JpYmVyUHJvcHMge1xuICAvKipcbiAgICogU3RyaW5nIGxpdGVyYWwgdG8gc2lnbmlmeSB0aGF0IHRoZSBzdWJzY3JpYmVyIGlzIGEgcXVldWVcbiAgICovXG4gIHR5cGU6IFwicXVldWVcIjtcbiAgLyoqXG4gICAqIFRoZSBxdWV1ZSB0aGF0J2xsIGJlIGFkZGVkIGFzIGEgc3Vic2NyaWJlciB0byB0aGUgdG9waWMuXG4gICAqL1xuICBxdWV1ZTogUXVldWU7XG4gIGNkaz86IHtcbiAgICAvKipcbiAgICAgKiBUaGlzIGFsbG93cyB5b3UgdG8gb3ZlcnJpZGUgdGhlIGRlZmF1bHQgc2V0dGluZ3MgdGhpcyBjb25zdHJ1Y3QgdXNlcyBpbnRlcm5hbGx5IHRvIGNyZWF0ZSB0aGUgc3Vic2NyaWJlci5cbiAgICAgKi9cbiAgICBzdWJzY3JpcHRpb24/OiBzbnNTdWJzY3JpcHRpb25zLlNxc1N1YnNjcmlwdGlvblByb3BzO1xuICB9O1xufVxuXG4vKipcbiAqIFVzZWQgdG8gZGVmaW5lIGEgZnVuY3Rpb24gc3Vic2NyaWJlciBmb3IgYSB0b3BpY1xuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqc1xuICogbmV3IFRvcGljKHN0YWNrLCBcIlRvcGljXCIsIHtcbiAqICAgc3Vic2NyaWJlcnM6IHtcbiAqICAgICBzdWJzY3JpYmVyOiBcInNyYy9mdW5jdGlvbi5oYW5kbGVyXCJcbiAqICAgfVxuICogfSlcbiAqIGBgYFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFRvcGljRnVuY3Rpb25TdWJzY3JpYmVyUHJvcHMge1xuICAvKipcbiAgICogU3RyaW5nIGxpdGVyYWwgdG8gc2lnbmlmeSB0aGF0IHRoZSBzdWJzY3JpYmVyIGlzIGEgZnVuY3Rpb25cbiAgICovXG4gIHR5cGU/OiBcImZ1bmN0aW9uXCI7XG4gIC8qKlxuICAgKiBVc2VkIHRvIGNyZWF0ZSB0aGUgc3Vic2NyaWJlciBmdW5jdGlvbiBmb3IgdGhlIHRvcGljXG4gICAqL1xuICBmdW5jdGlvbjogRnVuY3Rpb25EZWZpbml0aW9uO1xuICBjZGs/OiB7XG4gICAgLyoqXG4gICAgICogVGhpcyBhbGxvd3MgeW91IHRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IHNldHRpbmdzIHRoaXMgY29uc3RydWN0IHVzZXMgaW50ZXJuYWxseSB0byBjcmVhdGUgdGhlIHN1YnNjcmliZXIuXG4gICAgICovXG4gICAgc3Vic2NyaXB0aW9uPzogc25zU3Vic2NyaXB0aW9ucy5MYW1iZGFTdWJzY3JpcHRpb25Qcm9wcztcbiAgfTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUb3BpY1Byb3BzIHtcbiAgZGVmYXVsdHM/OiB7XG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgZnVuY3Rpb24gcHJvcHMgdG8gYmUgYXBwbGllZCB0byBhbGwgdGhlIGNvbnN1bWVycyBpbiB0aGUgVG9waWMuIFRoZSBgZW52aXJvbm1lbnRgLCBgcGVybWlzc2lvbnNgIGFuZCBgbGF5ZXJzYCBwcm9wZXJ0aWVzIHdpbGwgYmUgbWVyZ2VkIHdpdGggcGVyIHJvdXRlIGRlZmluaXRpb25zIGlmIHRoZXkgYXJlIGRlZmluZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqXG4gICAgICogYGBganNcbiAgICAgKiBuZXcgVG9waWMoc3RhY2ssIFwiVG9waWNcIiwge1xuICAgICAqICAgZGVmYXVsdHM6IHtcbiAgICAgKiAgICAgZnVuY3Rpb246IHtcbiAgICAgKiAgICAgICB0aW1lb3V0OiAyMCxcbiAgICAgKiAgICAgfVxuICAgICAqICAgfSxcbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBmdW5jdGlvbj86IEZ1bmN0aW9uUHJvcHM7XG4gIH07XG4gIC8qKlxuICAgKiBDb25maWd1cmUgc3Vic2NyaWJlcnMgZm9yIHRoaXMgdG9waWNcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogYGBganNcbiAgICogbmV3IFRvcGljKHN0YWNrLCBcIlRvcGljXCIsIHtcbiAgICogICBzdWJzY3JpYmVyczoge1xuICAgKiAgICAgc3Vic2NyaWJlcjE6IFwic3JjL2Z1bmN0aW9uMS5oYW5kbGVyXCIsXG4gICAqICAgICBzdWJzY3JpYmVyMjogXCJzcmMvZnVuY3Rpb24yLmhhbmRsZXJcIlxuICAgKiAgIH0sXG4gICAqIH0pO1xuICAgKiBgYGBcbiAgICovXG4gIHN1YnNjcmliZXJzPzogUmVjb3JkPFxuICAgIHN0cmluZyxcbiAgICB8IEZ1bmN0aW9uSW5saW5lRGVmaW5pdGlvblxuICAgIHwgVG9waWNGdW5jdGlvblN1YnNjcmliZXJQcm9wc1xuICAgIHwgUXVldWVcbiAgICB8IFRvcGljUXVldWVTdWJzY3JpYmVyUHJvcHNcbiAgPjtcbiAgY2RrPzoge1xuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIHRoZSBkZWZhdWx0IHNldHRpbmdzIHRoaXMgY29uc3RydWN0IHVzZXMgaW50ZXJuYWxseSB0byBjcmVhdGUgdGhlIHRvcGljLlxuICAgICAqL1xuICAgIHRvcGljPzogc25zLklUb3BpYyB8IHNucy5Ub3BpY1Byb3BzO1xuICB9O1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIENvbnN0cnVjdFxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogVGhlIGBUb3BpY2AgY29uc3RydWN0IGlzIGEgaGlnaGVyIGxldmVsIENESyBjb25zdHJ1Y3QgdGhhdCBtYWtlcyBpdCBlYXN5IHRvIGNyZWF0ZSBhIHNlcnZlcmxlc3MgcHViL3N1YiBzZXJ2aWNlLiBZb3UgY2FuIGNyZWF0ZSBhIHRvcGljIHRoYXQgaGFzIGEgbGlzdCBvZiBzdWJzY3JpYmVycy4gQW5kIHlvdSBjYW4gcHVibGlzaCBtZXNzYWdlcyB0byBpdCBmcm9tIGFueSBwYXJ0IG9mIHlvdXIgc2VydmVybGVzcyBhcHAuXG4gKlxuICogWW91IGNhbiBoYXZlIHR3byB0eXBlcyBvZiBzdWJzY3JpYmVyczsgRnVuY3Rpb24gc3Vic2NyaWJlcnMgKHN1YnNjcmliZSB3aXRoIGEgTGFtYmRhIGZ1bmN0aW9uKSBvciBRdWV1ZSBzdWJzY3JpYmVycyAoc3Vic2NyaWJlIHdpdGggYSBTUVMgcXVldWUpLlxuICpcbiAqIFRoaXMgY29uc3RydWN0IG1ha2VzIGl0IGVhc2llciB0byBkZWZpbmUgYSB0b3BpYyBhbmQgaXRzIHN1YnNjcmliZXJzLiBJdCBhbHNvIGludGVybmFsbHkgY29ubmVjdHMgdGhlIHN1YnNjcmliZXJzIGFuZCB0b3BpYyB0b2dldGhlci5cbiAqXG4gKiBAZXhhbXBsZVxuICogIyMjIFVzaW5nIHRoZSBtaW5pbWFsIGNvbmZpZ1xuICpcbiAqIGBgYGpzXG4gKiBpbXBvcnQgeyBUb3BpYyB9IGZyb20gXCJAc2VydmVybGVzcy1zdGFjay9yZXNvdXJjZXNcIjtcbiAqXG4gKiBuZXcgVG9waWMoc3RhY2ssIFwiVG9waWNcIiwge1xuICogICBzdWJzY3JpYmVyczoge1xuICogICAgIHN1YnNjcmliZXIxOiBcInNyYy9mdW5jdGlvbjEuaGFuZGxlclwiLFxuICogICAgIHN1YnNjcmliZXIyOiBcInNyYy9mdW5jdGlvbjIuaGFuZGxlclwiXG4gKiAgIH0sXG4gKiB9KTtcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgVG9waWMgZXh0ZW5kcyBDb25zdHJ1Y3QgaW1wbGVtZW50cyBTU1RDb25zdHJ1Y3Qge1xuICBwdWJsaWMgcmVhZG9ubHkgY2RrOiB7XG4gICAgLyoqXG4gICAgICogVGhlIGludGVybmFsbHkgY3JlYXRlZCBDREsgYFRvcGljYCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICB0b3BpYzogc25zLklUb3BpYztcbiAgfTtcbiAgcHJpdmF0ZSBzdWJzY3JpYmVyczogUmVjb3JkPHN0cmluZywgRm4gfCBRdWV1ZT47XG4gIHByaXZhdGUgcGVybWlzc2lvbnNBdHRhY2hlZEZvckFsbFN1YnNjcmliZXJzOiBQZXJtaXNzaW9uc1tdO1xuICBwcml2YXRlIHByb3BzOiBUb3BpY1Byb3BzO1xuXG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzPzogVG9waWNQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCk7XG5cbiAgICB0aGlzLnByb3BzID0gcHJvcHMgfHwge307XG4gICAgdGhpcy5jZGsgPSB7fSBhcyBhbnk7XG4gICAgdGhpcy5zdWJzY3JpYmVycyA9IHt9O1xuICAgIHRoaXMucGVybWlzc2lvbnNBdHRhY2hlZEZvckFsbFN1YnNjcmliZXJzID0gW107XG5cbiAgICB0aGlzLmNyZWF0ZVRvcGljKCk7XG4gICAgdGhpcy5hZGRTdWJzY3JpYmVycyh0aGlzLCBwcm9wcz8uc3Vic2NyaWJlcnMgfHwge30pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBBUk4gb2YgdGhlIGludGVybmFsbHkgY3JlYXRlZCBTTlMgVG9waWMuXG4gICAqL1xuICBwdWJsaWMgZ2V0IHRvcGljQXJuKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuY2RrLnRvcGljLnRvcGljQXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoZSBpbnRlcm5hbGx5IGNyZWF0ZWQgU05TIFRvcGljLlxuICAgKi9cbiAgcHVibGljIGdldCB0b3BpY05hbWUoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5jZGsudG9waWMudG9waWNOYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGxpc3Qgb2Ygc3Vic2NyaXB0aW9ucyBmb3IgdGhpcyB0b3BpY1xuICAgKi9cbiAgcHVibGljIGdldCBzdWJzY3JpcHRpb25zKCk6IHNucy5TdWJzY3JpcHRpb25bXSB7XG4gICAgcmV0dXJuIE9iamVjdC52YWx1ZXModGhpcy5zdWJzY3JpYmVycykubWFwKChzdWIpID0+IHtcbiAgICAgIGxldCBjaGlsZHJlbjtcbiAgICAgIC8vIGxvb2sgZm9yIHNucy5TdWJzY3JpcHRpb24gaW5zaWRlIFF1ZXVlLnNxc1F1ZXVlXG4gICAgICBpZiAoc3ViIGluc3RhbmNlb2YgUXVldWUpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBzdWIuY2RrLnF1ZXVlLm5vZGUuY2hpbGRyZW47XG4gICAgICB9XG4gICAgICAvLyBsb29rIGZvciBzbnMuU3Vic2NyaXB0aW9uIGluc2lkZSBGdW5jdGlvblxuICAgICAgZWxzZSB7XG4gICAgICAgIGNoaWxkcmVuID0gc3ViLm5vZGUuY2hpbGRyZW47XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNoaWxkID0gY2hpbGRyZW4uZmluZCgoY2hpbGQpID0+IHtcbiAgICAgICAgcmV0dXJuIGlzQ0RLQ29uc3RydWN0T2YoXG4gICAgICAgICAgY2hpbGQgYXMgQ29uc3RydWN0LFxuICAgICAgICAgIFwiYXdzLWNkay1saWIuYXdzX3Nucy5TdWJzY3JpcHRpb25cIlxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gY2hpbGQgYXMgc25zLlN1YnNjcmlwdGlvbjtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBIGxpc3Qgb2YgdGhlIGludGVybmFsbHkgY3JlYXRlZCBmdW5jdGlvbiBpbnN0YW5jZXMgZm9yIHRoZSBzdWJzY3JpYmVycy5cbiAgICovXG4gIHB1YmxpYyBnZXQgc3Vic2NyaWJlckZ1bmN0aW9ucygpOiBGbltdIHtcbiAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLnN1YnNjcmliZXJzKS5maWx0ZXIoXG4gICAgICAoc3Vic2NyaWJlcikgPT4gc3Vic2NyaWJlciBpbnN0YW5jZW9mIEZuXG4gICAgKSBhcyBGbltdO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBzdWJzY3JpYmVycyB0byB0aGUgdG9waWMuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGpzIHs1fVxuICAgKiBjb25zdCB0b3BpYyA9IG5ldyBUb3BpYyhzdGFjaywgXCJUb3BpY1wiLCB7XG4gICAqICAgc3Vic2NyaWJlcnM6IHtcbiAgICogICAgIHN1YnNjcmliZXIxOiBcInNyYy9mdW5jdGlvbjEuaGFuZGxlclwiLFxuICAgKiAgICAgc3Vic2NyaWJlcjI6IFwic3JjL2Z1bmN0aW9uMi5oYW5kbGVyXCJcbiAgICogICB9LFxuICAgKiB9KTtcbiAgICogdG9waWMuYWRkU3Vic2NyaWJlcnMoc3RhY2ssIHtcbiAgICogICBzdWJzY3JpYmVyMzogXCJzcmMvZnVuY3Rpb24zLmhhbmRsZXJcIlxuICAgKiB9KTtcbiAgICogYGBgXG4gICAqL1xuICBwdWJsaWMgYWRkU3Vic2NyaWJlcnMoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBzdWJzY3JpYmVyczoge1xuICAgICAgW3N1YnNjcmliZXJOYW1lOiBzdHJpbmddOlxuICAgICAgICB8IEZ1bmN0aW9uSW5saW5lRGVmaW5pdGlvblxuICAgICAgICB8IFRvcGljRnVuY3Rpb25TdWJzY3JpYmVyUHJvcHNcbiAgICAgICAgfCBRdWV1ZVxuICAgICAgICB8IFRvcGljUXVldWVTdWJzY3JpYmVyUHJvcHM7XG4gICAgfVxuICApOiB2b2lkIHtcbiAgICBPYmplY3QuZW50cmllcyhzdWJzY3JpYmVycykuZm9yRWFjaCgoW3N1YnNjcmliZXJOYW1lLCBzdWJzY3JpYmVyXSkgPT4ge1xuICAgICAgdGhpcy5hZGRTdWJzY3JpYmVyKHNjb3BlLCBzdWJzY3JpYmVyTmFtZSwgc3Vic2NyaWJlcik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXR0YWNoZXMgdGhlIGdpdmVuIGxpc3Qgb2YgcGVybWlzc2lvbnMgdG8gYWxsIHRoZSBzdWJzY3JpYmVyIGZ1bmN0aW9ucy4gVGhpcyBhbGxvd3MgdGhlIHN1YnNjcmliZXJzIHRvIGFjY2VzcyBvdGhlciBBV1MgcmVzb3VyY2VzLlxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKlxuICAgKiBgYGBqc1xuICAgKiBjb25zdCB0b3BpYyA9IG5ldyBUb3BpYyhzdGFjaywgXCJUb3BpY1wiLCB7XG4gICAqICAgc3Vic2NyaWJlcnM6IHtcbiAgICogICAgIHN1YnNjcmliZXIxOiBcInNyYy9mdW5jdGlvbjEuaGFuZGxlclwiLFxuICAgKiAgICAgc3Vic2NyaWJlcjI6IFwic3JjL2Z1bmN0aW9uMi5oYW5kbGVyXCJcbiAgICogICB9LFxuICAgKiB9KTtcbiAgICogdG9waWMuYXR0YWNoUGVybWlzc2lvbnMoW1wiczNcIl0pO1xuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpYyBhdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9uczogUGVybWlzc2lvbnMpOiB2b2lkIHtcbiAgICBPYmplY3QudmFsdWVzKHRoaXMuc3Vic2NyaWJlcnMpXG4gICAgICAuZmlsdGVyKChzdWJzY3JpYmVyKSA9PiBzdWJzY3JpYmVyIGluc3RhbmNlb2YgRm4pXG4gICAgICAuZm9yRWFjaCgoc3Vic2NyaWJlcikgPT4gc3Vic2NyaWJlci5hdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucykpO1xuICAgIHRoaXMucGVybWlzc2lvbnNBdHRhY2hlZEZvckFsbFN1YnNjcmliZXJzLnB1c2gocGVybWlzc2lvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEF0dGFjaGVzIHRoZSBsaXN0IG9mIHBlcm1pc3Npb25zIHRvIGEgZ2l2ZW4gc3Vic2NyaWJlciBieSBpbmRleFxuICAgKiBAZXhhbXBsZVxuICAgKiBgYGBqcyB7NX1cbiAgICogY29uc3QgdG9waWMgPSBuZXcgVG9waWMoc3RhY2ssIFwiVG9waWNcIiwge1xuICAgKiAgIHN1YnNjcmliZXJzOiB7XG4gICAqICAgICBzdWJzY3JpYmVyMTogXCJzcmMvZnVuY3Rpb24xLmhhbmRsZXJcIixcbiAgICogICAgIHN1YnNjcmliZXIyOiBcInNyYy9mdW5jdGlvbjIuaGFuZGxlclwiXG4gICAqICAgfSxcbiAgICogfSk7XG4gICAqXG4gICAqIHRvcGljLmF0dGFjaFBlcm1pc3Npb25zVG9TdWJzY3JpYmVyKFwic3Vic2NyaWJlcjFcIiwgW1wiczNcIl0pO1xuICAgKiBgYGBcbiAgICovXG4gIHB1YmxpYyBhdHRhY2hQZXJtaXNzaW9uc1RvU3Vic2NyaWJlcihcbiAgICBzdWJzY3JpYmVyTmFtZTogc3RyaW5nLFxuICAgIHBlcm1pc3Npb25zOiBQZXJtaXNzaW9uc1xuICApOiB2b2lkIHtcbiAgICBjb25zdCBzdWJzY3JpYmVyID0gdGhpcy5zdWJzY3JpYmVyc1tzdWJzY3JpYmVyTmFtZV07XG4gICAgaWYgKCEoc3Vic2NyaWJlciBpbnN0YW5jZW9mIEZuKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgQ2Fubm90IGF0dGFjaCBwZXJtaXNzaW9ucyB0byB0aGUgXCIke3RoaXMubm9kZS5pZH1cIiBUb3BpYyBzdWJzY3JpYmVyIGJlY2F1c2UgaXQncyBub3QgYSBMYW1iZGEgZnVuY3Rpb25gXG4gICAgICApO1xuICAgIH1cbiAgICBzdWJzY3JpYmVyLmF0dGFjaFBlcm1pc3Npb25zKHBlcm1pc3Npb25zKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDb25zdHJ1Y3RNZXRhZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJUb3BpY1wiIGFzIGNvbnN0LFxuICAgICAgZGF0YToge1xuICAgICAgICB0b3BpY0FybjogdGhpcy5jZGsudG9waWMudG9waWNBcm4sXG4gICAgICAgIC8vIFRPRE86IERlcHJlY2F0ZSBldmVudHVhbGx5IGFuZCBtaXJyb3IgS2luZXNpc1N0cmVhbVxuICAgICAgICBzdWJzY3JpYmVyczogT2JqZWN0LnZhbHVlcyh0aGlzLnN1YnNjcmliZXJzKS5tYXAoZ2V0RnVuY3Rpb25SZWYpLFxuICAgICAgICBzdWJzY3JpYmVyTmFtZXM6IE9iamVjdC5rZXlzKHRoaXMuc3Vic2NyaWJlcnMpLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVUb3BpYygpIHtcbiAgICBjb25zdCBhcHAgPSB0aGlzLm5vZGUucm9vdCBhcyBBcHA7XG4gICAgY29uc3QgeyBjZGsgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBpZiAoaXNDREtDb25zdHJ1Y3QoY2RrPy50b3BpYykpIHtcbiAgICAgIHRoaXMuY2RrLnRvcGljID0gY2RrPy50b3BpYyBhcyBzbnMuVG9waWM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHNuc1RvcGljUHJvcHMgPSAoY2RrPy50b3BpYyB8fCB7fSkgYXMgc25zLlRvcGljUHJvcHM7XG4gICAgICB0aGlzLmNkay50b3BpYyA9IG5ldyBzbnMuVG9waWModGhpcywgXCJUb3BpY1wiLCB7XG4gICAgICAgIHRvcGljTmFtZTogYXBwLmxvZ2ljYWxQcmVmaXhlZE5hbWUodGhpcy5ub2RlLmlkKSxcbiAgICAgICAgLi4uc25zVG9waWNQcm9wcyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkU3Vic2NyaWJlcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIHN1YnNjcmliZXJOYW1lOiBzdHJpbmcsXG4gICAgc3Vic2NyaWJlcjpcbiAgICAgIHwgRnVuY3Rpb25JbmxpbmVEZWZpbml0aW9uXG4gICAgICB8IFRvcGljRnVuY3Rpb25TdWJzY3JpYmVyUHJvcHNcbiAgICAgIHwgUXVldWVcbiAgICAgIHwgVG9waWNRdWV1ZVN1YnNjcmliZXJQcm9wc1xuICApOiB2b2lkIHtcbiAgICBpZiAoXG4gICAgICBzdWJzY3JpYmVyIGluc3RhbmNlb2YgUXVldWUgfHxcbiAgICAgIChzdWJzY3JpYmVyIGFzIFRvcGljUXVldWVTdWJzY3JpYmVyUHJvcHMpLnF1ZXVlXG4gICAgKSB7XG4gICAgICBzdWJzY3JpYmVyID0gc3Vic2NyaWJlciBhcyBRdWV1ZSB8IFRvcGljUXVldWVTdWJzY3JpYmVyUHJvcHM7XG4gICAgICB0aGlzLmFkZFF1ZXVlU3Vic2NyaWJlcihzY29wZSwgc3Vic2NyaWJlck5hbWUsIHN1YnNjcmliZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdWJzY3JpYmVyID0gc3Vic2NyaWJlciBhc1xuICAgICAgICB8IEZ1bmN0aW9uSW5saW5lRGVmaW5pdGlvblxuICAgICAgICB8IFRvcGljRnVuY3Rpb25TdWJzY3JpYmVyUHJvcHM7XG4gICAgICB0aGlzLmFkZEZ1bmN0aW9uU3Vic2NyaWJlcihzY29wZSwgc3Vic2NyaWJlck5hbWUsIHN1YnNjcmliZXIpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkUXVldWVTdWJzY3JpYmVyKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgc3Vic2NyaWJlck5hbWU6IHN0cmluZyxcbiAgICBzdWJzY3JpYmVyOiBRdWV1ZSB8IFRvcGljUXVldWVTdWJzY3JpYmVyUHJvcHNcbiAgKTogdm9pZCB7XG4gICAgLy8gUGFyc2Ugc3Vic2NyaWJlciBwcm9wc1xuICAgIGxldCBzdWJzY3JpcHRpb25Qcm9wcztcbiAgICBsZXQgcXVldWU7XG4gICAgaWYgKHN1YnNjcmliZXIgaW5zdGFuY2VvZiBRdWV1ZSkge1xuICAgICAgc3Vic2NyaWJlciA9IHN1YnNjcmliZXIgYXMgUXVldWU7XG4gICAgICBxdWV1ZSA9IHN1YnNjcmliZXI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YnNjcmliZXIgPSBzdWJzY3JpYmVyIGFzIFRvcGljUXVldWVTdWJzY3JpYmVyUHJvcHM7XG4gICAgICBzdWJzY3JpcHRpb25Qcm9wcyA9IHN1YnNjcmliZXIuY2RrPy5zdWJzY3JpcHRpb247XG4gICAgICBxdWV1ZSA9IHN1YnNjcmliZXIucXVldWU7XG4gICAgfVxuICAgIHRoaXMuc3Vic2NyaWJlcnNbc3Vic2NyaWJlck5hbWVdID0gcXVldWU7XG5cbiAgICAvLyBDcmVhdGUgU3Vic2NyaXB0aW9uXG4gICAgdGhpcy5jZGsudG9waWMuYWRkU3Vic2NyaXB0aW9uKFxuICAgICAgbmV3IHNuc1N1YnNjcmlwdGlvbnMuU3FzU3Vic2NyaXB0aW9uKHF1ZXVlLmNkay5xdWV1ZSwgc3Vic2NyaXB0aW9uUHJvcHMpXG4gICAgKTtcbiAgfVxuXG4gIHByaXZhdGUgYWRkRnVuY3Rpb25TdWJzY3JpYmVyKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgc3Vic2NyaWJlck5hbWU6IHN0cmluZyxcbiAgICBzdWJzY3JpYmVyOiBGdW5jdGlvbklubGluZURlZmluaXRpb24gfCBUb3BpY0Z1bmN0aW9uU3Vic2NyaWJlclByb3BzXG4gICk6IHZvaWQge1xuICAgIC8vIFBhcnNlIHN1YnNjcmliZXIgcHJvcHNcbiAgICBsZXQgc3Vic2NyaXB0aW9uUHJvcHM7XG4gICAgbGV0IGZ1bmN0aW9uRGVmaW5pdGlvbjtcbiAgICBpZiAodHlwZW9mIHN1YnNjcmliZXIgIT09IFwic3RyaW5nXCIgJiYgXCJmdW5jdGlvblwiIGluIHN1YnNjcmliZXIpIHtcbiAgICAgIHN1YnNjcmlwdGlvblByb3BzID0gc3Vic2NyaWJlci5jZGs/LnN1YnNjcmlwdGlvbjtcbiAgICAgIGZ1bmN0aW9uRGVmaW5pdGlvbiA9IHN1YnNjcmliZXIuZnVuY3Rpb247XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1YnNjcmliZXIgPSBzdWJzY3JpYmVyIGFzIEZ1bmN0aW9uSW5saW5lRGVmaW5pdGlvbjtcbiAgICAgIGZ1bmN0aW9uRGVmaW5pdGlvbiA9IHN1YnNjcmliZXI7XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGZ1bmN0aW9uXG4gICAgY29uc3QgZm4gPSBGbi5mcm9tRGVmaW5pdGlvbihcbiAgICAgIHNjb3BlLFxuICAgICAgYFN1YnNjcmliZXJfJHt0aGlzLm5vZGUuaWR9XyR7c3Vic2NyaWJlck5hbWV9YCxcbiAgICAgIGZ1bmN0aW9uRGVmaW5pdGlvbixcbiAgICAgIHRoaXMucHJvcHMuZGVmYXVsdHM/LmZ1bmN0aW9uLFxuICAgICAgYFRoZSBcImRlZmF1bHRzLmZ1bmN0aW9uXCIgY2Fubm90IGJlIGFwcGxpZWQgaWYgYW4gaW5zdGFuY2Ugb2YgYSBGdW5jdGlvbiBjb25zdHJ1Y3QgaXMgcGFzc2VkIGluLiBNYWtlIHN1cmUgdG8gZGVmaW5lIGFsbCB0aGUgc3Vic2NyaWJlcnMgdXNpbmcgRnVuY3Rpb25Qcm9wcywgc28gdGhlIFRvcGljIGNvbnN0cnVjdCBjYW4gYXBwbHkgdGhlIFwiZGVmYXVsdHMuZnVuY3Rpb25cIiB0byB0aGVtLmBcbiAgICApO1xuICAgIHRoaXMuc3Vic2NyaWJlcnNbc3Vic2NyaWJlck5hbWVdID0gZm47XG5cbiAgICAvLyBDcmVhdGUgU3Vic2NyaXB0aW9uXG4gICAgdGhpcy5jZGsudG9waWMuYWRkU3Vic2NyaXB0aW9uKFxuICAgICAgbmV3IHNuc1N1YnNjcmlwdGlvbnMuTGFtYmRhU3Vic2NyaXB0aW9uKGZuLCBzdWJzY3JpcHRpb25Qcm9wcylcbiAgICApO1xuXG4gICAgLy8gQXR0YWNoIGV4aXN0aW5nIHBlcm1pc3Npb25zXG4gICAgdGhpcy5wZXJtaXNzaW9uc0F0dGFjaGVkRm9yQWxsU3Vic2NyaWJlcnMuZm9yRWFjaCgocGVybWlzc2lvbnMpID0+XG4gICAgICBmbi5hdHRhY2hQZXJtaXNzaW9ucyhwZXJtaXNzaW9ucylcbiAgICApO1xuICB9XG59XG4iXX0=