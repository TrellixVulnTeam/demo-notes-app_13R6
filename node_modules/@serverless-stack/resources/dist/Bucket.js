"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = void 0;
const constructs_1 = require("constructs");
const s3 = __importStar(require("aws-cdk-lib/aws-s3"));
const s3Notifications = __importStar(require("aws-cdk-lib/aws-s3-notifications"));
const Queue_1 = require("./Queue");
const Topic_1 = require("./Topic");
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const duration_1 = require("./util/duration");
/////////////////////
// Construct
/////////////////////
/**
 * The `Bucket` construct is a higher level CDK construct that makes it easy to create an S3 Bucket and to define its notifications. It also internally connects the notifications and bucket together.
 *
 * @example
 * ### Using the minimal config
 *
 * ```js
 * import { Bucket } from "@serverless-stack/resources";
 *
 * new Bucket(stack, "Bucket");
 * ```
 */
class Bucket extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props || {};
        this.cdk = {};
        this.notifications = {};
        this.permissionsAttachedForAllNotifications = [];
        this.createBucket();
        this.addNotifications(this, (props === null || props === void 0 ? void 0 : props.notifications) || {});
    }
    /**
     * The ARN of the internally created `Bucket` instance.
     */
    get bucketArn() {
        return this.cdk.bucket.bucketArn;
    }
    /**
     * The name of the internally created `Bucket` instance.
     */
    get bucketName() {
        return this.cdk.bucket.bucketName;
    }
    /**
     * A list of the internally created functions for the notifications.
     */
    get notificationFunctions() {
        return Object.values(this.notifications).filter((notification) => notification instanceof Function_1.Function);
    }
    /**
     * Add notification subscriptions after the bucket has been created
     *
     * @example
     * ```js {3}
     * const bucket = new Bucket(stack, "Bucket");
     * bucket.addNotifications(stack, ["src/notification.main"]);
     * ```
     */
    addNotifications(scope, notifications) {
        Object.entries(notifications).forEach(([notificationName, notification]) => {
            this.addNotification(scope, notificationName, notification);
        });
    }
    /**
     * Attaches additional permissions to all bucket notifications
     * @example
     * ```js {20}
     * const bucket = new Bucket(stack, "Bucket", {
     *   notifications: {
     *     myNotification: "src/function.handler",
     *   }
     * });
     *
     * bucket.attachPermissions(["s3"]);
     * ```
     */
    attachPermissions(permissions) {
        this.notificationFunctions.forEach((notification) => notification.attachPermissions(permissions));
        this.permissionsAttachedForAllNotifications.push(permissions);
    }
    /**
     * Attaches additional permissions to a specific bucket notification
     *
     * @example
     * ```js {20}
     * const bucket = new Bucket(stack, "Bucket", {
     *   notifications: {
     *     myNotification: "src/function.handler",
     *   }
     * });
     *
     * bucket.attachPermissions("myNotification", ["s3"]);
     * ```
     */
    attachPermissionsToNotification(notificationName, permissions) {
        const notification = this.notifications[notificationName];
        if (!(notification instanceof Function_1.Function)) {
            throw new Error(`Cannot attach permissions to the "${this.node.id}" Bucket notification because it's not a Lambda function`);
        }
        notification.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "Bucket",
            data: {
                name: this.cdk.bucket.bucketName,
                notifications: Object.values(this.notifications).map(Construct_1.getFunctionRef),
                notificationNames: Object.keys(this.notifications),
            },
        };
    }
    createBucket() {
        const { name, cors, cdk } = this.props;
        if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.bucket)) {
            if (cors !== undefined) {
                throw new Error(`Cannot configure the "cors" when "cdk.bucket" is a construct`);
            }
            this.cdk.bucket = cdk === null || cdk === void 0 ? void 0 : cdk.bucket;
        }
        else {
            this.cdk.bucket = new s3.Bucket(this, "Bucket", Object.assign({ bucketName: name, cors: this.buildCorsConfig(cors) }, cdk === null || cdk === void 0 ? void 0 : cdk.bucket));
        }
    }
    addNotification(scope, notificationName, notification) {
        if (notification instanceof Queue_1.Queue ||
            notification.queue) {
            notification = notification;
            this.addQueueNotification(scope, notificationName, notification);
        }
        else if (notification instanceof Topic_1.Topic ||
            notification.topic) {
            notification = notification;
            this.addTopicNotification(scope, notificationName, notification);
        }
        else {
            notification = notification;
            this.addFunctionNotification(scope, notificationName, notification);
        }
    }
    addQueueNotification(scope, notificationName, notification) {
        // Parse notification props
        let notificationProps;
        let queue;
        if (notification instanceof Queue_1.Queue) {
            notification = notification;
            queue = notification;
        }
        else {
            notification = notification;
            notificationProps = {
                events: notification.events,
                filters: notification.filters,
            };
            queue = notification.queue;
        }
        this.notifications[notificationName] = queue;
        // Create Notifications
        const events = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.events) || [
            "object_created",
            "object_removed",
        ];
        const filters = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.filters) || [];
        events.forEach((event) => this.cdk.bucket.addEventNotification(s3.EventType[event.toUpperCase()], new s3Notifications.SqsDestination(queue.cdk.queue), ...filters));
    }
    addTopicNotification(scope, notificationName, notification) {
        // Parse notification props
        let notificationProps;
        let topic;
        if (notification instanceof Topic_1.Topic) {
            notification = notification;
            topic = notification;
        }
        else {
            notification = notification;
            notificationProps = {
                events: notification.events,
                filters: notification.filters,
            };
            topic = notification.topic;
        }
        this.notifications[notificationName] = topic;
        // Create Notifications
        const events = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.events) || [
            "object_created",
            "object_removed",
        ];
        const filters = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.filters) || [];
        events.forEach((event) => this.cdk.bucket.addEventNotification(s3.EventType[event.toUpperCase()], new s3Notifications.SnsDestination(topic.cdk.topic), ...filters));
    }
    addFunctionNotification(scope, notificationName, notification) {
        var _a;
        // parse notification
        let notificationFunction, notificationProps;
        if (notification.function) {
            notification = notification;
            notificationFunction = notification.function;
            notificationProps = {
                events: notification.events,
                filters: notification.filters,
            };
        }
        else {
            notificationFunction = notification;
        }
        // create function
        const fn = Function_1.Function.fromDefinition(scope, `Notification_${this.node.id}_${notificationName}`, notificationFunction, (_a = this.props.defaults) === null || _a === void 0 ? void 0 : _a.function, `The "defaults.function" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the consumers using FunctionProps, so the Table construct can apply the "defaults.function" to them.`);
        this.notifications[notificationName] = fn;
        // create Notifications
        const events = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.events) || [
            "object_created",
            "object_removed",
        ];
        const filters = (notificationProps === null || notificationProps === void 0 ? void 0 : notificationProps.filters) || [];
        events.forEach((event) => this.cdk.bucket.addEventNotification(s3.EventType[event.toUpperCase()], new s3Notifications.LambdaDestination(fn), ...filters));
        // attached permissions
        this.permissionsAttachedForAllNotifications.forEach((permissions) => fn.attachPermissions(permissions));
    }
    buildCorsConfig(cors) {
        if (cors === undefined || cors === false) {
            return;
        }
        if (cors === true) {
            return [
                {
                    allowedHeaders: ["*"],
                    allowedMethods: [
                        s3.HttpMethods.GET,
                        s3.HttpMethods.PUT,
                        s3.HttpMethods.HEAD,
                        s3.HttpMethods.POST,
                        s3.HttpMethods.DELETE,
                    ],
                    allowedOrigins: ["*"],
                },
            ];
        }
        return cors.map((e) => ({
            allowedMethods: (e.allowedMethods || []).map((method) => s3.HttpMethods[method]),
            allowedOrigins: e.allowedOrigins,
            allowedHeaders: e.allowedHeaders,
            exposedHeaders: e.exposedHeaders,
            id: e.id,
            maxAge: e.maxAge && (0, duration_1.toCdkDuration)(e.maxAge).toSeconds(),
        }));
    }
}
exports.Bucket = Bucket;
//# sourceMappingURL=data:application/json;base64,