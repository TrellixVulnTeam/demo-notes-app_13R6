"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cron = void 0;
const constructs_1 = require("constructs");
const events = __importStar(require("aws-cdk-lib/aws-events"));
const eventsTargets = __importStar(require("aws-cdk-lib/aws-events-targets"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
/////////////////////
// Construct
/////////////////////
/**
 * The `Cron` construct is a higher level CDK construct that makes it easy to create a cron job. You can create a cron job by handler function and specifying the schedule it needs to run on. Internally this construct uses a [EventBridge Rule](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.aws_events.Rule.html).
 */
class Cron extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        this.cdk = {};
        this.createEventsRule();
        this.jobFunction = this.createRuleTarget();
    }
    /**
     * Attaches the given list of [permissions](Permissions.md) to the `jobFunction`. This allows the function to access other AWS resources.
     *
     * Internally calls [`Function.attachPermissions`](Function.md#attachpermissions).
     *
     */
    attachPermissions(permissions) {
        this.jobFunction.attachPermissions(permissions);
    }
    getConstructMetadata() {
        const cfnRule = this.cdk.rule.node.defaultChild;
        return {
            type: "Cron",
            data: {
                schedule: cfnRule.scheduleExpression,
                ruleName: this.cdk.rule.ruleName,
                job: (0, Construct_1.getFunctionRef)(this.jobFunction),
            },
        };
    }
    createEventsRule() {
        var _a;
        const { cdk, schedule } = this.props;
        const id = this.node.id;
        // Configure Schedule
        if (!schedule && !((_a = cdk === null || cdk === void 0 ? void 0 : cdk.rule) === null || _a === void 0 ? void 0 : _a.schedule)) {
            throw new Error(`No schedule defined for the "${id}" Cron`);
        }
        this.cdk.rule = new events.Rule(this, "Rule", Object.assign({ schedule: schedule && events.Schedule.expression(schedule) }, cdk === null || cdk === void 0 ? void 0 : cdk.rule));
    }
    createRuleTarget() {
        var _a;
        const { job } = this.props;
        const id = this.node.id;
        if (!job) {
            throw new Error(`No job defined for the "${id}" Cron`);
        }
        // normalize job
        let jobFunction, jobProps;
        if (job.function) {
            jobFunction = job.function;
            jobProps = (_a = job.cdk) === null || _a === void 0 ? void 0 : _a.target;
        }
        else {
            jobFunction = job;
            jobProps = {};
        }
        // create function
        const fn = Function_1.Function.fromDefinition(this, "Job", jobFunction);
        this.cdk.rule.addTarget(new eventsTargets.LambdaFunction(fn, jobProps));
        return fn;
    }
}
exports.Cron = Cron;
//# sourceMappingURL=data:application/json;base64,