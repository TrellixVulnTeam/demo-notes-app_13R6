"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugApp = void 0;
const cdk = __importStar(require("aws-cdk-lib"));
const Construct_1 = require("./Construct");
/**
 * The DebugApp construct is used internally by SST to
 * - Deploy the [`DebugStack`](DebugStack.md). It contains the resources that powers [Live Lambda Development](/live-lambda-development.md).
 * - Automatically prefix the debug stack name with the stage and app name.
 *
 * It extends [`cdk.App`](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.App.html). It's made available as the `app` in the `debugApp()` callback in the `stacks/index.js` of your SST app.
 *
 * ```js
 * export function debugApp(app) {
 *   new sst.DebugStack(app, "debug-stack");
 * }
 * ```
 *
 * Since it is initialized internally, the props that are passed to `DebugApp` cannot be changed.
 *
 * @example
 */
class DebugApp extends cdk.App {
    /**
     * @internal
     */
    constructor(deployProps) {
        super();
        this.name = deployProps.name;
        this.stage = deployProps.stage;
        this.region = deployProps.region;
        this.account = process.env.CDK_DEFAULT_ACCOUNT || "my-account";
    }
    synth(options = {}) {
        // Check app has stack
        const stacks = this.node.children.filter((child) => (0, Construct_1.isSSTDebugStack)(child));
        if (stacks.length > 1) {
            console.error(`Error: You can only create 1 DebugStack inside the "debugApp()" callback.\n`);
            process.exit(1);
        }
        if (stacks.length === 0) {
            console.error(`Error: The "debugApp()" callback is not creating a DebugStack.\n`);
            process.exit(1);
        }
        for (const child of this.node.children) {
            if ((0, Construct_1.isStackConstruct)(child)) {
                // Stack names need to be parameterized with the stage name
                if (!child.stackName.startsWith(`${this.stage}-`) &&
                    !child.stackName.endsWith(`-${this.stage}`) &&
                    child.stackName.indexOf(`-${this.stage}-`) === -1) {
                    console.error(`Error: Stack "${child.stackName}" is not parameterized with the stage name. The stack name needs to either start with "$stage-", end in "-$stage", or contain the stage name "-$stage-".\n`);
                    process.exit(1);
                }
            }
        }
        return super.synth(options);
    }
    /**
     * Use this method to prefix resource names in your stacks to make sure they don't thrash when deployed to different stages in the same AWS account. This method will prefix a given resource name with the stage and app name. Using the format `${stage}-${name}-${logicalName}`.
     */
    logicalPrefixedName(logicalName) {
        return `${this.stage}-${this.name}-${logicalName}`;
    }
}
exports.DebugApp = DebugApp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGVidWdBcHAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvRGVidWdBcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpREFBbUM7QUFFbkMsMkNBQWdFO0FBb0JoRTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUNILE1BQWEsUUFBUyxTQUFRLEdBQUcsQ0FBQyxHQUFHO0lBa0JuQzs7T0FFRztJQUNILFlBQVksV0FBZ0M7UUFDMUMsS0FBSyxFQUFFLENBQUM7UUFFUixJQUFJLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQy9CLElBQUksQ0FBQyxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNqQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLElBQUksWUFBWSxDQUFDO0lBQ2pFLENBQUM7SUFFRCxLQUFLLENBQUMsVUFBcUMsRUFBRTtRQUMzQyxzQkFBc0I7UUFDdEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxJQUFBLDJCQUFlLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM1RSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3JCLE9BQU8sQ0FBQyxLQUFLLENBQ1gsNkVBQTZFLENBQzlFLENBQUM7WUFDRixPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO1FBQ0QsSUFBSSxNQUFNLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUN2QixPQUFPLENBQUMsS0FBSyxDQUNYLGtFQUFrRSxDQUNuRSxDQUFDO1lBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQjtRQUVELEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDdEMsSUFBSSxJQUFBLDRCQUFnQixFQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUMzQiwyREFBMkQ7Z0JBQzNELElBQ0UsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQztvQkFDN0MsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDM0MsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFDakQ7b0JBQ0EsT0FBTyxDQUFDLEtBQUssQ0FDWCxpQkFBaUIsS0FBSyxDQUFDLFNBQVMsNEpBQTRKLENBQzdMLENBQUM7b0JBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDakI7YUFDRjtTQUNGO1FBRUQsT0FBTyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlCLENBQUM7SUFFRDs7T0FFRztJQUNJLG1CQUFtQixDQUFDLFdBQW1CO1FBQzVDLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7SUFDckQsQ0FBQztDQUNGO0FBdkVELDRCQXVFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCAqIGFzIGN4YXBpIGZyb20gXCJhd3MtY2RrLWxpYi9jeC1hcGlcIjtcbmltcG9ydCB7IGlzU3RhY2tDb25zdHJ1Y3QsIGlzU1NURGVidWdTdGFjayB9IGZyb20gXCIuL0NvbnN0cnVjdFwiO1xuXG4vKipcbiAqIERlcGxveSBwcm9wcyBmb3IgYXBwcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBEZWJ1Z0FwcERlcGxveVByb3BzIHtcbiAgLyoqXG4gICAqIFRoZSBhcHAgbmFtZSwgdXNlZCB0byBwcmVmaXggc3RhY2tzLlxuICAgKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHN0YWdlIHRvIGRlcGxveSB0aGlzIGFwcCB0by5cbiAgICovXG4gIHN0YWdlOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcmVnaW9uIHRvIGRlcGxveSB0aGlzIGFwcCB0by5cbiAgICovXG4gIHJlZ2lvbjogc3RyaW5nO1xufVxuXG4vKipcbiAqIFRoZSBEZWJ1Z0FwcCBjb25zdHJ1Y3QgaXMgdXNlZCBpbnRlcm5hbGx5IGJ5IFNTVCB0b1xuICogLSBEZXBsb3kgdGhlIFtgRGVidWdTdGFja2BdKERlYnVnU3RhY2subWQpLiBJdCBjb250YWlucyB0aGUgcmVzb3VyY2VzIHRoYXQgcG93ZXJzIFtMaXZlIExhbWJkYSBEZXZlbG9wbWVudF0oL2xpdmUtbGFtYmRhLWRldmVsb3BtZW50Lm1kKS5cbiAqIC0gQXV0b21hdGljYWxseSBwcmVmaXggdGhlIGRlYnVnIHN0YWNrIG5hbWUgd2l0aCB0aGUgc3RhZ2UgYW5kIGFwcCBuYW1lLlxuICpcbiAqIEl0IGV4dGVuZHMgW2BjZGsuQXBwYF0oaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2Nkay9hcGkvdjIvZG9jcy9hd3MtY2RrLWxpYi5BcHAuaHRtbCkuIEl0J3MgbWFkZSBhdmFpbGFibGUgYXMgdGhlIGBhcHBgIGluIHRoZSBgZGVidWdBcHAoKWAgY2FsbGJhY2sgaW4gdGhlIGBzdGFja3MvaW5kZXguanNgIG9mIHlvdXIgU1NUIGFwcC5cbiAqXG4gKiBgYGBqc1xuICogZXhwb3J0IGZ1bmN0aW9uIGRlYnVnQXBwKGFwcCkge1xuICogICBuZXcgc3N0LkRlYnVnU3RhY2soYXBwLCBcImRlYnVnLXN0YWNrXCIpO1xuICogfVxuICogYGBgXG4gKlxuICogU2luY2UgaXQgaXMgaW5pdGlhbGl6ZWQgaW50ZXJuYWxseSwgdGhlIHByb3BzIHRoYXQgYXJlIHBhc3NlZCB0byBgRGVidWdBcHBgIGNhbm5vdCBiZSBjaGFuZ2VkLlxuICpcbiAqIEBleGFtcGxlXG4gKi9cbmV4cG9ydCBjbGFzcyBEZWJ1Z0FwcCBleHRlbmRzIGNkay5BcHAge1xuICAvKipcbiAgICogVGhlIG5hbWUgb2YgdGhlIGFwcC4gVGhpcyBjb21lcyBmcm9tIHRoZSBgbmFtZWAgaW4geW91ciBgc3N0Lmpzb25gLlxuICAgKi9cbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSBzdGFnZSB0aGUgYXBwIGlzIGJlaW5nIGRlcGxveWVkIHRvLiBJZiB0aGlzIGlzIG5vdCBzcGVjaWZpZWQgYXMgdGhlIFtgLS1zdGFnZWBdKC9wYWNrYWdlcy9jbGkubWQjLS1zdGFnZSkgb3B0aW9uLCBpdCdsbCBkZWZhdWx0IHRvIHRoZSBzdGFnZSBjb25maWd1cmVkIGR1cmluZyB0aGUgaW5pdGlhbCBydW4gb2YgdGhlIFNTVCBDTEkuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgc3RhZ2U6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSByZWdpb24gdGhlIGFwcCBpcyBiZWluZyBkZXBsb3llZCB0by4gSWYgdGhpcyBpcyBub3Qgc3BlY2lmaWVkIGFzIHRoZSBbYC0tcmVnaW9uYF0oL3BhY2thZ2VzL2NsaS5tZCMtLXJlZ2lvbikgb3B0aW9uIGluIHRoZSBTU1QgQ0xJLCBpdCdsbCBkZWZhdWx0IHRvIHRoZSBgcmVnaW9uYCBpbiB5b3VyIGBzc3QuanNvbmAuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgcmVnaW9uOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgQVdTIGFjY291bnQgdGhlIGFwcCBpcyBiZWluZyBkZXBsb3llZCB0by4gVGhpcyBjb21lcyBmcm9tIHRoZSBJQU0gY3JlZGVudGlhbHMgYmVpbmcgdXNlZCB0byBydW4gdGhlIFNTVCBDTEkuXG4gICAqL1xuICBwdWJsaWMgcmVhZG9ubHkgYWNjb3VudDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKGRlcGxveVByb3BzOiBEZWJ1Z0FwcERlcGxveVByb3BzKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIHRoaXMubmFtZSA9IGRlcGxveVByb3BzLm5hbWU7XG4gICAgdGhpcy5zdGFnZSA9IGRlcGxveVByb3BzLnN0YWdlO1xuICAgIHRoaXMucmVnaW9uID0gZGVwbG95UHJvcHMucmVnaW9uO1xuICAgIHRoaXMuYWNjb3VudCA9IHByb2Nlc3MuZW52LkNES19ERUZBVUxUX0FDQ09VTlQgfHwgXCJteS1hY2NvdW50XCI7XG4gIH1cblxuICBzeW50aChvcHRpb25zOiBjZGsuU3RhZ2VTeW50aGVzaXNPcHRpb25zID0ge30pOiBjeGFwaS5DbG91ZEFzc2VtYmx5IHtcbiAgICAvLyBDaGVjayBhcHAgaGFzIHN0YWNrXG4gICAgY29uc3Qgc3RhY2tzID0gdGhpcy5ub2RlLmNoaWxkcmVuLmZpbHRlcigoY2hpbGQpID0+IGlzU1NURGVidWdTdGFjayhjaGlsZCkpO1xuICAgIGlmIChzdGFja3MubGVuZ3RoID4gMSkge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgYEVycm9yOiBZb3UgY2FuIG9ubHkgY3JlYXRlIDEgRGVidWdTdGFjayBpbnNpZGUgdGhlIFwiZGVidWdBcHAoKVwiIGNhbGxiYWNrLlxcbmBcbiAgICAgICk7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuICAgIGlmIChzdGFja3MubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICBgRXJyb3I6IFRoZSBcImRlYnVnQXBwKClcIiBjYWxsYmFjayBpcyBub3QgY3JlYXRpbmcgYSBEZWJ1Z1N0YWNrLlxcbmBcbiAgICAgICk7XG4gICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBjaGlsZCBvZiB0aGlzLm5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGlmIChpc1N0YWNrQ29uc3RydWN0KGNoaWxkKSkge1xuICAgICAgICAvLyBTdGFjayBuYW1lcyBuZWVkIHRvIGJlIHBhcmFtZXRlcml6ZWQgd2l0aCB0aGUgc3RhZ2UgbmFtZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgIWNoaWxkLnN0YWNrTmFtZS5zdGFydHNXaXRoKGAke3RoaXMuc3RhZ2V9LWApICYmXG4gICAgICAgICAgIWNoaWxkLnN0YWNrTmFtZS5lbmRzV2l0aChgLSR7dGhpcy5zdGFnZX1gKSAmJlxuICAgICAgICAgIGNoaWxkLnN0YWNrTmFtZS5pbmRleE9mKGAtJHt0aGlzLnN0YWdlfS1gKSA9PT0gLTFcbiAgICAgICAgKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICAgIGBFcnJvcjogU3RhY2sgXCIke2NoaWxkLnN0YWNrTmFtZX1cIiBpcyBub3QgcGFyYW1ldGVyaXplZCB3aXRoIHRoZSBzdGFnZSBuYW1lLiBUaGUgc3RhY2sgbmFtZSBuZWVkcyB0byBlaXRoZXIgc3RhcnQgd2l0aCBcIiRzdGFnZS1cIiwgZW5kIGluIFwiLSRzdGFnZVwiLCBvciBjb250YWluIHRoZSBzdGFnZSBuYW1lIFwiLSRzdGFnZS1cIi5cXG5gXG4gICAgICAgICAgKTtcbiAgICAgICAgICBwcm9jZXNzLmV4aXQoMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuc3ludGgob3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogVXNlIHRoaXMgbWV0aG9kIHRvIHByZWZpeCByZXNvdXJjZSBuYW1lcyBpbiB5b3VyIHN0YWNrcyB0byBtYWtlIHN1cmUgdGhleSBkb24ndCB0aHJhc2ggd2hlbiBkZXBsb3llZCB0byBkaWZmZXJlbnQgc3RhZ2VzIGluIHRoZSBzYW1lIEFXUyBhY2NvdW50LiBUaGlzIG1ldGhvZCB3aWxsIHByZWZpeCBhIGdpdmVuIHJlc291cmNlIG5hbWUgd2l0aCB0aGUgc3RhZ2UgYW5kIGFwcCBuYW1lLiBVc2luZyB0aGUgZm9ybWF0IGAke3N0YWdlfS0ke25hbWV9LSR7bG9naWNhbE5hbWV9YC5cbiAgICovXG4gIHB1YmxpYyBsb2dpY2FsUHJlZml4ZWROYW1lKGxvZ2ljYWxOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLnN0YWdlfS0ke3RoaXMubmFtZX0tJHtsb2dpY2FsTmFtZX1gO1xuICB9XG59XG4iXX0=