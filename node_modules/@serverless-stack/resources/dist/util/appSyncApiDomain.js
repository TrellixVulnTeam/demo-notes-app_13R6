"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildCustomDomainData = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const route53 = __importStar(require("aws-cdk-lib/aws-route53"));
const acm = __importStar(require("aws-cdk-lib/aws-certificatemanager"));
function buildCustomDomainData(scope, customDomain) {
    if (customDomain === undefined) {
        return;
    }
    // customDomain is a string
    else if (typeof customDomain === "string") {
        return buildDataForStringInput(scope, customDomain);
    }
    // customDomain.domainName is a string
    else if (customDomain.domainName) {
        return customDomain.isExternalDomain
            ? buildDataForExternalDomainInput(scope, customDomain)
            : buildDataForInternalDomainInput(scope, customDomain);
    }
    // customDomain.domainName not exists
    throw new Error(`Missing "domainName" in sst.AppSyncApi's customDomain setting`);
}
exports.buildCustomDomainData = buildCustomDomainData;
function buildDataForStringInput(scope, customDomain) {
    // validate: customDomain is a TOKEN string
    // ie. imported SSM value: ssm.StringParameter.valueForStringParameter()
    if (aws_cdk_lib_1.Token.isUnresolved(customDomain)) {
        throw new Error(`You also need to specify the "hostedZone" if the "domainName" is passed in as a reference.`);
    }
    assertDomainNameIsLowerCase(customDomain);
    const domainName = customDomain;
    const hostedZoneDomain = domainName.split(".").slice(1).join(".");
    const hostedZone = lookupHostedZone(scope, hostedZoneDomain);
    const certificate = createCertificate(scope, domainName, hostedZone);
    createRecord(scope, hostedZone, domainName);
    return {
        certificate,
        domainName,
    };
}
function buildDataForInternalDomainInput(scope, customDomain) {
    var _a, _b;
    // If customDomain is a TOKEN string, "hostedZone" has to be passed in. This
    // is because "hostedZone" cannot be parsed from a TOKEN value.
    if (aws_cdk_lib_1.Token.isUnresolved(customDomain.domainName)) {
        if (!customDomain.hostedZone) {
            throw new Error(`You also need to specify the "hostedZone" if the "domainName" is passed in as a reference.`);
        }
    }
    else {
        assertDomainNameIsLowerCase(customDomain.domainName);
    }
    const domainName = customDomain.domainName;
    // Lookup hosted zone
    // Note: Allow user passing in `hostedZone` object. The use case is when
    //       there are multiple HostedZones with the same domain, but one is
    //       public, and one is private.
    let hostedZone;
    if (customDomain.hostedZone) {
        const hostedZoneDomain = customDomain.hostedZone;
        hostedZone = lookupHostedZone(scope, hostedZoneDomain);
    }
    else if ((_a = customDomain.cdk) === null || _a === void 0 ? void 0 : _a.hostedZone) {
        hostedZone = customDomain.cdk.hostedZone;
    }
    else {
        const hostedZoneDomain = domainName.split(".").slice(1).join(".");
        hostedZone = lookupHostedZone(scope, hostedZoneDomain);
    }
    // Create certificate
    // Note: Allow user passing in `certificate` object. The use case is for
    //       user to create wildcard certificate or using an imported certificate.
    const certificate = ((_b = customDomain.cdk) === null || _b === void 0 ? void 0 : _b.certificate)
        ? customDomain.cdk.certificate
        : createCertificate(scope, domainName, hostedZone);
    createRecord(scope, hostedZone, domainName);
    return {
        certificate,
        domainName,
    };
}
function buildDataForExternalDomainInput(scope, customDomain) {
    var _a, _b;
    // if it is external, then a certificate is required
    if (!((_a = customDomain.cdk) === null || _a === void 0 ? void 0 : _a.certificate)) {
        throw new Error(`A valid certificate is required when "isExternalDomain" is set to "true".`);
    }
    // if it is external, then the hostedZone is not required
    if (customDomain.hostedZone || ((_b = customDomain.cdk) === null || _b === void 0 ? void 0 : _b.hostedZone)) {
        throw new Error(`Hosted zones can only be configured for domains hosted on Amazon Route 53. Do not set the "hostedZone" when "isExternalDomain" is enabled.`);
    }
    const domainName = customDomain.domainName;
    assertDomainNameIsLowerCase(domainName);
    const certificate = customDomain.cdk.certificate;
    return {
        certificate,
        domainName,
    };
}
function lookupHostedZone(scope, hostedZoneDomain) {
    return route53.HostedZone.fromLookup(scope, "HostedZone", {
        domainName: hostedZoneDomain,
    });
}
function createCertificate(scope, domainName, hostedZone) {
    return new acm.Certificate(scope, "Certificate", {
        domainName,
        validation: acm.CertificateValidation.fromDns(hostedZone),
    });
}
function createRecord(scope, hostedZone, domainName) {
    // create DNS record
    const record = new route53.CnameRecord(scope, "CnameRecord", {
        recordName: domainName,
        zone: hostedZone,
        domainName: aws_cdk_lib_1.Lazy.string({
            produce() {
                return scope._cfnDomainName.attrAppSyncDomainName;
            },
        }),
    });
    // note: If domainName is a TOKEN string ie. ${TOKEN..}, the route53.ARecord
    //       construct will append ".${hostedZoneName}" to the end of the domain.
    //       This is because the construct tries to check if the record name
    //       ends with the domain name. If not, it will append the domain name.
    //       So, we need remove this behavior.
    if (aws_cdk_lib_1.Token.isUnresolved(domainName)) {
        const cfnRecord = record.node.defaultChild;
        cfnRecord.name = domainName;
    }
}
function assertDomainNameIsLowerCase(domainName) {
    if (domainName !== domainName.toLowerCase()) {
        throw new Error(`The domain name needs to be in lowercase`);
    }
}
//# sourceMappingURL=data:application/json;base64,