"use strict";
/* eslint-disable @typescript-eslint/ban-ts-comment*/
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.attachPermissionsToRole = void 0;
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const core_1 = require("@serverless-stack/core");
const index_1 = require("../index");
const Construct_1 = require("../Construct");
const logger = (0, core_1.getChildLogger)("resources");
function attachPermissionsToRole(role, permissions) {
    // Four patterns
    //
    // attachPermissions("*");
    // attachPermissions([ 'sns', 'sqs' ]);
    // attachPermissions([ event, queue ]);
    // attachPermissions([
    //   [ event.snsTopic, 'grantPublish' ],
    //   [ queue.sqsQueue, 'grantSendMessages' ],
    // ]);
    // attachPermissions([
    //   new iam.PolicyStatement({
    //     actions: ["s3:*"],
    //     effect: iam.Effect.ALLOW,
    //     resources: [
    //       bucket.bucketArn + "/private/${cognito-identity.amazonaws.com:sub}/*",
    //     ],
    //   })
    // ]);
    ////////////////////////////////////
    // Case: 'admin' permissions => '*'
    ////////////////////////////////////
    if (permissions === "*") {
        role.addToPolicy(buildPolicy(permissions, ["*"]));
        return;
    }
    if (!Array.isArray(permissions)) {
        throw new Error(`The specified permissions are not supported. They are expected to be "*" or an array.`);
    }
    // Handle array of permissions
    permissions.forEach((permission) => {
        ////////////////////////////////////
        // Case: string ie. 's3' or 's3:*'
        ////////////////////////////////////
        if (typeof permission === "string") {
            const perm = permission.indexOf(":") === -1 ? `${permission}:*` : permission;
            role.addToPolicy(buildPolicy(perm, ["*"]));
        }
        ////////////////////////////////////
        // Case: iam.PolicyStatement
        ////////////////////////////////////
        else if ((0, Construct_1.isCDKConstructOf)(permission, "aws-cdk-lib.aws_iam.PolicyStatement")) {
            role.addToPolicy(permission);
        }
        ////////////////////////////////////
        // Case: SST construct
        ////////////////////////////////////
        else if (permission instanceof index_1.Api) {
            const httpApi = permission.cdk.httpApi;
            const { account, region } = index_1.Stack.of(httpApi);
            role.addToPolicy(buildPolicy("execute-api:Invoke", [
                `arn:aws:execute-api:${region}:${account}:${httpApi.httpApiId}/*`,
            ]));
        }
        else if (permission instanceof index_1.ApiGatewayV1Api) {
            const restApi = permission.cdk.restApi;
            const { account, region } = index_1.Stack.of(restApi);
            role.addToPolicy(buildPolicy("execute-api:Invoke", [
                `arn:aws:execute-api:${region}:${account}:${restApi.restApiId}/*`,
            ]));
        }
        else if (permission instanceof index_1.WebSocketApi) {
            const webSocketApi = permission.cdk.webSocketApi;
            const { account, region } = index_1.Stack.of(webSocketApi);
            role.addToPolicy(buildPolicy("execute-api:Invoke", [
                `arn:aws:execute-api:${region}:${account}:${webSocketApi.apiId}/*`,
            ]));
            role.addToPolicy(buildPolicy("execute-api:ManageConnections", [
                permission._connectionsArn,
            ]));
        }
        else if (permission instanceof index_1.AppSyncApi) {
            const graphqlApi = permission.cdk.graphqlApi;
            const { account, region } = index_1.Stack.of(graphqlApi);
            role.addToPolicy(buildPolicy("appsync:GraphQL", [
                `arn:aws:appsync:${region}:${account}:apis/${graphqlApi.apiId}/*`,
            ]));
        }
        else if (permission instanceof index_1.Table) {
            const tableArn = permission.cdk.table.tableArn;
            role.addToPolicy(buildPolicy("dynamodb:*", [tableArn, `${tableArn}/*`]));
        }
        else if (permission instanceof index_1.Topic) {
            role.addToPolicy(buildPolicy("sns:*", [permission.cdk.topic.topicArn]));
        }
        else if (permission instanceof index_1.Queue) {
            role.addToPolicy(buildPolicy("sqs:*", [permission.cdk.queue.queueArn]));
        }
        else if (permission instanceof index_1.EventBus) {
            role.addToPolicy(buildPolicy("events:*", [permission.cdk.eventBus.eventBusArn]));
        }
        else if (permission instanceof index_1.KinesisStream) {
            role.addToPolicy(buildPolicy("kinesis:*", [permission.cdk.stream.streamArn]));
        }
        else if (permission instanceof index_1.Bucket) {
            const bucketArn = permission.cdk.bucket.bucketArn;
            role.addToPolicy(buildPolicy("s3:*", [bucketArn, `${bucketArn}/*`]));
        }
        else if (permission instanceof index_1.RDS) {
            role.addToPolicy(buildPolicy("rds-data:*", [permission.clusterArn]));
            if (permission.cdk.cluster.secret) {
                role.addToPolicy(buildPolicy(["secretsmanager:GetSecretValue", "secretsmanager:DescribeSecret"], [permission.cdk.cluster.secret.secretArn]));
            }
        }
        else if (permission instanceof index_1.Function) {
            role.addToPolicy(buildPolicy("lambda:*", [permission.functionArn]));
        }
        ////////////////////////////////////
        // Case: CDK constructs
        ////////////////////////////////////
        else if (permission.tableArn && permission.tableName) {
            // @ts-expect-error We do not want to import the cdk modules, just cast to any
            const tableArn = permission.tableArn;
            role.addToPolicy(buildPolicy("dynamodb:*", [tableArn, `${tableArn}/*`]));
        }
        else if (permission.topicArn && permission.topicName) {
            // @ts-expect-error We do not want to import the cdk modules, just cast to any
            role.addToPolicy(buildPolicy("sns:*", [permission.topicArn]));
        }
        else if (permission.queueArn && permission.queueName) {
            // @ts-expect-error We do not want to import the cdk modules, just cast to any
            role.addToPolicy(buildPolicy("sqs:*", [permission.queueArn]));
        }
        else if (permission.eventBusArn &&
            permission.eventBusName) {
            // @ts-expect-error We do not want to import the cdk modules, just cast to any
            role.addToPolicy(buildPolicy("events:*", [permission.eventBusArn]));
        }
        else if (permission.streamArn &&
            permission.streamName) {
            // @ts-expect-error We do not want to import the cdk modules, just cast to any
            role.addToPolicy(buildPolicy("kinesis:*", [permission.streamArn]));
        }
        else if (permission.deliveryStreamArn &&
            permission.deliveryStreamName) {
            role.addToPolicy(buildPolicy("firehose:*", [permission.deliveryStreamArn]));
        }
        else if (permission.bucketArn &&
            permission.bucketName) {
            // @ts-expect-error We do not want to import the cdk modules, just cast to any
            const bucketArn = permission.bucketArn;
            role.addToPolicy(buildPolicy("s3:*", [bucketArn, `${bucketArn}/*`]));
        }
        else if (permission.clusterArn) {
            // For ServerlessCluster, we need to grant:
            // - permisssions to access the Data API;
            // - permisssions to access the Secret Manager (required by Data API).
            // No need to grant the permissions for IAM database authentication
            role.addToPolicy(buildPolicy("rds-data:*", [permission.clusterArn]));
            const secret = permission.secret;
            if (secret) {
                role.addToPolicy(buildPolicy(["secretsmanager:GetSecretValue", "secretsmanager:DescribeSecret"], [secret.secretArn]));
            }
        }
        ////////////////////////////////////
        // Case: grant method
        ////////////////////////////////////
        else if (Array.isArray(permission) &&
            permission.length === 2 &&
            (0, Construct_1.isCDKConstruct)(permission[0]) &&
            typeof permission[1] === "string") {
            const construct = permission[0];
            const methodName = permission[1];
            if (typeof construct[methodName] !== "function")
                throw new Error(`The specified grant method is incorrect.
          Check the available methods that prefixed with grants on the Construct`);
            construct[methodName](role);
        }
        else {
            logger.debug("permission object", permission);
            throw new Error(`The specified permissions are not supported.`);
        }
    });
}
exports.attachPermissionsToRole = attachPermissionsToRole;
function buildPolicy(actions, resources) {
    return new iam.PolicyStatement({
        effect: iam.Effect.ALLOW,
        actions: typeof actions === "string" ? [actions] : actions,
        resources,
    });
}
//# sourceMappingURL=data:application/json;base64,