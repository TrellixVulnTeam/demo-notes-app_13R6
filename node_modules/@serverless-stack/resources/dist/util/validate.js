"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.assert = exports.Validate = void 0;
const zod_1 = require("zod");
exports.Validate = __importStar(require("./validate"));
function assert(schema, value) {
    try {
        schema.parse(value);
    }
    catch (ex) {
        if (ex instanceof zod_1.ZodError) {
            const message = ["Input props error"];
            const issues = ex.issues.flatMap((issue) => {
                if (issue.code === "invalid_union")
                    return issue.unionErrors.flatMap((x) => x.issues);
                return [issue];
            });
            for (const issue of issues) {
                message.push("-> " + issue.path.join(".") + ": " + issue.message);
            }
            throw new Error(message.join("\n"));
        }
        throw ex;
    }
}
exports.assert = assert;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbC92YWxpZGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDZCQUEwQztBQUMxQyx1REFBdUM7QUFFdkMsU0FBZ0IsTUFBTSxDQUFDLE1BQWdDLEVBQUUsS0FBVTtJQUNqRSxJQUFJO1FBQ0YsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztLQUNyQjtJQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ1gsSUFBSSxFQUFFLFlBQVksY0FBUSxFQUFFO1lBQzFCLE1BQU0sT0FBTyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztZQUN0QyxNQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO2dCQUN6QyxJQUFJLEtBQUssQ0FBQyxJQUFJLEtBQUssZUFBZTtvQkFDaEMsT0FBTyxLQUFLLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUNwRCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDakIsQ0FBQyxDQUFDLENBQUM7WUFFSCxLQUFLLE1BQU0sS0FBSyxJQUFJLE1BQU0sRUFBRTtnQkFDMUIsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUNuRTtZQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3JDO1FBQ0QsTUFBTSxFQUFFLENBQUM7S0FDVjtBQUNILENBQUM7QUFuQkQsd0JBbUJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgWm9kRXJyb3IsIFpvZFNjaGVtYSB9IGZyb20gXCJ6b2RcIjtcbmV4cG9ydCAqIGFzIFZhbGlkYXRlIGZyb20gXCIuL3ZhbGlkYXRlXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnQoc2NoZW1hOiBab2RTY2hlbWE8YW55LCBhbnksIGFueT4sIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgdHJ5IHtcbiAgICBzY2hlbWEucGFyc2UodmFsdWUpO1xuICB9IGNhdGNoIChleCkge1xuICAgIGlmIChleCBpbnN0YW5jZW9mIFpvZEVycm9yKSB7XG4gICAgICBjb25zdCBtZXNzYWdlID0gW1wiSW5wdXQgcHJvcHMgZXJyb3JcIl07XG4gICAgICBjb25zdCBpc3N1ZXMgPSBleC5pc3N1ZXMuZmxhdE1hcCgoaXNzdWUpID0+IHtcbiAgICAgICAgaWYgKGlzc3VlLmNvZGUgPT09IFwiaW52YWxpZF91bmlvblwiKVxuICAgICAgICAgIHJldHVybiBpc3N1ZS51bmlvbkVycm9ycy5mbGF0TWFwKCh4KSA9PiB4Lmlzc3Vlcyk7XG4gICAgICAgIHJldHVybiBbaXNzdWVdO1xuICAgICAgfSk7XG5cbiAgICAgIGZvciAoY29uc3QgaXNzdWUgb2YgaXNzdWVzKSB7XG4gICAgICAgIG1lc3NhZ2UucHVzaChcIi0+IFwiICsgaXNzdWUucGF0aC5qb2luKFwiLlwiKSArIFwiOiBcIiArIGlzc3VlLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2Uuam9pbihcIlxcblwiKSk7XG4gICAgfVxuICAgIHRocm93IGV4O1xuICB9XG59XG4iXX0=