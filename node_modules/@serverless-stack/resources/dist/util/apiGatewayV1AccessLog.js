"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cleanupLogGroupName = exports.buildAccessLogData = void 0;
const logs = __importStar(require("aws-cdk-lib/aws-logs"));
const apig = __importStar(require("aws-cdk-lib/aws-apigateway"));
function buildAccessLogData(scope, accessLog) {
    if (accessLog === false) {
        return;
    }
    // note: Access log configuration is not supported by L2 constructs as of CDK v1.85.0. We
    //       need to define it at L1 construct level.
    // create log group
    let logGroup;
    let destination;
    if (accessLog && accessLog.destinationArn) {
        // note: do not set "LogGroupLogDestination" as "logGroup" because we only
        //       want to set "logGroup" if it is newly created. If we decide to
        //       change this behavior at a later date, make sure we change it for
        //       both v1 and v2 API constructs.
        const destinationArn = accessLog
            .destinationArn;
        const destinationLogGroup = logs.LogGroup.fromLogGroupArn(scope, "LogGroup", destinationArn);
        destination = new apig.LogGroupLogDestination(destinationLogGroup);
    }
    else {
        const retention = (accessLog && accessLog.retention) || "INFINITE";
        const retentionValue = logs.RetentionDays[retention.toUpperCase()];
        // validate retention
        if (!retentionValue) {
            throw new Error(`Invalid access log retention value "${retention}".`);
        }
        logGroup = new logs.LogGroup(scope, "LogGroup", {
            retention: retentionValue,
        });
        destination = new apig.LogGroupLogDestination(logGroup);
    }
    // get log format
    let format;
    if (accessLog && accessLog.format) {
        format = accessLog.format;
    }
    else if (typeof accessLog === "string") {
        format = accessLog;
    }
    else {
        format =
            "{" +
                [
                    // request info
                    `"requestTime":"$context.requestTime"`,
                    `"requestId":"$context.requestId"`,
                    `"httpMethod":"$context.httpMethod"`,
                    `"path":"$context.path"`,
                    `"resourcePath":"$context.resourcePath"`,
                    `"status":$context.status`,
                    `"responseLatency":$context.responseLatency`,
                    `"xrayTraceId":"$context.xrayTraceId"`,
                    // integration info
                    `"integrationRequestId":"$context.integration.requestId"`,
                    `"functionResponseStatus":"$context.integration.status"`,
                    `"integrationLatency":"$context.integration.latency"`,
                    `"integrationServiceStatus":"$context.integration.integrationStatus"`,
                    // caller info
                    `"ip":"$context.identity.sourceIp"`,
                    `"userAgent":"$context.identity.userAgent"`,
                    `"principalId":"$context.authorizer.principalId"`,
                ].join(",") +
                "}";
    }
    const accessLogData = {
        logGroup,
        format: apig.AccessLogFormat.custom(format),
        destination,
    };
    return accessLogData;
}
exports.buildAccessLogData = buildAccessLogData;
function cleanupLogGroupName(str) {
    return str.replace(/[^.\-_/#A-Za-z0-9]/g, "");
}
exports.cleanupLogGroupName = cleanupLogGroupName;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpR2F0ZXdheVYxQWNjZXNzTG9nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWwvYXBpR2F0ZXdheVYxQWNjZXNzTG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EsMkRBQTZDO0FBQzdDLGlFQUFtRDtBQWNuRCxTQUFnQixrQkFBa0IsQ0FDaEMsS0FBZ0IsRUFDaEIsU0FBd0Q7SUFFeEQsSUFBSSxTQUFTLEtBQUssS0FBSyxFQUFFO1FBQ3ZCLE9BQU87S0FDUjtJQUVELHlGQUF5RjtJQUN6RixpREFBaUQ7SUFFakQsbUJBQW1CO0lBQ25CLElBQUksUUFBUSxDQUFDO0lBQ2IsSUFBSSxXQUFXLENBQUM7SUFDaEIsSUFBSSxTQUFTLElBQUssU0FBNEIsQ0FBQyxjQUFjLEVBQUU7UUFDN0QsMEVBQTBFO1FBQzFFLHVFQUF1RTtRQUN2RSx5RUFBeUU7UUFDekUsdUNBQXVDO1FBQ3ZDLE1BQU0sY0FBYyxHQUFJLFNBQTRCO2FBQ2pELGNBQXdCLENBQUM7UUFDNUIsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FDdkQsS0FBSyxFQUNMLFVBQVUsRUFDVixjQUFjLENBQ2YsQ0FBQztRQUNGLFdBQVcsR0FBRyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0tBQ3BFO1NBQU07UUFDTCxNQUFNLFNBQVMsR0FDYixDQUFDLFNBQVMsSUFBSyxTQUE0QixDQUFDLFNBQVMsQ0FBQyxJQUFJLFVBQVUsQ0FBQztRQUN2RSxNQUFNLGNBQWMsR0FDbEIsSUFBSSxDQUFDLGFBQWEsQ0FDaEIsU0FBUyxDQUFDLFdBQVcsRUFBcUMsQ0FDM0QsQ0FBQztRQUVKLHFCQUFxQjtRQUNyQixJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsdUNBQXVDLFNBQVMsSUFBSSxDQUFDLENBQUM7U0FDdkU7UUFFRCxRQUFRLEdBQUcsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxVQUFVLEVBQUU7WUFDOUMsU0FBUyxFQUFFLGNBQWM7U0FDMUIsQ0FBQyxDQUFDO1FBQ0gsV0FBVyxHQUFHLElBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxDQUFDO0tBQ3pEO0lBRUQsaUJBQWlCO0lBQ2pCLElBQUksTUFBYyxDQUFDO0lBQ25CLElBQUksU0FBUyxJQUFLLFNBQTRCLENBQUMsTUFBTSxFQUFFO1FBQ3JELE1BQU0sR0FBSSxTQUE0QixDQUFDLE1BQWdCLENBQUM7S0FDekQ7U0FBTSxJQUFJLE9BQU8sU0FBUyxLQUFLLFFBQVEsRUFBRTtRQUN4QyxNQUFNLEdBQUcsU0FBUyxDQUFDO0tBQ3BCO1NBQU07UUFDTCxNQUFNO1lBQ0osR0FBRztnQkFDSDtvQkFDRSxlQUFlO29CQUNmLHNDQUFzQztvQkFDdEMsa0NBQWtDO29CQUNsQyxvQ0FBb0M7b0JBQ3BDLHdCQUF3QjtvQkFDeEIsd0NBQXdDO29CQUN4QywwQkFBMEI7b0JBQzFCLDRDQUE0QztvQkFDNUMsc0NBQXNDO29CQUN0QyxtQkFBbUI7b0JBQ25CLHlEQUF5RDtvQkFDekQsd0RBQXdEO29CQUN4RCxxREFBcUQ7b0JBQ3JELHFFQUFxRTtvQkFDckUsY0FBYztvQkFDZCxtQ0FBbUM7b0JBQ25DLDJDQUEyQztvQkFDM0MsaURBQWlEO2lCQUNsRCxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7Z0JBQ1gsR0FBRyxDQUFDO0tBQ1A7SUFFRCxNQUFNLGFBQWEsR0FBRztRQUNwQixRQUFRO1FBQ1IsTUFBTSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztRQUMzQyxXQUFXO0tBQ1osQ0FBQztJQUVGLE9BQU8sYUFBYSxDQUFDO0FBQ3ZCLENBQUM7QUFyRkQsZ0RBcUZDO0FBRUQsU0FBZ0IsbUJBQW1CLENBQUMsR0FBVztJQUM3QyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMscUJBQXFCLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDaEQsQ0FBQztBQUZELGtEQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCAqIGFzIGxvZ3MgZnJvbSBcImF3cy1jZGstbGliL2F3cy1sb2dzXCI7XG5pbXBvcnQgKiBhcyBhcGlnIGZyb20gXCJhd3MtY2RrLWxpYi9hd3MtYXBpZ2F0ZXdheVwiO1xuXG5leHBvcnQgaW50ZXJmYWNlIEFjY2Vzc0xvZ1Byb3BzIHtcbiAgZm9ybWF0Pzogc3RyaW5nO1xuICBkZXN0aW5hdGlvbkFybj86IHN0cmluZztcbiAgcmV0ZW50aW9uPzogTG93ZXJjYXNlPGtleW9mIHR5cGVvZiBsb2dzLlJldGVudGlvbkRheXM+O1xufVxuXG5leHBvcnQgdHlwZSBBY2Nlc3NMb2dEYXRhID0ge1xuICBsb2dHcm91cDogbG9ncy5Mb2dHcm91cCB8IHVuZGVmaW5lZDtcbiAgZm9ybWF0OiBhcGlnLkFjY2Vzc0xvZ0Zvcm1hdDtcbiAgZGVzdGluYXRpb246IGFwaWcuTG9nR3JvdXBMb2dEZXN0aW5hdGlvbjtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZEFjY2Vzc0xvZ0RhdGEoXG4gIHNjb3BlOiBDb25zdHJ1Y3QsXG4gIGFjY2Vzc0xvZzogYm9vbGVhbiB8IHN0cmluZyB8IEFjY2Vzc0xvZ1Byb3BzIHwgdW5kZWZpbmVkXG4pOiBBY2Nlc3NMb2dEYXRhIHwgdW5kZWZpbmVkIHtcbiAgaWYgKGFjY2Vzc0xvZyA9PT0gZmFsc2UpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBub3RlOiBBY2Nlc3MgbG9nIGNvbmZpZ3VyYXRpb24gaXMgbm90IHN1cHBvcnRlZCBieSBMMiBjb25zdHJ1Y3RzIGFzIG9mIENESyB2MS44NS4wLiBXZVxuICAvLyAgICAgICBuZWVkIHRvIGRlZmluZSBpdCBhdCBMMSBjb25zdHJ1Y3QgbGV2ZWwuXG5cbiAgLy8gY3JlYXRlIGxvZyBncm91cFxuICBsZXQgbG9nR3JvdXA7XG4gIGxldCBkZXN0aW5hdGlvbjtcbiAgaWYgKGFjY2Vzc0xvZyAmJiAoYWNjZXNzTG9nIGFzIEFjY2Vzc0xvZ1Byb3BzKS5kZXN0aW5hdGlvbkFybikge1xuICAgIC8vIG5vdGU6IGRvIG5vdCBzZXQgXCJMb2dHcm91cExvZ0Rlc3RpbmF0aW9uXCIgYXMgXCJsb2dHcm91cFwiIGJlY2F1c2Ugd2Ugb25seVxuICAgIC8vICAgICAgIHdhbnQgdG8gc2V0IFwibG9nR3JvdXBcIiBpZiBpdCBpcyBuZXdseSBjcmVhdGVkLiBJZiB3ZSBkZWNpZGUgdG9cbiAgICAvLyAgICAgICBjaGFuZ2UgdGhpcyBiZWhhdmlvciBhdCBhIGxhdGVyIGRhdGUsIG1ha2Ugc3VyZSB3ZSBjaGFuZ2UgaXQgZm9yXG4gICAgLy8gICAgICAgYm90aCB2MSBhbmQgdjIgQVBJIGNvbnN0cnVjdHMuXG4gICAgY29uc3QgZGVzdGluYXRpb25Bcm4gPSAoYWNjZXNzTG9nIGFzIEFjY2Vzc0xvZ1Byb3BzKVxuICAgICAgLmRlc3RpbmF0aW9uQXJuIGFzIHN0cmluZztcbiAgICBjb25zdCBkZXN0aW5hdGlvbkxvZ0dyb3VwID0gbG9ncy5Mb2dHcm91cC5mcm9tTG9nR3JvdXBBcm4oXG4gICAgICBzY29wZSxcbiAgICAgIFwiTG9nR3JvdXBcIixcbiAgICAgIGRlc3RpbmF0aW9uQXJuXG4gICAgKTtcbiAgICBkZXN0aW5hdGlvbiA9IG5ldyBhcGlnLkxvZ0dyb3VwTG9nRGVzdGluYXRpb24oZGVzdGluYXRpb25Mb2dHcm91cCk7XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgcmV0ZW50aW9uID1cbiAgICAgIChhY2Nlc3NMb2cgJiYgKGFjY2Vzc0xvZyBhcyBBY2Nlc3NMb2dQcm9wcykucmV0ZW50aW9uKSB8fCBcIklORklOSVRFXCI7XG4gICAgY29uc3QgcmV0ZW50aW9uVmFsdWUgPVxuICAgICAgbG9ncy5SZXRlbnRpb25EYXlzW1xuICAgICAgICByZXRlbnRpb24udG9VcHBlckNhc2UoKSBhcyBrZXlvZiB0eXBlb2YgbG9ncy5SZXRlbnRpb25EYXlzXG4gICAgICBdO1xuXG4gICAgLy8gdmFsaWRhdGUgcmV0ZW50aW9uXG4gICAgaWYgKCFyZXRlbnRpb25WYWx1ZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIGFjY2VzcyBsb2cgcmV0ZW50aW9uIHZhbHVlIFwiJHtyZXRlbnRpb259XCIuYCk7XG4gICAgfVxuXG4gICAgbG9nR3JvdXAgPSBuZXcgbG9ncy5Mb2dHcm91cChzY29wZSwgXCJMb2dHcm91cFwiLCB7XG4gICAgICByZXRlbnRpb246IHJldGVudGlvblZhbHVlLFxuICAgIH0pO1xuICAgIGRlc3RpbmF0aW9uID0gbmV3IGFwaWcuTG9nR3JvdXBMb2dEZXN0aW5hdGlvbihsb2dHcm91cCk7XG4gIH1cblxuICAvLyBnZXQgbG9nIGZvcm1hdFxuICBsZXQgZm9ybWF0OiBzdHJpbmc7XG4gIGlmIChhY2Nlc3NMb2cgJiYgKGFjY2Vzc0xvZyBhcyBBY2Nlc3NMb2dQcm9wcykuZm9ybWF0KSB7XG4gICAgZm9ybWF0ID0gKGFjY2Vzc0xvZyBhcyBBY2Nlc3NMb2dQcm9wcykuZm9ybWF0IGFzIHN0cmluZztcbiAgfSBlbHNlIGlmICh0eXBlb2YgYWNjZXNzTG9nID09PSBcInN0cmluZ1wiKSB7XG4gICAgZm9ybWF0ID0gYWNjZXNzTG9nO1xuICB9IGVsc2Uge1xuICAgIGZvcm1hdCA9XG4gICAgICBcIntcIiArXG4gICAgICBbXG4gICAgICAgIC8vIHJlcXVlc3QgaW5mb1xuICAgICAgICBgXCJyZXF1ZXN0VGltZVwiOlwiJGNvbnRleHQucmVxdWVzdFRpbWVcImAsXG4gICAgICAgIGBcInJlcXVlc3RJZFwiOlwiJGNvbnRleHQucmVxdWVzdElkXCJgLFxuICAgICAgICBgXCJodHRwTWV0aG9kXCI6XCIkY29udGV4dC5odHRwTWV0aG9kXCJgLFxuICAgICAgICBgXCJwYXRoXCI6XCIkY29udGV4dC5wYXRoXCJgLFxuICAgICAgICBgXCJyZXNvdXJjZVBhdGhcIjpcIiRjb250ZXh0LnJlc291cmNlUGF0aFwiYCxcbiAgICAgICAgYFwic3RhdHVzXCI6JGNvbnRleHQuc3RhdHVzYCwgLy8gaW50ZWdlciB2YWx1ZSwgZG8gbm90IHdyYXAgaW4gcXVvdGVzXG4gICAgICAgIGBcInJlc3BvbnNlTGF0ZW5jeVwiOiRjb250ZXh0LnJlc3BvbnNlTGF0ZW5jeWAsIC8vIGludGVnZXIgdmFsdWUsIGRvIG5vdCB3cmFwIGluIHF1b3Rlc1xuICAgICAgICBgXCJ4cmF5VHJhY2VJZFwiOlwiJGNvbnRleHQueHJheVRyYWNlSWRcImAsXG4gICAgICAgIC8vIGludGVncmF0aW9uIGluZm9cbiAgICAgICAgYFwiaW50ZWdyYXRpb25SZXF1ZXN0SWRcIjpcIiRjb250ZXh0LmludGVncmF0aW9uLnJlcXVlc3RJZFwiYCxcbiAgICAgICAgYFwiZnVuY3Rpb25SZXNwb25zZVN0YXR1c1wiOlwiJGNvbnRleHQuaW50ZWdyYXRpb24uc3RhdHVzXCJgLFxuICAgICAgICBgXCJpbnRlZ3JhdGlvbkxhdGVuY3lcIjpcIiRjb250ZXh0LmludGVncmF0aW9uLmxhdGVuY3lcImAsXG4gICAgICAgIGBcImludGVncmF0aW9uU2VydmljZVN0YXR1c1wiOlwiJGNvbnRleHQuaW50ZWdyYXRpb24uaW50ZWdyYXRpb25TdGF0dXNcImAsXG4gICAgICAgIC8vIGNhbGxlciBpbmZvXG4gICAgICAgIGBcImlwXCI6XCIkY29udGV4dC5pZGVudGl0eS5zb3VyY2VJcFwiYCxcbiAgICAgICAgYFwidXNlckFnZW50XCI6XCIkY29udGV4dC5pZGVudGl0eS51c2VyQWdlbnRcImAsXG4gICAgICAgIGBcInByaW5jaXBhbElkXCI6XCIkY29udGV4dC5hdXRob3JpemVyLnByaW5jaXBhbElkXCJgLFxuICAgICAgXS5qb2luKFwiLFwiKSArXG4gICAgICBcIn1cIjtcbiAgfVxuXG4gIGNvbnN0IGFjY2Vzc0xvZ0RhdGEgPSB7XG4gICAgbG9nR3JvdXAsXG4gICAgZm9ybWF0OiBhcGlnLkFjY2Vzc0xvZ0Zvcm1hdC5jdXN0b20oZm9ybWF0KSxcbiAgICBkZXN0aW5hdGlvbixcbiAgfTtcblxuICByZXR1cm4gYWNjZXNzTG9nRGF0YTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFudXBMb2dHcm91cE5hbWUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1teLlxcLV8vI0EtWmEtejAtOV0vZywgXCJcIik7XG59XG4iXX0=