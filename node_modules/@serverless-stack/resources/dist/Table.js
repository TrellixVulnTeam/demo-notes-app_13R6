"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Table = void 0;
const constructs_1 = require("constructs");
const dynamodb = __importStar(require("aws-cdk-lib/aws-dynamodb"));
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
const lambdaEventSources = __importStar(require("aws-cdk-lib/aws-lambda-event-sources"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
/////////////////////
// Construct
/////////////////////
/**
 * The `Table` construct is a higher level CDK construct that makes it easy to create a [DynamoDB](https://aws.amazon.com/dynamodb/) table. It uses the following defaults:
 *
 * - Defaults to using the [On-Demand capacity](https://aws.amazon.com/dynamodb/pricing/on-demand/) to make it perfectly serverless.
 * - Enables [Point-in-Time Recovery](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/PointInTimeRecovery.html) to make sure that you don't lose your data.
 * - Provides a nicer interface for defining indexes.
 */
class Table extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props;
        const { fields, globalIndexes, localIndexes, kinesisStream } = this.props;
        this.cdk = {};
        this.functions = {};
        this.fields = fields;
        this.permissionsAttachedForAllConsumers = [];
        // Input Validation
        this.validateFieldsAndIndexes(id, props);
        // Create Table
        this.createTable();
        // Create Secondary Indexes
        if (globalIndexes)
            this.addGlobalIndexes(globalIndexes);
        if (localIndexes)
            this.addLocalIndexes(localIndexes);
        // Create Consumers
        if (props.consumers) {
            for (const consumerName in props.consumers) {
                this.addConsumer(this, consumerName, props.consumers[consumerName]);
            }
        }
        // Create Kinesis Stream
        this.buildKinesisStreamSpec(kinesisStream);
    }
    /**
     * The ARN of the internally created DynamoDB Table.
     */
    get tableArn() {
        return this.cdk.table.tableArn;
    }
    /**
     * The name of the internally created DynamoDB Table.
     */
    get tableName() {
        return this.cdk.table.tableName;
    }
    /**
     * Add additional global secondary indexes where the `key` is the name of the global secondary index
     *
     * @example
     * ```js
     * table.addGlobalIndexes({
     *   gsi1: {
     *     partitionKey: "pk",
     *     sortKey: "sk",
     *   }
     * })
     * ```
     */
    addGlobalIndexes(secondaryIndexes) {
        var _a, _b, _c;
        if (!this.fields)
            throw new Error(`Cannot add secondary indexes to "${this.node.id}" Table without defining "fields"`);
        for (const [indexName, { partitionKey, sortKey, projection, cdk },] of Object.entries(secondaryIndexes)) {
            // Validate index does not contain "indexName", "partitionKey" and "sortKey"
            if ((_a = cdk === null || cdk === void 0 ? void 0 : cdk.index) === null || _a === void 0 ? void 0 : _a.indexName) {
                throw new Error(`Cannot configure the "cdk.index.indexName" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            if ((_b = cdk === null || cdk === void 0 ? void 0 : cdk.index) === null || _b === void 0 ? void 0 : _b.partitionKey) {
                throw new Error(`Cannot configure the "cdk.index.partitionKey" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            if ((_c = cdk === null || cdk === void 0 ? void 0 : cdk.index) === null || _c === void 0 ? void 0 : _c.sortKey) {
                throw new Error(`Cannot configure the "cdk.index.sortKey" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            this.cdk.table.addGlobalSecondaryIndex(Object.assign(Object.assign({ indexName, partitionKey: this.buildAttribute(this.fields, partitionKey), sortKey: sortKey
                    ? this.buildAttribute(this.fields, sortKey)
                    : undefined }, (() => {
                if (!projection) {
                    return undefined;
                }
                else if (Array.isArray(projection)) {
                    return {
                        projectionType: dynamodb.ProjectionType.INCLUDE,
                        nonKeyAttributes: projection,
                    };
                }
                return {
                    projectionType: dynamodb.ProjectionType[projection.toUpperCase()],
                };
            })()), cdk === null || cdk === void 0 ? void 0 : cdk.index));
        }
    }
    /**
     * Add additional local secondary indexes where the `key` is the name of the local secondary index
     *
     * @example
     * ```js
     * table.addLocalIndexes({
     *   lsi1: {
     *     sortKey: "sk",
     *   }
     * })
     * ```
     */
    addLocalIndexes(secondaryIndexes) {
        var _a, _b;
        if (!this.fields)
            throw new Error(`Cannot add local secondary indexes to "${this.node.id}" Table without defining "fields"`);
        for (const [indexName, { sortKey, projection, cdk }] of Object.entries(secondaryIndexes)) {
            // Validate index does not contain "indexName", "partitionKey" and "sortKey"
            if ((_a = cdk === null || cdk === void 0 ? void 0 : cdk.index) === null || _a === void 0 ? void 0 : _a.indexName) {
                throw new Error(`Cannot configure the "cdk.index.indexName" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            if ((_b = cdk === null || cdk === void 0 ? void 0 : cdk.index) === null || _b === void 0 ? void 0 : _b.sortKey) {
                throw new Error(`Cannot configure the "cdk.index.sortKey" in the "${indexName}" index of the "${this.node.id}" Table`);
            }
            this.cdk.table.addLocalSecondaryIndex(Object.assign(Object.assign({ indexName, sortKey: this.buildAttribute(this.fields, sortKey) }, (() => {
                if (!projection) {
                    return undefined;
                }
                else if (Array.isArray(projection)) {
                    return {
                        projectionType: dynamodb.ProjectionType.INCLUDE,
                        nonKeyAttributes: projection,
                    };
                }
                return {
                    projectionType: dynamodb.ProjectionType[projection.toUpperCase()],
                };
            })()), cdk === null || cdk === void 0 ? void 0 : cdk.index));
        }
    }
    /**
     * Define additional consumers for table events
     *
     * @example
     * ```js
     * table.addConsumers(stack, {
     *   consumer1: "src/consumer1.main",
     *   consumer2: "src/consumer2.main",
     * });
     * ```
     */
    addConsumers(scope, consumers) {
        Object.keys(consumers).forEach((consumerName) => {
            this.addConsumer(scope, consumerName, consumers[consumerName]);
        });
    }
    /**
     * Grant permissions to all consumers of this table.
     *
     * @example
     * ```js
     * table.attachPermissions(["s3"]);
     * ```
     */
    attachPermissions(permissions) {
        Object.values(this.functions).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllConsumers.push(permissions);
    }
    /**
     * Grant permissions to a specific consumer of this table.
     *
     * @example
     * ```js
     * table.attachPermissionsToConsumer("consumer1", ["s3"]);
     * ```
     */
    attachPermissionsToConsumer(consumerName, permissions) {
        if (!this.functions[consumerName]) {
            throw new Error(`The "${consumerName}" consumer was not found in the "${this.node.id}" Table.`);
        }
        this.functions[consumerName].attachPermissions(permissions);
    }
    /**
     * Get the instance of the internally created Function, for a given consumer.
     *
     * ```js
     *  const table = new Table(stack, "Table", {
     *    consumers: {
     *      consumer1: "./src/function.handler",
     *    }
     *  })
     * table.getFunction("consumer1");
     * ```
     */
    getFunction(consumerName) {
        return this.functions[consumerName];
    }
    getConstructMetadata() {
        return {
            type: "Table",
            data: {
                tableName: this.cdk.table.tableName,
                consumers: Object.entries(this.functions).map(([name, fun]) => ({
                    name,
                    fn: (0, Construct_1.getFunctionRef)(fun),
                })),
            },
        };
    }
    createTable() {
        const { fields, primaryIndex, stream, cdk } = this.props;
        const app = this.node.root;
        const id = this.node.id;
        if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.table)) {
            // Validate "fields" is not configured
            if (fields !== undefined) {
                throw new Error(`Cannot configure the "fields" when "cdk.table" is a construct in the "${id}" Table`);
            }
            // Validate "stream" is not configured
            if (stream !== undefined) {
                throw new Error(`Cannot configure the "stream" when "cdk.table" is a construct in the "${id}" Table`);
            }
            this.dynamodbTableType = "IMPORTED";
            this.cdk.table = cdk === null || cdk === void 0 ? void 0 : cdk.table;
        }
        else {
            let dynamodbTableProps = ((cdk === null || cdk === void 0 ? void 0 : cdk.table) || {});
            // Validate "fields" is configured
            if (fields === undefined) {
                throw new Error(`Missing "fields" in the "${id}" Table`);
            }
            // Validate dynamodbTableProps does not contain "partitionKey", "sortKey" and "stream"
            if (dynamodbTableProps.partitionKey) {
                throw new Error(`Cannot configure the "cdk.table.partitionKey" in the "${id}" Table`);
            }
            if (dynamodbTableProps.sortKey) {
                throw new Error(`Cannot configure the "cdk.table.sortKey" in the "${id}" Table`);
            }
            if (dynamodbTableProps.stream) {
                throw new Error(`Cannot configure the "cdk.table.stream" in the "${id}" Table`);
            }
            if (fields && primaryIndex) {
                dynamodbTableProps = Object.assign(Object.assign({}, dynamodbTableProps), { partitionKey: this.buildAttribute(fields, primaryIndex.partitionKey), sortKey: primaryIndex.sortKey
                        ? this.buildAttribute(fields, primaryIndex.sortKey)
                        : undefined });
            }
            this.dynamodbTableType = "CREATED";
            this.cdk.table = new dynamodb.Table(this, "Table", Object.assign({ tableName: app.logicalPrefixedName(id), pointInTimeRecovery: true, billingMode: dynamodb.BillingMode.PAY_PER_REQUEST, stream: this.buildStreamConfig(stream) }, dynamodbTableProps));
        }
    }
    addConsumer(scope, consumerName, consumer) {
        var _a, _b;
        // validate stream enabled
        // note: if table is imported, do not check because we want to allow ppl to
        //       import without specifying the "tableStreamArn". And let them add
        //       consumers to it.
        if (!this.cdk.table.tableStreamArn) {
            const errorMsgs = [
                `Please enable the "stream" option to add consumers to the "${this.node.id}" Table.`,
            ];
            if (this.dynamodbTableType === "IMPORTED") {
                errorMsgs.push(`To import a table with stream enabled, use the "Table.fromTableAttributes()" method, and set the "tableStreamArn" in the attributes.`);
            }
            throw new Error(errorMsgs.join(" "));
        }
        // parse consumer
        let consumerFunction, eventSourceProps;
        if (consumer.function) {
            consumer = consumer;
            consumerFunction = consumer.function;
            eventSourceProps = (_a = consumer.cdk) === null || _a === void 0 ? void 0 : _a.eventSource;
        }
        else {
            consumerFunction = consumer;
        }
        eventSourceProps = Object.assign({ startingPosition: lambda.StartingPosition.LATEST }, (eventSourceProps || {}));
        // create function
        const fn = Function_1.Function.fromDefinition(scope, `Consumer_${this.node.id}_${consumerName}`, consumerFunction, (_b = this.props.defaults) === null || _b === void 0 ? void 0 : _b.function, `The "defaults.function" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the consumers using FunctionProps, so the Table construct can apply the "defaults.function" to them.`);
        this.functions[consumerName] = fn;
        // create event source
        const eventSource = new lambdaEventSources.DynamoEventSource(this.cdk.table, eventSourceProps);
        fn.addEventSource(eventSource);
        // attach permissions
        this.permissionsAttachedForAllConsumers.forEach((permissions) => {
            fn.attachPermissions(permissions);
        });
        return fn;
    }
    buildAttribute(fields, name) {
        // Ensure the key is specified in "fields"
        if (!fields[name]) {
            throw new Error(`Please define "${name}" in "fields" to create the index in the "${this.node.id}" Table.`);
        }
        return {
            name,
            type: dynamodb.AttributeType[fields[name].toUpperCase()],
        };
    }
    buildStreamConfig(stream) {
        if (stream === true) {
            return dynamodb.StreamViewType.NEW_AND_OLD_IMAGES;
        }
        else if (stream === false || stream === undefined) {
            return undefined;
        }
        return dynamodb.StreamViewType[stream.toUpperCase()];
    }
    buildKinesisStreamSpec(kinesisStream) {
        if (!kinesisStream) {
            return;
        }
        const cfTable = this.cdk.table.node.defaultChild;
        cfTable.addPropertyOverride("KinesisStreamSpecification.StreamArn", kinesisStream.streamArn);
    }
    validateFieldsAndIndexes(id, props) {
        const { fields, primaryIndex } = props;
        // Validate "fields"
        if (fields && Object.keys(fields).length === 0) {
            throw new Error(`No fields defined for the "${id}" Table`);
        }
        // Validate "primaryIndex"
        if (primaryIndex && !primaryIndex.partitionKey) {
            throw new Error(`Missing "partitionKey" in primary index for the "${id}" Table`);
        }
        // Validate "fields" and "primaryIndex" co-exists
        if (fields) {
            if (!primaryIndex) {
                throw new Error(`Missing "primaryIndex" in "${id}" Table`);
            }
        }
        else {
            if (primaryIndex) {
                throw new Error(`Cannot configure the "primaryIndex" without setting the "fields" in "${id}" Table`);
            }
        }
    }
}
exports.Table = Table;
//# sourceMappingURL=data:application/json;base64,