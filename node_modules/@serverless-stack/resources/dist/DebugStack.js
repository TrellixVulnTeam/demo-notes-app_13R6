"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DebugStack = void 0;
const path = __importStar(require("path"));
const cdk = __importStar(require("aws-cdk-lib"));
const s3 = __importStar(require("aws-cdk-lib/aws-s3"));
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const logs = __importStar(require("aws-cdk-lib/aws-logs"));
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
const apig = __importStar(require("aws-cdk-lib/aws-apigatewayv2"));
const dynamodb = __importStar(require("aws-cdk-lib/aws-dynamodb"));
/**
 * The `DebugStack` construct is used internally to create the resources needed to power [Live Lambda Development](../live-lambda-development). Note that, the `DebugStack` construct should only be created inside the [`DebugApp`](DebugApp).
 *
 * It extends [`cdk.Stack`](https://docs.aws.amazon.com/cdk/api/v2/docs/aws-cdk-lib.Stack.html). It automatically prefixes the stack names with the stage and app name to ensure that they can be deployed to multiple regions in the same AWS account. It also ensures that the stack uses the same AWS profile and region as the app.
 *
 * @example
 */
class DebugStack extends cdk.Stack {
    constructor(scope, id, props) {
        const app = scope.node.root;
        const stackId = app.logicalPrefixedName(id);
        DebugStack.checkForEnvInProps(id, props);
        super(scope, stackId, Object.assign(Object.assign({}, props), { env: {
                account: app.account,
                region: app.region,
            } }));
        this.stage = app.stage;
        // Create connection table
        this.table = new dynamodb.Table(this, "Table", {
            partitionKey: { name: "pk", type: dynamodb.AttributeType.STRING },
            billingMode: dynamodb.BillingMode.PAY_PER_REQUEST,
            removalPolicy: cdk.RemovalPolicy.DESTROY,
        });
        // Create S3 bucket for storing large payloads
        this.bucket = (props === null || props === void 0 ? void 0 : props.payloadBucketArn)
            ? s3.Bucket.fromBucketArn(this, "Bucket", props.payloadBucketArn)
            : new s3.Bucket(this, "Bucket", {
                lifecycleRules: [
                    {
                        expiration: cdk.Duration.days(1),
                        prefix: "payloads/",
                    },
                ],
                encryption: s3.BucketEncryption.S3_MANAGED,
                removalPolicy: cdk.RemovalPolicy.DESTROY,
                autoDeleteObjects: true,
                blockPublicAccess: s3.BlockPublicAccess.BLOCK_ALL,
            });
        // Create API
        this.api = new apig.CfnApi(this, "Api", {
            name: `${this.stackName}-api`,
            protocolType: "WEBSOCKET",
            routeSelectionExpression: "$request.body.action",
        });
        new apig.CfnStage(this, "ApiStage", {
            apiId: this.api.ref,
            autoDeploy: true,
            stageName: this.stage,
        });
        // Create API routes
        const role = (props === null || props === void 0 ? void 0 : props.websocketHandlerRoleArn)
            ? iam.Role.fromRoleArn(this, "HandlerRole", props.websocketHandlerRoleArn)
            : undefined;
        this.addApiRoute("Connect", "$connect", "wsConnect.main", role);
        this.addApiRoute("Disconnect", "$disconnect", "wsDisconnect.main", role);
        this.addApiRoute("Default", "$default", "wsDefault.main", role);
        // Stack Output
        new cdk.CfnOutput(this, "Endpoint", {
            value: `${this.api.attrApiEndpoint}/${this.stage}`,
        });
        new cdk.CfnOutput(this, "BucketArn", {
            value: this.bucket.bucketArn,
        });
        new cdk.CfnOutput(this, "BucketName", {
            value: this.bucket.bucketName,
        });
    }
    addApiRoute(id, routeKey, handler, role) {
        // Create execution policy
        const policyStatement = new iam.PolicyStatement();
        policyStatement.addAllResources();
        policyStatement.addActions("apigateway:*", "dynamodb:*", "execute-api:ManageConnections");
        // Create Lambda
        const lambdaFunc = new lambda.Function(this, id, {
            code: lambda.Code.fromAsset(path.join(__dirname, "../assets/DebugStack")),
            handler,
            runtime: lambda.Runtime.NODEJS_12_X,
            timeout: cdk.Duration.seconds(10),
            memorySize: 256,
            logRetention: logs.RetentionDays.ONE_WEEK,
            logRetentionRole: role,
            environment: {
                TABLE_NAME: this.table.tableName,
            },
            role,
            initialPolicy: [policyStatement],
        });
        lambdaFunc.addPermission(`${id}Permission`, {
            principal: new iam.ServicePrincipal("apigateway.amazonaws.com"),
        });
        // Create API integrations
        const integration = new apig.CfnIntegration(this, `${id}Integration`, {
            apiId: this.api.ref,
            integrationType: "AWS_PROXY",
            integrationUri: `arn:${this.partition}:apigateway:${this.region}:lambda:path/2015-03-31/functions/${lambdaFunc.functionArn}/invocations`,
        });
        // Create API routes
        new apig.CfnRoute(this, `${id}Route`, {
            apiId: this.api.ref,
            routeKey,
            authorizationType: "NONE",
            target: `integrations/${integration.ref}`,
        });
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    static checkForEnvInProps(id, props) {
        if (props && props.env) {
            let envS = "";
            try {
                envS = " (" + JSON.stringify(props.env) + ")";
            }
            catch (e) {
                // Ignore
            }
            throw new Error(`Do not set the "env" prop while initializing "${id}" stack${envS}. Use the "AWS_PROFILE" environment variable and "--region" CLI option instead.`);
        }
    }
}
exports.DebugStack = DebugStack;
//# sourceMappingURL=data:application/json;base64,