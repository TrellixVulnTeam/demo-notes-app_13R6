"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const constructs_1 = require("constructs");
const sqs = __importStar(require("aws-cdk-lib/aws-sqs"));
const lambdaEventSources = __importStar(require("aws-cdk-lib/aws-lambda-event-sources"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const duration_1 = require("./util/duration");
/////////////////////
// Construct
/////////////////////
/**
 * The `Queue` construct is a higher level CDK construct that makes it easy to create a [SQS Queues](https://aws.amazon.com/sqs/). You can create a queue by specifying a consumer function. And then publish to the queue from any part of your serverless app.
 *
 * This construct makes it easier to define a queue and a consumer. It also internally connects the consumer and queue together.
 *
 * @example
 * ### Using the minimal config
 *
 * ```js
 * import { Queue } from "@serverless-stack/resources";
 *
 * new Queue(stack, "Queue", {
 *   consumer: "src/queueConsumer.main",
 * });
 * ```
 */
class Queue extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props || {};
        this.cdk = {};
        this.permissionsAttachedForAllConsumers = [];
        this.createQueue();
        if (props === null || props === void 0 ? void 0 : props.consumer) {
            this.addConsumer(this, props.consumer);
        }
    }
    /**
     * The ARN of the SQS Queue
     */
    get queueArn() {
        return this.cdk.queue.queueArn;
    }
    /**
     * The name of the SQS Queue
     */
    get queueName() {
        return this.cdk.queue.queueName;
    }
    /**
     * Adds a consumer after creating the queue. Note only one consumer can be added to a queue
     *
     * @example
     * ```js {3}
     * const queue = new Queue(stack, "Queue");
     * queue.addConsumer(props.stack, "src/function.handler");
     * ```
     */
    addConsumer(scope, consumer) {
        var _a;
        if (this.consumerFunction) {
            throw new Error("Cannot configure more than 1 consumer for a Queue");
        }
        // Parse consumer props
        let eventSourceProps;
        let functionDefinition;
        if (consumer.function) {
            consumer = consumer;
            eventSourceProps = (_a = consumer.cdk) === null || _a === void 0 ? void 0 : _a.eventSource;
            functionDefinition = consumer.function;
        }
        else {
            consumer = consumer;
            functionDefinition = consumer;
        }
        // Create function
        this.consumerFunction = Function_1.Function.fromDefinition(scope, `Consumer_${this.node.id}`, functionDefinition);
        this.consumerFunction.addEventSource(new lambdaEventSources.SqsEventSource(this.cdk.queue, eventSourceProps));
        // Attach permissions
        this.permissionsAttachedForAllConsumers.forEach((permissions) => {
            if (this.consumerFunction) {
                this.consumerFunction.attachPermissions(permissions);
            }
        });
    }
    /**
     * Attaches additional permissions to the consumer function
     *
     * @example
     * ```js
     * const queue = new Queue(stack, "Queue", {
     *   consumer: "src/function.handler",
     * });
     * queue.attachPermissions(["s3"]);
     * ```
     */
    attachPermissions(permissions) {
        if (this.consumerFunction) {
            this.consumerFunction.attachPermissions(permissions);
        }
        this.permissionsAttachedForAllConsumers.push(permissions);
    }
    getConstructMetadata() {
        return {
            type: "Queue",
            data: {
                name: this.cdk.queue.queueName,
                url: this.cdk.queue.queueUrl,
                consumer: (0, Construct_1.getFunctionRef)(this.consumerFunction),
            },
        };
    }
    createQueue() {
        const { cdk } = this.props;
        const root = this.node.root;
        const id = this.node.id;
        if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.queue)) {
            this.cdk.queue = cdk === null || cdk === void 0 ? void 0 : cdk.queue;
        }
        else {
            const sqsQueueProps = (cdk === null || cdk === void 0 ? void 0 : cdk.queue) || {};
            // If debugIncreaseTimeout is enabled (ie. sst start):
            // - Set visibilityTimeout to > 900s. This is because Lambda timeout is
            //   set to 900s, and visibilityTimeout has to be greater or equal to it.
            //   This will give people more time to debug the function without timing
            //   out the request.
            let debugOverrideProps;
            if (root.debugIncreaseTimeout) {
                if (!sqsQueueProps.visibilityTimeout ||
                    sqsQueueProps.visibilityTimeout.toSeconds() < 900) {
                    // TODO
                    console.log((0, duration_1.toCdkDuration)("900 seconds"));
                    debugOverrideProps = {
                        visibilityTimeout: (0, duration_1.toCdkDuration)("900 seconds"),
                    };
                }
            }
            const name = root.logicalPrefixedName(id) + (sqsQueueProps.fifo ? ".fifo" : "");
            this.cdk.queue = new sqs.Queue(this, "Queue", Object.assign(Object.assign({ queueName: name }, sqsQueueProps), debugOverrideProps));
        }
    }
}
exports.Queue = Queue;
//# sourceMappingURL=data:application/json;base64,