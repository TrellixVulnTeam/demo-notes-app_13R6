"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApiGatewayV1Api = void 0;
const constructs_1 = require("constructs");
const cdk = __importStar(require("aws-cdk-lib"));
const route53 = __importStar(require("aws-cdk-lib/aws-route53"));
const route53Targets = __importStar(require("aws-cdk-lib/aws-route53-targets"));
const acm = __importStar(require("aws-cdk-lib/aws-certificatemanager"));
const cognito = __importStar(require("aws-cdk-lib/aws-cognito"));
const apig = __importStar(require("aws-cdk-lib/aws-apigateway"));
const apigV1AccessLog = __importStar(require("./util/apiGatewayV1AccessLog"));
const Stack_1 = require("./Stack");
const duration_1 = require("./util/duration");
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const allowedMethods = [
    "ANY",
    "GET",
    "PUT",
    "POST",
    "HEAD",
    "PATCH",
    "DELETE",
    "OPTIONS",
];
/////////////////////
// Construct
/////////////////////
/**
 *
 * The `ApiGatewayV1Api` construct is a higher level CDK construct that makes it easy to create an API Gateway REST API. It provides a simple way to define the routes in your API. And allows you to configure the specific Lambda functions if necessary. It also allows you to configure authorization and custom domains. See the [examples](#examples) for more details.
 *
 * :::note
 * If you are creating a new API, use the `Api` construct instead.
 * :::
 *
 * The Api construct uses [API Gateway V2](https://aws.amazon.com/blogs/compute/announcing-http-apis-for-amazon-api-gateway/). It's both faster and cheaper. However, if you need features like Usage Plans and API keys, use the `ApiGatewayV1Api` construct instead. You can [check out a detailed comparison here](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-vs-rest.html).
 *
 * @example
 * ### Minimal config
 *
 * ```js
 * import { ApiGatewayV1Api } from "@serverless-stack/resources";
 *
 * new ApiGatewayV1Api(stack, "Api", {
 *   routes: {
 *     "GET    /notes"     : "src/list.main",
 *     "POST   /notes"     : "src/create.main",
 *     "GET    /notes/{id}": "src/get.main",
 *     "PUT    /notes/{id}": "src/update.main",
 *     "DELETE /notes/{id}": "src/delete.main",
 *   },
 * });
 * ```
 */
class ApiGatewayV1Api extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props || {};
        this.cdk = {};
        this.functions = {};
        this.authorizersData = {};
        this.importedResources = {};
        this.permissionsAttachedForAllRoutes = [];
        this.createRestApi();
        this.addAuthorizers(this.props.authorizers || {});
        this.addRoutes(this, this.props.routes || {});
    }
    /**
     * The AWS generated URL of the Api.
     */
    get url() {
        return this.cdk.restApi.url;
    }
    /**
     * If custom domain is enabled, this is the custom domain URL of the Api.
     *
     * :::note
     * If you are setting the base mapping for the custom domain, you need to include the trailing slash while using the custom domain URL. For example, if the [`domainName`](#domainname) is set to `api.domain.com` and the [`path`](#path) is `v1`, the custom domain URL of the API will be `https://api.domain.com/v1/`.
     * :::
     */
    get customDomainUrl() {
        return this._customDomainUrl;
    }
    /**
     * The routes for the Api
     */
    get routes() {
        return Object.keys(this.functions);
    }
    /**
     * The ARN of the internally created API Gateway REST API
     */
    get restApiArn() {
        const stack = Stack_1.Stack.of(this);
        return `arn:${stack.partition}:apigateway:${stack.region}::/restapis/${this.cdk.restApi.restApiId}`;
    }
    /**
     * The id of the internally created API Gateway REST API
     */
    get restApiId() {
        return this.cdk.restApi.restApiId;
    }
    /**
     * Adds routes to the Api after it has been created.
     *
     * @example
     * ```js
     * api.addRoutes(stack, {
     *   "GET    /notes/{id}": "src/get.main",
     *   "PUT    /notes/{id}": "src/update.main",
     *   "DELETE /notes/{id}": "src/delete.main",
     * });
     * ```
     */
    addRoutes(scope, routes) {
        Object.keys(routes).forEach((routeKey) => {
            // add route
            const fn = this.addRoute(scope, routeKey, routes[routeKey]);
            // attached existing permissions
            this.permissionsAttachedForAllRoutes.forEach((permissions) => fn.attachPermissions(permissions));
        });
    }
    /**
     * Get the instance of the internally created Function, for a given route key where the `routeKey` is the key used to define a route. For example, `GET /notes`.
     *
     * @example
     * ```js
     * const api = new ApiGatewayV1Api(stack, "Api", {
     *   routes: {
     *     "GET    /notes": "src/list.main",
     *   },
     * });
     *
     * const listFunction = api.getFunction("GET /notes");
     * ```
     */
    getFunction(routeKey) {
        return this.functions[this.normalizeRouteKey(routeKey)];
    }
    /**
     * Attaches the given list of permissions to all the routes. This allows the functions to access other AWS resources.
     *
     * @example
     *
     * ```js
     * api.attachPermissions(["s3"]);
     * ```
     */
    attachPermissions(permissions) {
        Object.values(this.functions).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllRoutes.push(permissions);
    }
    /**
     * Attaches the given list of permissions to a specific route. This allows that function to access other AWS resources.
     *
     * @example
     * ```js
     * const api = new ApiGatewayV1Api(stack, "Api", {
     *   routes: {
     *     "GET /notes": "src/list.main",
     *   },
     * });
     *
     * api.attachPermissionsToRoute("GET /notes", ["s3"]);
     * ```
     */
    attachPermissionsToRoute(routeKey, permissions) {
        const fn = this.getFunction(routeKey);
        if (!fn) {
            throw new Error(`Failed to attach permissions. Route "${routeKey}" does not exist.`);
        }
        fn.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "ApiGatewayV1Api",
            data: {
                customDomainUrl: this._customDomainUrl,
                url: this.cdk.restApi.url,
                restApiId: this.cdk.restApi.restApiId,
                routes: Object.entries(this.functions).map(([key, data]) => {
                    return {
                        route: key,
                        fn: (0, Construct_1.getFunctionRef)(data),
                    };
                }),
            },
        };
    }
    createRestApi() {
        var _a, _b, _c, _d, _e, _f, _g;
        const { cdk, cors, accessLog, customDomain } = this.props;
        const id = this.node.id;
        const app = this.node.root;
        if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.restApi)) {
            if (cors !== undefined) {
                throw new Error(`Cannot configure the "cors" when the "restApi" is imported`);
            }
            if (accessLog !== undefined) {
                throw new Error(`Cannot configure the "accessLog" when the "restApi" is imported`);
            }
            if (customDomain !== undefined) {
                throw new Error(`Cannot configure the "customDomain" when the "restApi" is imported`);
            }
            this.cdk.restApi = cdk === null || cdk === void 0 ? void 0 : cdk.restApi;
            // Create an API Gateway deployment resource to trigger a deployment
            this._deployment = new apig.Deployment(this, "Deployment", {
                api: this.cdk.restApi,
            });
            const cfnDeployment = this._deployment.node
                .defaultChild;
            cfnDeployment.stageName = app.stage;
            if (cdk === null || cdk === void 0 ? void 0 : cdk.importedPaths) {
                this.importResources(cdk === null || cdk === void 0 ? void 0 : cdk.importedPaths);
            }
        }
        else {
            const restApiProps = ((cdk === null || cdk === void 0 ? void 0 : cdk.restApi) || {});
            // Validate input
            if ((cdk === null || cdk === void 0 ? void 0 : cdk.importedPaths) !== undefined) {
                throw new Error(`Cannot import route paths when creating a new API.`);
            }
            if (customDomain !== undefined && restApiProps.domainName !== undefined) {
                throw new Error(`Use either the "customDomain" or the "restApi.domainName" to configure the Api domain. Do not use both.`);
            }
            if (cors !== undefined &&
                restApiProps.defaultCorsPreflightOptions !== undefined) {
                throw new Error(`Use either the "cors" or the "restApi.defaultCorsPreflightOptions" to configure the Api's CORS config. Do not use both.`);
            }
            if (accessLog !== undefined &&
                ((_a = restApiProps.deployOptions) === null || _a === void 0 ? void 0 : _a.accessLogDestination) !== undefined) {
                throw new Error(`Use either the "accessLog" or the "restApi.deployOptions.accessLogDestination" to configure the Api's access log. Do not use both.`);
            }
            if (accessLog !== undefined &&
                ((_b = restApiProps.deployOptions) === null || _b === void 0 ? void 0 : _b.accessLogFormat) !== undefined) {
                throw new Error(`Use either the "accessLog" or the "restApi.deployOptions.accessLogFormat" to configure the Api's access log. Do not use both.`);
            }
            const stageName = ((_c = restApiProps.deployOptions) === null || _c === void 0 ? void 0 : _c.stageName) || this.node.root.stage;
            const accessLogData = apigV1AccessLog.buildAccessLogData(this, accessLog);
            this.cdk.accessLogGroup = accessLogData === null || accessLogData === void 0 ? void 0 : accessLogData.logGroup;
            this.cdk.restApi = new apig.RestApi(this, "Api", Object.assign(Object.assign({ restApiName: app.logicalPrefixedName(id) }, restApiProps), { domainName: restApiProps.domainName, defaultCorsPreflightOptions: restApiProps.defaultCorsPreflightOptions ||
                    this.buildCorsConfig(cors), deployOptions: Object.assign(Object.assign({}, (restApiProps.deployOptions || {})), { accessLogDestination: ((_d = restApiProps.deployOptions) === null || _d === void 0 ? void 0 : _d.accessLogDestination) ||
                        (accessLogData === null || accessLogData === void 0 ? void 0 : accessLogData.destination), accessLogFormat: ((_e = restApiProps.deployOptions) === null || _e === void 0 ? void 0 : _e.accessLogFormat) ||
                        (accessLogData === null || accessLogData === void 0 ? void 0 : accessLogData.format), 
                    // default to the name of the sage
                    stageName: stageName, 
                    // default to true
                    tracingEnabled: ((_f = restApiProps.deployOptions) === null || _f === void 0 ? void 0 : _f.tracingEnabled) === undefined
                        ? true
                        : (_g = restApiProps.deployOptions) === null || _g === void 0 ? void 0 : _g.tracingEnabled }) }));
            this.createCustomDomain(customDomain);
            this.createGatewayResponseForCors(cors);
        }
    }
    buildCorsConfig(cors) {
        // Case: cors is false
        if (cors === false) {
            return undefined;
        }
        // Case: cors is true or undefined
        return {
            allowOrigins: apig.Cors.ALL_ORIGINS,
        };
    }
    createGatewayResponseForCors(cors) {
        if (!cors) {
            return;
        }
        this.cdk.restApi.addGatewayResponse("GatewayResponseDefault4XX", {
            type: apig.ResponseType.DEFAULT_4XX,
            responseHeaders: {
                "Access-Control-Allow-Origin": "'*'",
                "Access-Control-Allow-Headers": "'*'",
            },
        });
        this.cdk.restApi.addGatewayResponse("GatewayResponseDefault5XX", {
            type: apig.ResponseType.DEFAULT_5XX,
            responseHeaders: {
                "Access-Control-Allow-Origin": "'*'",
                "Access-Control-Allow-Headers": "'*'",
            },
        });
    }
    createCustomDomain(customDomain) {
        var _a, _b, _c, _d;
        // Case: customDomain is not set
        if (customDomain === undefined) {
            return;
        }
        // To be implemented: to allow more flexible use cases, SST should support 3 more use cases:
        //  1. Allow user passing in `hostedZone` object. The use case is when there are multiple
        //     HostedZones with the same domain, but one is public, and one is private.
        //  2. Allow user passing in `certificate` object. The use case is for user to create wildcard
        //     certificate or using an imported certificate.
        //  3. Allow user passing in `apigDomainName` object. The use case is a user creates multiple API
        //     endpoints, and is mapping them under the same custom domain. `sst.Api` needs to expose the
        //     `apigDomainName` construct created in the first Api, and lets user pass it in when creating
        //     the second Api.
        let domainName, hostedZone, hostedZoneDomain, certificate, apigDomainName, basePath, endpointType, mtls, securityPolicy;
        /////////////////////
        // Parse input
        /////////////////////
        // Case: customDomain is a string
        if (typeof customDomain === "string") {
            // validate: customDomain is a TOKEN string
            // ie. imported SSM value: ssm.StringParameter.valueForStringParameter()
            if (cdk.Token.isUnresolved(customDomain)) {
                throw new Error(`You also need to specify the "hostedZone" if the "domainName" is passed in as a reference.`);
            }
            domainName = customDomain;
            this.assertDomainNameIsLowerCase(domainName);
            hostedZoneDomain = customDomain.split(".").slice(1).join(".");
        }
        // Case: customDomain.domainName is a string
        else if (customDomain.domainName) {
            domainName = customDomain.domainName;
            // parse customDomain.domainName
            if (cdk.Token.isUnresolved(customDomain.domainName)) {
                // If customDomain is a TOKEN string, "hostedZone" has to be passed in. This
                // is because "hostedZone" cannot be parsed from a TOKEN value.
                if (!customDomain.hostedZone) {
                    throw new Error(`You also need to specify the "hostedZone" if the "domainName" is passed in as a reference.`);
                }
                domainName = customDomain.domainName;
            }
            else {
                domainName = customDomain.domainName;
                this.assertDomainNameIsLowerCase(domainName);
            }
            // parse customDomain.hostedZone
            if (!customDomain.hostedZone) {
                hostedZoneDomain = domainName.split(".").slice(1).join(".");
            }
            else if (typeof customDomain.hostedZone === "string") {
                hostedZoneDomain = customDomain.hostedZone;
            }
            else {
                hostedZone = customDomain.hostedZone;
            }
            certificate = (_a = customDomain.cdk) === null || _a === void 0 ? void 0 : _a.certificate;
            basePath = customDomain.path;
            endpointType = customDomain.endpointType;
            mtls = customDomain.mtls;
            securityPolicy = customDomain.securityPolicy;
        }
        // Case: customDomain.domainName is a construct
        else if ((_b = customDomain.cdk) === null || _b === void 0 ? void 0 : _b.domainName) {
            apigDomainName = customDomain.cdk.domainName;
            // customDomain.domainName is imported
            if (apigDomainName &&
                (customDomain.hostedZone || ((_c = customDomain.cdk) === null || _c === void 0 ? void 0 : _c.hostedZone))) {
                throw new Error(`Cannot configure the "hostedZone" when the "domainName" is a construct`);
            }
            if (apigDomainName && ((_d = customDomain.cdk) === null || _d === void 0 ? void 0 : _d.certificate)) {
                throw new Error(`Cannot configure the "certificate" when the "domainName" is a construct`);
            }
            if (apigDomainName && customDomain.endpointType) {
                throw new Error(`Cannot configure the "endpointType" when the "domainName" is a construct`);
            }
            if (apigDomainName && customDomain.mtls) {
                throw new Error(`Cannot configure the "mtls" when the "domainName" is a construct`);
            }
            if (apigDomainName && customDomain.securityPolicy) {
                throw new Error(`Cannot configure the "securityPolicy" when the "domainName" is a construct`);
            }
            basePath = customDomain.path;
        }
        /////////////////////
        // Find hosted zone
        /////////////////////
        if (!apigDomainName && !hostedZone) {
            // Look up hosted zone
            if (!hostedZone && hostedZoneDomain) {
                hostedZone = route53.HostedZone.fromLookup(this, "HostedZone", {
                    domainName: hostedZoneDomain,
                });
            }
        }
        /////////////////////
        // Create certificate
        /////////////////////
        if (!apigDomainName && !certificate) {
            if (endpointType === "edge") {
                certificate = new acm.DnsValidatedCertificate(this, "CrossRegionCertificate", {
                    domainName: domainName,
                    hostedZone: hostedZone,
                    region: "us-east-1",
                });
            }
            else {
                certificate = new acm.Certificate(this, "Certificate", {
                    domainName: domainName,
                    validation: acm.CertificateValidation.fromDns(hostedZone),
                });
            }
            this.cdk.certificate = certificate;
        }
        /////////////////////
        // Create API Gateway domain name
        /////////////////////
        if (!apigDomainName && domainName) {
            // Create custom domain in API Gateway
            apigDomainName = new apig.DomainName(this, "DomainName", {
                domainName,
                certificate: certificate,
                endpointType: endpointType &&
                    apig.EndpointType[endpointType.toLocaleUpperCase()],
                mtls: mtls && Object.assign(Object.assign({}, mtls), { bucket: mtls.bucket.cdk.bucket }),
                securityPolicy: securityPolicy === "TLS 1.0"
                    ? apig.SecurityPolicy.TLS_1_0
                    : securityPolicy === "TLS 1.2"
                        ? apig.SecurityPolicy.TLS_1_2
                        : undefined,
            });
            this.cdk.domainName = apigDomainName;
            // Create DNS record
            this.createARecords(hostedZone, domainName, apigDomainName);
        }
        /////////////////////
        // Create base mapping
        /////////////////////
        if (apigDomainName) {
            new apig.BasePathMapping(this, "BasePath", {
                domainName: apigDomainName,
                restApi: this.cdk.restApi,
                basePath,
            });
        }
        // Note: We only know the full custom domain if domainName is a string.
        //       _customDomainUrl will be undefined if apigDomainName is imported.
        if (domainName && !cdk.Token.isUnresolved(domainName)) {
            this._customDomainUrl = basePath
                ? `https://${domainName}/${basePath}/`
                : `https://${domainName}`;
        }
    }
    createARecords(hostedZone, domainName, apigDomain) {
        // create DNS record
        const recordProps = {
            recordName: domainName,
            zone: hostedZone,
            target: route53.RecordTarget.fromAlias(new route53Targets.ApiGatewayDomain(apigDomain)),
        };
        const records = [
            new route53.ARecord(this, "AliasRecord", recordProps),
            new route53.AaaaRecord(this, "AliasRecordAAAA", recordProps),
        ];
        // note: If domainName is a TOKEN string ie. ${TOKEN..}, the route53.ARecord
        //       construct will append ".${hostedZoneName}" to the end of the domain.
        //       This is because the construct tries to check if the record name
        //       ends with the domain name. If not, it will append the domain name.
        //       So, we need remove this behavior.
        if (cdk.Token.isUnresolved(domainName)) {
            records.forEach((record) => {
                const cfnRecord = record.node.defaultChild;
                cfnRecord.name = domainName;
            });
        }
    }
    importResources(resources) {
        Object.keys(resources).forEach((path) => {
            const resource = apig.Resource.fromResourceAttributes(this, `Resource_${path}`, {
                path,
                resourceId: resources[path],
                restApi: this.cdk.restApi,
            });
            this.importedResources[path] = resource;
        });
    }
    getResourceForPath(path) {
        // Lookup exact match imported resource
        if (this.importedResources[path]) {
            return this.importedResources[path];
        }
        // Lookup parents matching imported resource first
        const parts = path.split("/");
        for (let i = parts.length; i >= 1; i--) {
            const partialPath = parts.slice(0, i).join("/");
            if (this.importedResources[partialPath]) {
                return this.importedResources[partialPath].resourceForPath(parts.slice(i).join("/"));
            }
        }
        // Not child of imported resources, create off the root
        return this.cdk.restApi.root.resourceForPath(path);
    }
    addAuthorizers(authorizers) {
        Object.entries(authorizers).forEach(([key, value]) => {
            var _a, _b, _c, _d, _e;
            if (key === "none") {
                throw new Error(`Cannot name an authorizer "none"`);
            }
            else if (key === "iam") {
                throw new Error(`Cannot name an authorizer "iam"`);
            }
            else if (value.type === "user_pools") {
                if ((_a = value.cdk) === null || _a === void 0 ? void 0 : _a.authorizer) {
                    this.authorizersData[key] = value.cdk.authorizer;
                }
                else {
                    if (!value.userPoolIds) {
                        throw new Error(`Missing "userPoolIds" for "${key}" authorizer`);
                    }
                    const userPools = value.userPoolIds.map((userPoolId) => cognito.UserPool.fromUserPoolId(this, `${key}-ImportedUserPool`, userPoolId));
                    this.authorizersData[key] = new apig.CognitoUserPoolsAuthorizer(this, key, {
                        cognitoUserPools: userPools,
                        authorizerName: value.name,
                        identitySource: value.identitySource,
                        resultsCacheTtl: value.resultsCacheTtl
                            ? (0, duration_1.toCdkDuration)(value.resultsCacheTtl)
                            : cdk.Duration.seconds(0),
                    });
                }
            }
            else if (value.type === "lambda_token") {
                if ((_b = value.cdk) === null || _b === void 0 ? void 0 : _b.authorizer) {
                    this.authorizersData[key] = value.cdk.authorizer;
                }
                else {
                    if (!value.function) {
                        throw new Error(`Missing "function" for "${key}" authorizer`);
                    }
                    this.authorizersData[key] = new apig.TokenAuthorizer(this, key, {
                        handler: value.function,
                        authorizerName: value.name,
                        identitySource: value.identitySource,
                        validationRegex: value.validationRegex,
                        assumeRole: (_c = value.cdk) === null || _c === void 0 ? void 0 : _c.assumeRole,
                        resultsCacheTtl: value.resultsCacheTtl
                            ? (0, duration_1.toCdkDuration)(value.resultsCacheTtl)
                            : cdk.Duration.seconds(0),
                    });
                }
            }
            else if (value.type === "lambda_request") {
                if ((_d = value.cdk) === null || _d === void 0 ? void 0 : _d.authorizer) {
                    this.authorizersData[key] = value.cdk.authorizer;
                }
                else {
                    if (!value.function) {
                        throw new Error(`Missing "function" for "${key}" authorizer`);
                    }
                    else if (!value.identitySources) {
                        throw new Error(`Missing "identitySources" for "${key}" authorizer`);
                    }
                    this.authorizersData[key] = new apig.RequestAuthorizer(this, key, {
                        handler: value.function,
                        authorizerName: value.name,
                        identitySources: value.identitySources,
                        assumeRole: (_e = value.cdk) === null || _e === void 0 ? void 0 : _e.assumeRole,
                        resultsCacheTtl: value.resultsCacheTtl
                            ? (0, duration_1.toCdkDuration)(value.resultsCacheTtl)
                            : cdk.Duration.seconds(0),
                    });
                }
            }
        });
    }
    addRoute(scope, routeKey, routeValue) {
        var _a, _b;
        // Normalize routeKey
        ///////////////////
        routeKey = this.normalizeRouteKey(routeKey);
        if (this.functions[routeKey]) {
            throw new Error(`A route already exists for "${routeKey}"`);
        }
        ///////////////////
        // Get path and method
        ///////////////////
        const routeKeyParts = routeKey.split(" ");
        if (routeKeyParts.length !== 2) {
            throw new Error(`Invalid route ${routeKey}`);
        }
        const methodStr = routeKeyParts[0].toUpperCase();
        const path = routeKeyParts[1];
        const method = allowedMethods.find((per) => per === methodStr);
        if (!method) {
            throw new Error(`Invalid method defined for "${routeKey}"`);
        }
        if (path.length === 0) {
            throw new Error(`Invalid path defined for "${routeKey}"`);
        }
        ///////////////////
        // Create Resources
        ///////////////////
        let resource;
        if (path.endsWith("/{proxy+}")) {
            const parentResource = this.getResourceForPath(path.split("/").slice(0, -1).join("/"));
            resource = parentResource.addProxy({ anyMethod: false });
        }
        else {
            resource = this.getResourceForPath(path);
        }
        ///////////////////
        // Create Method
        ///////////////////
        const routeProps = Function_1.Function.isInlineDefinition(routeValue)
            ? { function: routeValue }
            : routeValue;
        const lambda = Function_1.Function.fromDefinition(scope, `Lambda_${methodStr}_${path}`, routeProps.function, (_a = this.props.defaults) === null || _a === void 0 ? void 0 : _a.function, `The "defaults.function" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the routes using FunctionProps, so the ApiGatewayV1Api construct can apply the "defaults.function" to them.`);
        const integration = new apig.LambdaIntegration(lambda, (_b = routeProps.cdk) === null || _b === void 0 ? void 0 : _b.integration);
        const methodOptions = this.buildRouteMethodOptions(routeProps);
        const apigMethod = resource.addMethod(method, integration, methodOptions);
        // Add an environment variable to determine if the function is an Api route.
        // If it is, when "sst start" is not connected, we want to return an 500
        // status code and a descriptive error message.
        const root = scope.node.root;
        if (root.local) {
            lambda.addEnvironment("SST_DEBUG_IS_API_ROUTE", "1", {
                removeInEdge: true,
            });
        }
        ///////////////////
        // Handle manually created Deployment resource (ie. imported REST API)
        ///////////////////
        if (this._deployment) {
            this._deployment.addToLogicalId({ route: { routeKey, routeValue } });
            this._deployment.node.addDependency(apigMethod);
        }
        ///////////////////
        // Store function
        ///////////////////
        this.functions[routeKey] = lambda;
        return lambda;
    }
    buildRouteMethodOptions(routeProps) {
        var _a, _b, _c, _d, _e, _f;
        const authorizerKey = routeProps.authorizer || ((_a = this.props.defaults) === null || _a === void 0 ? void 0 : _a.authorizer) || "none";
        if (authorizerKey === "none") {
            return Object.assign({ authorizationType: apig.AuthorizationType.NONE }, (_b = routeProps.cdk) === null || _b === void 0 ? void 0 : _b.method);
        }
        else if (authorizerKey === "iam") {
            return Object.assign({ authorizationType: apig.AuthorizationType.IAM }, (_c = routeProps.cdk) === null || _c === void 0 ? void 0 : _c.method);
        }
        if (!this.props.authorizers || !this.props.authorizers[authorizerKey]) {
            throw new Error(`Cannot find authorizer "${authorizerKey}"`);
        }
        const authorizer = this.authorizersData[authorizerKey];
        const authorizationType = this.props.authorizers[authorizerKey].type;
        if (authorizationType === "user_pools") {
            return Object.assign({ authorizationType: apig.AuthorizationType.COGNITO, authorizer, authorizationScopes: routeProps.authorizationScopes ||
                    ((_d = this.props.defaults) === null || _d === void 0 ? void 0 : _d.authorizationScopes) }, (_e = routeProps.cdk) === null || _e === void 0 ? void 0 : _e.method);
        }
        return Object.assign({ authorizationType: apig.AuthorizationType.CUSTOM, authorizer }, (_f = routeProps.cdk) === null || _f === void 0 ? void 0 : _f.method);
    }
    normalizeRouteKey(routeKey) {
        return routeKey.split(/\s+/).join(" ");
    }
    assertDomainNameIsLowerCase(domainName) {
        if (domainName !== domainName.toLowerCase()) {
            throw new Error(`The domain name needs to be in lowercase`);
        }
    }
}
exports.ApiGatewayV1Api = ApiGatewayV1Api;
//# sourceMappingURL=data:application/json;base64,