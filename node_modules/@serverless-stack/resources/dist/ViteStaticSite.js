"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ViteStaticSite = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const StaticSite_1 = require("./StaticSite");
/////////////////////
// Construct
/////////////////////
/**
 * The `ViteStaticSite` construct is a higher level CDK construct that makes it easy to create a Vite single page app. It provides a simple way to build and deploy the site to an S3 bucket; setup a CloudFront CDN for fast content delivery; and configure a custom domain for the website URL.
 *
 * It's designed to work with static sites built with [Vite](https://vitejs.dev/). It allows you to [automatically set environment variables](#configuring-environment-variables) in your Vite app directly from the outputs of your SST app. And it can also create a `.d.ts` type definition file for the environment variables.
 *
 * The `ViteStaticSite` construct internally extends the [`StaticSite`](StaticSite.md) construct with the following pre-configured defaults.
 *
 * - [`indexPage`](StaticSite.md#indexpage) is set to `index.html`.
 * - [`errorPage`](StaticSite.md#errorpage) is set to `redirect_to_index_page`. So error pages are redirected to the index page.
 * - [`buildCommand`](StaticSite.md#buildcommand) is `npm run build`.
 * - [`buildOutput`](StaticSite.md#buildoutput) is the `dist` folder in your Vite app.
 * - [`fileOptions`](StaticSite.md#fileoptions) sets the cache control to `max-age=0,no-cache,no-store,must-revalidate` for HTML files; and `max-age=31536000,public,immutable` for JS/CSS files.
 *
 * @example
 *
 * ### Minimal Config
 *
 * Deploys a Vite app in the `path/to/src` directory.
 *
 * ```js
 * new ViteStaticSite(stack, "Site", {
 *   path: "path/to/src",
 * });
 * ```
 */
class ViteStaticSite extends StaticSite_1.StaticSite {
    constructor(scope, id, props) {
        const { path: sitePath, environment, typesPath } = props || {};
        // generate buildCommand
        let defaultBuildCommand = "npm run build";
        if (fs.existsSync(path.join(sitePath, "yarn.lock"))) {
            defaultBuildCommand = "yarn build";
        }
        // create types file
        const filePath = path.resolve(path.join(sitePath, typesPath || "src/sst-env.d.ts"));
        generateTypesFile(filePath, environment);
        super(scope, id, Object.assign({ indexPage: "index.html", errorPage: "redirect_to_index_page", buildCommand: defaultBuildCommand, buildOutput: "dist", fileOptions: [
                {
                    exclude: "*",
                    include: "*.html",
                    cacheControl: "max-age=0,no-cache,no-store,must-revalidate",
                },
                {
                    exclude: "*",
                    include: ["*.js", "*.css"],
                    cacheControl: "max-age=31536000,public,immutable",
                },
            ] }, props));
    }
}
exports.ViteStaticSite = ViteStaticSite;
function generateTypesFile(typesFullPath, environment) {
    const content = `/// <reference types="vite/client" />

interface ImportMetaEnv {
${Object.keys(environment || {})
        .map((key) => `  readonly ${key}: string`)
        .join("\n")}
}

interface ImportMeta {
  readonly env: ImportMetaEnv
}`;
    fs.ensureDirSync(path.dirname(typesFullPath));
    fs.writeFileSync(typesFullPath, content);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVml0ZVN0YXRpY1NpdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvVml0ZVN0YXRpY1NpdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSwyQ0FBNkI7QUFDN0IsNkNBQStCO0FBRy9CLDZDQUEyRDtBQXFCM0QscUJBQXFCO0FBQ3JCLFlBQVk7QUFDWixxQkFBcUI7QUFFckI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXdCRztBQUNILE1BQWEsY0FBZSxTQUFRLHVCQUFVO0lBQzVDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBMEI7UUFDbEUsTUFBTSxFQUFFLElBQUksRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxHQUFHLEtBQUssSUFBSSxFQUFFLENBQUM7UUFFL0Qsd0JBQXdCO1FBQ3hCLElBQUksbUJBQW1CLEdBQUcsZUFBZSxDQUFDO1FBQzFDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQyxFQUFFO1lBQ25ELG1CQUFtQixHQUFHLFlBQVksQ0FBQztTQUNwQztRQUVELG9CQUFvQjtRQUNwQixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLElBQUksa0JBQWtCLENBQUMsQ0FDckQsQ0FBQztRQUNGLGlCQUFpQixDQUFDLFFBQVEsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUV6QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsa0JBQ2IsU0FBUyxFQUFFLFlBQVksRUFDdkIsU0FBUyxFQUFFLHdCQUF3QixFQUNuQyxZQUFZLEVBQUUsbUJBQW1CLEVBQ2pDLFdBQVcsRUFBRSxNQUFNLEVBQ25CLFdBQVcsRUFBRTtnQkFDWDtvQkFDRSxPQUFPLEVBQUUsR0FBRztvQkFDWixPQUFPLEVBQUUsUUFBUTtvQkFDakIsWUFBWSxFQUFFLDZDQUE2QztpQkFDNUQ7Z0JBQ0Q7b0JBQ0UsT0FBTyxFQUFFLEdBQUc7b0JBQ1osT0FBTyxFQUFFLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQztvQkFDMUIsWUFBWSxFQUFFLG1DQUFtQztpQkFDbEQ7YUFDRixJQUNFLEtBQUssRUFDUixDQUFDO0lBQ0wsQ0FBQztDQUNGO0FBcENELHdDQW9DQztBQUVELFNBQVMsaUJBQWlCLENBQ3hCLGFBQXFCLEVBQ3JCLFdBQXVDO0lBRXZDLE1BQU0sT0FBTyxHQUFHOzs7RUFHaEIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLElBQUksRUFBRSxDQUFDO1NBQzdCLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsY0FBYyxHQUFHLFVBQVUsQ0FBQztTQUN6QyxJQUFJLENBQUMsSUFBSSxDQUFDOzs7OztFQUtYLENBQUM7SUFFRCxFQUFFLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUM5QyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzLWV4dHJhXCI7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuXG5pbXBvcnQgeyBTdGF0aWNTaXRlLCBTdGF0aWNTaXRlUHJvcHMgfSBmcm9tIFwiLi9TdGF0aWNTaXRlXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gSW50ZXJmYWNlc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCBpbnRlcmZhY2UgVml0ZVN0YXRpY1NpdGVQcm9wcyBleHRlbmRzIFN0YXRpY1NpdGVQcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgcGF0aCB3aGVyZSBjb2RlLWdlbiBzaG91bGQgcGxhY2UgdGhlIHR5cGUgZGVmaW5pdGlvbiBmb3IgZW52aXJvbm1lbnQgdmFyaWFibGVzXG4gICAqXG4gICAqIEBkZWZhdWx0IFwic3JjL3NzdC1lbnYuZC50c1wiXG4gICAqIEBleGFtcGxlXG4gICAqIGBgYGpzXG4gICAqIG5ldyBWaXRlU3RhdGljU2l0ZShzdGFjaywgXCJTaXRlXCIsIHtcbiAgICogICB0eXBlc0ZpbGU6IFwiLi9vdGhlci9wYXRoL3NzdC1lbnYuZC50c1wiLFxuICAgKiB9KVxuICAgKiBgYGBcbiAgICovXG4gIHR5cGVzUGF0aD86IHN0cmluZztcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBDb25zdHJ1Y3Rcbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG4vKipcbiAqIFRoZSBgVml0ZVN0YXRpY1NpdGVgIGNvbnN0cnVjdCBpcyBhIGhpZ2hlciBsZXZlbCBDREsgY29uc3RydWN0IHRoYXQgbWFrZXMgaXQgZWFzeSB0byBjcmVhdGUgYSBWaXRlIHNpbmdsZSBwYWdlIGFwcC4gSXQgcHJvdmlkZXMgYSBzaW1wbGUgd2F5IHRvIGJ1aWxkIGFuZCBkZXBsb3kgdGhlIHNpdGUgdG8gYW4gUzMgYnVja2V0OyBzZXR1cCBhIENsb3VkRnJvbnQgQ0ROIGZvciBmYXN0IGNvbnRlbnQgZGVsaXZlcnk7IGFuZCBjb25maWd1cmUgYSBjdXN0b20gZG9tYWluIGZvciB0aGUgd2Vic2l0ZSBVUkwuXG4gKlxuICogSXQncyBkZXNpZ25lZCB0byB3b3JrIHdpdGggc3RhdGljIHNpdGVzIGJ1aWx0IHdpdGggW1ZpdGVdKGh0dHBzOi8vdml0ZWpzLmRldi8pLiBJdCBhbGxvd3MgeW91IHRvIFthdXRvbWF0aWNhbGx5IHNldCBlbnZpcm9ubWVudCB2YXJpYWJsZXNdKCNjb25maWd1cmluZy1lbnZpcm9ubWVudC12YXJpYWJsZXMpIGluIHlvdXIgVml0ZSBhcHAgZGlyZWN0bHkgZnJvbSB0aGUgb3V0cHV0cyBvZiB5b3VyIFNTVCBhcHAuIEFuZCBpdCBjYW4gYWxzbyBjcmVhdGUgYSBgLmQudHNgIHR5cGUgZGVmaW5pdGlvbiBmaWxlIGZvciB0aGUgZW52aXJvbm1lbnQgdmFyaWFibGVzLlxuICpcbiAqIFRoZSBgVml0ZVN0YXRpY1NpdGVgIGNvbnN0cnVjdCBpbnRlcm5hbGx5IGV4dGVuZHMgdGhlIFtgU3RhdGljU2l0ZWBdKFN0YXRpY1NpdGUubWQpIGNvbnN0cnVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgcHJlLWNvbmZpZ3VyZWQgZGVmYXVsdHMuXG4gKlxuICogLSBbYGluZGV4UGFnZWBdKFN0YXRpY1NpdGUubWQjaW5kZXhwYWdlKSBpcyBzZXQgdG8gYGluZGV4Lmh0bWxgLlxuICogLSBbYGVycm9yUGFnZWBdKFN0YXRpY1NpdGUubWQjZXJyb3JwYWdlKSBpcyBzZXQgdG8gYHJlZGlyZWN0X3RvX2luZGV4X3BhZ2VgLiBTbyBlcnJvciBwYWdlcyBhcmUgcmVkaXJlY3RlZCB0byB0aGUgaW5kZXggcGFnZS5cbiAqIC0gW2BidWlsZENvbW1hbmRgXShTdGF0aWNTaXRlLm1kI2J1aWxkY29tbWFuZCkgaXMgYG5wbSBydW4gYnVpbGRgLlxuICogLSBbYGJ1aWxkT3V0cHV0YF0oU3RhdGljU2l0ZS5tZCNidWlsZG91dHB1dCkgaXMgdGhlIGBkaXN0YCBmb2xkZXIgaW4geW91ciBWaXRlIGFwcC5cbiAqIC0gW2BmaWxlT3B0aW9uc2BdKFN0YXRpY1NpdGUubWQjZmlsZW9wdGlvbnMpIHNldHMgdGhlIGNhY2hlIGNvbnRyb2wgdG8gYG1heC1hZ2U9MCxuby1jYWNoZSxuby1zdG9yZSxtdXN0LXJldmFsaWRhdGVgIGZvciBIVE1MIGZpbGVzOyBhbmQgYG1heC1hZ2U9MzE1MzYwMDAscHVibGljLGltbXV0YWJsZWAgZm9yIEpTL0NTUyBmaWxlcy5cbiAqXG4gKiBAZXhhbXBsZVxuICpcbiAqICMjIyBNaW5pbWFsIENvbmZpZ1xuICpcbiAqIERlcGxveXMgYSBWaXRlIGFwcCBpbiB0aGUgYHBhdGgvdG8vc3JjYCBkaXJlY3RvcnkuXG4gKlxuICogYGBganNcbiAqIG5ldyBWaXRlU3RhdGljU2l0ZShzdGFjaywgXCJTaXRlXCIsIHtcbiAqICAgcGF0aDogXCJwYXRoL3RvL3NyY1wiLFxuICogfSk7XG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFZpdGVTdGF0aWNTaXRlIGV4dGVuZHMgU3RhdGljU2l0ZSB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBWaXRlU3RhdGljU2l0ZVByb3BzKSB7XG4gICAgY29uc3QgeyBwYXRoOiBzaXRlUGF0aCwgZW52aXJvbm1lbnQsIHR5cGVzUGF0aCB9ID0gcHJvcHMgfHwge307XG5cbiAgICAvLyBnZW5lcmF0ZSBidWlsZENvbW1hbmRcbiAgICBsZXQgZGVmYXVsdEJ1aWxkQ29tbWFuZCA9IFwibnBtIHJ1biBidWlsZFwiO1xuICAgIGlmIChmcy5leGlzdHNTeW5jKHBhdGguam9pbihzaXRlUGF0aCwgXCJ5YXJuLmxvY2tcIikpKSB7XG4gICAgICBkZWZhdWx0QnVpbGRDb21tYW5kID0gXCJ5YXJuIGJ1aWxkXCI7XG4gICAgfVxuXG4gICAgLy8gY3JlYXRlIHR5cGVzIGZpbGVcbiAgICBjb25zdCBmaWxlUGF0aCA9IHBhdGgucmVzb2x2ZShcbiAgICAgIHBhdGguam9pbihzaXRlUGF0aCwgdHlwZXNQYXRoIHx8IFwic3JjL3NzdC1lbnYuZC50c1wiKVxuICAgICk7XG4gICAgZ2VuZXJhdGVUeXBlc0ZpbGUoZmlsZVBhdGgsIGVudmlyb25tZW50KTtcblxuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgaW5kZXhQYWdlOiBcImluZGV4Lmh0bWxcIixcbiAgICAgIGVycm9yUGFnZTogXCJyZWRpcmVjdF90b19pbmRleF9wYWdlXCIsXG4gICAgICBidWlsZENvbW1hbmQ6IGRlZmF1bHRCdWlsZENvbW1hbmQsXG4gICAgICBidWlsZE91dHB1dDogXCJkaXN0XCIsXG4gICAgICBmaWxlT3B0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgZXhjbHVkZTogXCIqXCIsXG4gICAgICAgICAgaW5jbHVkZTogXCIqLmh0bWxcIixcbiAgICAgICAgICBjYWNoZUNvbnRyb2w6IFwibWF4LWFnZT0wLG5vLWNhY2hlLG5vLXN0b3JlLG11c3QtcmV2YWxpZGF0ZVwiLFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgZXhjbHVkZTogXCIqXCIsXG4gICAgICAgICAgaW5jbHVkZTogW1wiKi5qc1wiLCBcIiouY3NzXCJdLFxuICAgICAgICAgIGNhY2hlQ29udHJvbDogXCJtYXgtYWdlPTMxNTM2MDAwLHB1YmxpYyxpbW11dGFibGVcIixcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICAuLi5wcm9wcyxcbiAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZVR5cGVzRmlsZShcbiAgdHlwZXNGdWxsUGF0aDogc3RyaW5nLFxuICBlbnZpcm9ubWVudD86IHsgW2tleTogc3RyaW5nXTogc3RyaW5nIH1cbikge1xuICBjb25zdCBjb250ZW50ID0gYC8vLyA8cmVmZXJlbmNlIHR5cGVzPVwidml0ZS9jbGllbnRcIiAvPlxuXG5pbnRlcmZhY2UgSW1wb3J0TWV0YUVudiB7XG4ke09iamVjdC5rZXlzKGVudmlyb25tZW50IHx8IHt9KVxuICAubWFwKChrZXkpID0+IGAgIHJlYWRvbmx5ICR7a2V5fTogc3RyaW5nYClcbiAgLmpvaW4oXCJcXG5cIil9XG59XG5cbmludGVyZmFjZSBJbXBvcnRNZXRhIHtcbiAgcmVhZG9ubHkgZW52OiBJbXBvcnRNZXRhRW52XG59YDtcblxuICBmcy5lbnN1cmVEaXJTeW5jKHBhdGguZGlybmFtZSh0eXBlc0Z1bGxQYXRoKSk7XG4gIGZzLndyaXRlRmlsZVN5bmModHlwZXNGdWxsUGF0aCwgY29udGVudCk7XG59XG4iXX0=