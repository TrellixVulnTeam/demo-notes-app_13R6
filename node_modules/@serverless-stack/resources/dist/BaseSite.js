"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBuildCmdEnvironment = exports.buildErrorResponsesFor404ErrorPage = exports.buildErrorResponsesForRedirectToIndex = void 0;
const cdk = __importStar(require("aws-cdk-lib"));
function buildErrorResponsesForRedirectToIndex(indexPage) {
    return [
        {
            httpStatus: 403,
            responsePagePath: `/${indexPage}`,
            responseHttpStatus: 200,
        },
        {
            httpStatus: 404,
            responsePagePath: `/${indexPage}`,
            responseHttpStatus: 200,
        },
    ];
}
exports.buildErrorResponsesForRedirectToIndex = buildErrorResponsesForRedirectToIndex;
function buildErrorResponsesFor404ErrorPage(errorPage) {
    return [
        {
            httpStatus: 403,
            responsePagePath: `/${errorPage}`,
        },
        {
            httpStatus: 404,
            responsePagePath: `/${errorPage}`,
        },
    ];
}
exports.buildErrorResponsesFor404ErrorPage = buildErrorResponsesFor404ErrorPage;
/////////////////////
// Helper Functions
/////////////////////
function getBuildCmdEnvironment(siteEnvironment) {
    // Generate environment placeholders to be replaced
    // ie. environment => { API_URL: api.url }
    //     environment => API_URL="{{ API_URL }}"
    //
    const buildCmdEnvironment = {};
    Object.entries(siteEnvironment || {}).forEach(([key, value]) => {
        buildCmdEnvironment[key] = cdk.Token.isUnresolved(value)
            ? `{{ ${key} }}`
            : value;
    });
    return buildCmdEnvironment;
}
exports.getBuildCmdEnvironment = getBuildCmdEnvironment;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQmFzZVNpdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvQmFzZVNpdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxpREFBbUM7QUF1Rm5DLFNBQWdCLHFDQUFxQyxDQUNuRCxTQUFpQjtJQUVqQixPQUFPO1FBQ0w7WUFDRSxVQUFVLEVBQUUsR0FBRztZQUNmLGdCQUFnQixFQUFFLElBQUksU0FBUyxFQUFFO1lBQ2pDLGtCQUFrQixFQUFFLEdBQUc7U0FDeEI7UUFDRDtZQUNFLFVBQVUsRUFBRSxHQUFHO1lBQ2YsZ0JBQWdCLEVBQUUsSUFBSSxTQUFTLEVBQUU7WUFDakMsa0JBQWtCLEVBQUUsR0FBRztTQUN4QjtLQUNGLENBQUM7QUFDSixDQUFDO0FBZkQsc0ZBZUM7QUFFRCxTQUFnQixrQ0FBa0MsQ0FDaEQsU0FBaUI7SUFFakIsT0FBTztRQUNMO1lBQ0UsVUFBVSxFQUFFLEdBQUc7WUFDZixnQkFBZ0IsRUFBRSxJQUFJLFNBQVMsRUFBRTtTQUNsQztRQUNEO1lBQ0UsVUFBVSxFQUFFLEdBQUc7WUFDZixnQkFBZ0IsRUFBRSxJQUFJLFNBQVMsRUFBRTtTQUNsQztLQUNGLENBQUM7QUFDSixDQUFDO0FBYkQsZ0ZBYUM7QUFPRCxxQkFBcUI7QUFDckIsbUJBQW1CO0FBQ25CLHFCQUFxQjtBQUVyQixTQUFnQixzQkFBc0IsQ0FBQyxlQUV0QztJQUNDLG1EQUFtRDtJQUNuRCwwQ0FBMEM7SUFDMUMsNkNBQTZDO0lBQzdDLEVBQUU7SUFDRixNQUFNLG1CQUFtQixHQUEyQixFQUFFLENBQUM7SUFDdkQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxlQUFlLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRTtRQUM3RCxtQkFBbUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFDdEQsQ0FBQyxDQUFDLE1BQU0sR0FBRyxLQUFLO1lBQ2hCLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDWixDQUFDLENBQUMsQ0FBQztJQUVILE9BQU8sbUJBQW1CLENBQUM7QUFDN0IsQ0FBQztBQWZELHdEQWVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2RrIGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0ICogYXMgcm91dGU1MyBmcm9tIFwiYXdzLWNkay1saWIvYXdzLXJvdXRlNTNcIjtcbmltcG9ydCAqIGFzIGNsb3VkZnJvbnQgZnJvbSBcImF3cy1jZGstbGliL2F3cy1jbG91ZGZyb250XCI7XG5pbXBvcnQgKiBhcyBhY20gZnJvbSBcImF3cy1jZGstbGliL2F3cy1jZXJ0aWZpY2F0ZW1hbmFnZXJcIjtcblxuLyoqXG4gKiBUaGUgY3VzdG9tRG9tYWluIGZvciB0aGlzIHdlYnNpdGUuIFNTVCBzdXBwb3J0cyBkb21haW5zIHRoYXQgYXJlIGhvc3RlZCBlaXRoZXIgb24gW1JvdXRlIDUzXShodHRwczovL2F3cy5hbWF6b24uY29tL3JvdXRlNTMvKSBvciBleHRlcm5hbGx5LlxuICpcbiAqIE5vdGUgdGhhdCB5b3UgY2FuIGFsc28gbWlncmF0ZSBleHRlcm5hbGx5IGhvc3RlZCBkb21haW5zIHRvIFJvdXRlIDUzIGJ5IFtmb2xsb3dpbmcgdGhpcyBndWlkZV0oaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL1JvdXRlNTMvbGF0ZXN0L0RldmVsb3Blckd1aWRlL01pZ3JhdGluZ0ROUy5odG1sKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBganNcbiAqIG5ldyBTdGF0aWNTaXRlKHRoaXMsIFwiU2l0ZVwiLCB7XG4gKiAgIHBhdGg6IFwicGF0aC90by9zcmNcIixcbiAqICAgY3VzdG9tRG9tYWluOiBcImRvbWFpbi5jb21cIixcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGpzXG4gKiBuZXcgU3RhdGljU2l0ZSh0aGlzLCBcIlNpdGVcIiwge1xuICogICBwYXRoOiBcInBhdGgvdG8vc3JjXCIsXG4gKiAgIGN1c3RvbURvbWFpbjoge1xuICogICAgIGRvbWFpbk5hbWU6IFwiZG9tYWluLmNvbVwiLFxuICogICAgIGRvbWFpbkFsaWFzOiBcInd3dy5kb21haW4uY29tXCIsXG4gKiAgICAgaG9zdGVkWm9uZTogXCJkb21haW4uY29tXCIsXG4gKiAgIH1cbiAqIH0pO1xuICogYGBgXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQmFzZVNpdGVEb21haW5Qcm9wcyB7XG4gIC8qKlxuICAgKiBUaGUgZG9tYWluIHRvIGJlIGFzc2lnbmVkIHRvIHRoZSB3ZWJzaXRlIFVSTCAoaWUuIGRvbWFpbi5jb20pLlxuICAgKlxuICAgKiBTdXBwb3J0cyBkb21haW5zIHRoYXQgYXJlIGhvc3RlZCBlaXRoZXIgb24gW1JvdXRlIDUzXShodHRwczovL2F3cy5hbWF6b24uY29tL3JvdXRlNTMvKSBvciBleHRlcm5hbGx5LlxuICAgKi9cbiAgZG9tYWluTmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogQW4gYWx0ZXJuYXRpdmUgZG9tYWluIHRvIGJlIGFzc2lnbmVkIHRvIHRoZSB3ZWJzaXRlIFVSTC4gVmlzaXRvcnMgdG8gdGhlIGFsaWFzIHdpbGwgYmUgcmVkaXJlY3RlZCB0byB0aGUgbWFpbiBkb21haW4uIChpZS4gYHd3dy5kb21haW4uY29tYCkuXG4gICAqXG4gICAqIFVzZSB0aGlzIHRvIGNyZWF0ZSBhIGB3d3cuYCB2ZXJzaW9uIG9mIHlvdXIgZG9tYWluIGFuZCByZWRpcmVjdCB2aXNpdG9ycyB0byB0aGUgcm9vdCBkb21haW4uXG4gICAqIEBkZWZhdWx0IG5vIGFsaWFzIGNvbmZpZ3VyZWRcbiAgICovXG4gIGRvbWFpbkFsaWFzPzogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIGhvc3RlZCB6b25lIGluIFJvdXRlIDUzIHRoYXQgY29udGFpbnMgdGhlIGRvbWFpbi4gQnkgZGVmYXVsdCwgU1NUIHdpbGwgbG9vayBmb3IgYSBob3N0ZWQgem9uZSBtYXRjaGluZyB0aGUgZG9tYWluTmFtZSB0aGF0J3MgcGFzc2VkIGluLlxuICAgKlxuICAgKiBTZXQgdGhpcyBvcHRpb24gaWYgU1NUIGNhbm5vdCBmaW5kIHRoZSBob3N0ZWQgem9uZSBpbiBSb3V0ZSA1My5cbiAgICogQGRlZmF1bHQgc2FtZSBhcyB0aGUgYGRvbWFpbk5hbWVgXG4gICAqL1xuICBob3N0ZWRab25lPzogc3RyaW5nO1xuICAvKipcbiAgICogU3BlY2lmeSBhZGRpdGlvbmFsIG5hbWVzIHRoYXQgc2hvdWxkIHJvdXRlIHRvIHRoZSBDbG91ZGZyb250IERpc3RyaWJ1dGlvbi4gTm90ZSwgY2VydGlmaWNhdGVzIGZvciB0aGVzZSBuYW1lcyB3aWxsIG5vdCBiZSBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBzbyB0aGUgYGNlcnRpZmljYXRlYCBvcHRpb24gbXVzdCBiZSBzcGVjaWZpZWQuXG4gICAqIEBkZWZhdWx0IGBbXWBcbiAgICovXG4gIGFsdGVybmF0ZU5hbWVzPzogc3RyaW5nW107XG4gIC8qKlxuICAgKiBTZXQgdGhpcyBvcHRpb24gaWYgdGhlIGRvbWFpbiBpcyBub3QgaG9zdGVkIG9uIEFtYXpvbiBSb3V0ZSA1My5cbiAgICogQGRlZmF1bHQgYGZhbHNlYFxuICAgKi9cbiAgaXNFeHRlcm5hbERvbWFpbj86IGJvb2xlYW47XG4gIGNkaz86IHtcbiAgICAvKipcbiAgICAgKiBJbXBvcnQgdGhlIHVuZGVybHlpbmcgUm91dGUgNTMgaG9zdGVkIHpvbmUuXG4gICAgICovXG4gICAgaG9zdGVkWm9uZT86IHJvdXRlNTMuSUhvc3RlZFpvbmU7XG4gICAgLyoqXG4gICAgICogSW1wb3J0IHRoZSBjZXJ0aWZpY2F0ZSBmb3IgdGhlIGRvbWFpbi4gQnkgZGVmYXVsdCwgU1NUIHdpbGwgY3JlYXRlIGEgY2VydGlmaWNhdGUgd2l0aCB0aGUgZG9tYWluIG5hbWUuIFRoZSBjZXJ0aWZpY2F0ZSB3aWxsIGJlIGNyZWF0ZWQgaW4gdGhlIGB1cy1lYXN0LTFgKE4uIFZpcmdpbmlhKSByZWdpb24gYXMgcmVxdWlyZWQgYnkgQVdTIENsb3VkRnJvbnQuXG4gICAgICpcbiAgICAgKiBTZXQgdGhpcyBvcHRpb24gaWYgeW91IGhhdmUgYW4gZXhpc3RpbmcgY2VydGlmaWNhdGUgaW4gdGhlIGB1cy1lYXN0LTFgIHJlZ2lvbiBpbiBBV1MgQ2VydGlmaWNhdGUgTWFuYWdlciB5b3Ugd2FudCB0byB1c2UuXG4gICAgICovXG4gICAgY2VydGlmaWNhdGU/OiBhY20uSUNlcnRpZmljYXRlO1xuICB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VTaXRlRW52aXJvbm1lbnRPdXRwdXRzSW5mbyB7XG4gIHBhdGg6IHN0cmluZztcbiAgc3RhY2s6IHN0cmluZztcbiAgZW52aXJvbm1lbnRPdXRwdXRzOiB7IFtrZXk6IHN0cmluZ106IHN0cmluZyB9O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEJhc2VTaXRlUmVwbGFjZVByb3BzIHtcbiAgZmlsZXM6IHN0cmluZztcbiAgc2VhcmNoOiBzdHJpbmc7XG4gIHJlcGxhY2U6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkRXJyb3JSZXNwb25zZXNGb3JSZWRpcmVjdFRvSW5kZXgoXG4gIGluZGV4UGFnZTogc3RyaW5nXG4pOiBjbG91ZGZyb250LkVycm9yUmVzcG9uc2VbXSB7XG4gIHJldHVybiBbXG4gICAge1xuICAgICAgaHR0cFN0YXR1czogNDAzLFxuICAgICAgcmVzcG9uc2VQYWdlUGF0aDogYC8ke2luZGV4UGFnZX1gLFxuICAgICAgcmVzcG9uc2VIdHRwU3RhdHVzOiAyMDAsXG4gICAgfSxcbiAgICB7XG4gICAgICBodHRwU3RhdHVzOiA0MDQsXG4gICAgICByZXNwb25zZVBhZ2VQYXRoOiBgLyR7aW5kZXhQYWdlfWAsXG4gICAgICByZXNwb25zZUh0dHBTdGF0dXM6IDIwMCxcbiAgICB9LFxuICBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRFcnJvclJlc3BvbnNlc0ZvcjQwNEVycm9yUGFnZShcbiAgZXJyb3JQYWdlOiBzdHJpbmdcbik6IGNsb3VkZnJvbnQuRXJyb3JSZXNwb25zZVtdIHtcbiAgcmV0dXJuIFtcbiAgICB7XG4gICAgICBodHRwU3RhdHVzOiA0MDMsXG4gICAgICByZXNwb25zZVBhZ2VQYXRoOiBgLyR7ZXJyb3JQYWdlfWAsXG4gICAgfSxcbiAgICB7XG4gICAgICBodHRwU3RhdHVzOiA0MDQsXG4gICAgICByZXNwb25zZVBhZ2VQYXRoOiBgLyR7ZXJyb3JQYWdlfWAsXG4gICAgfSxcbiAgXTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBCYXNlU2l0ZUNka0Rpc3RyaWJ1dGlvblByb3BzXG4gIGV4dGVuZHMgT21pdDxjbG91ZGZyb250LkRpc3RyaWJ1dGlvblByb3BzLCBcImRlZmF1bHRCZWhhdmlvclwiPiB7XG4gIGRlZmF1bHRCZWhhdmlvcj86IGNsb3VkZnJvbnQuQWRkQmVoYXZpb3JPcHRpb25zO1xufVxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIEhlbHBlciBGdW5jdGlvbnNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QnVpbGRDbWRFbnZpcm9ubWVudChzaXRlRW52aXJvbm1lbnQ/OiB7XG4gIFtrZXk6IHN0cmluZ106IHN0cmluZztcbn0pOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+IHtcbiAgLy8gR2VuZXJhdGUgZW52aXJvbm1lbnQgcGxhY2Vob2xkZXJzIHRvIGJlIHJlcGxhY2VkXG4gIC8vIGllLiBlbnZpcm9ubWVudCA9PiB7IEFQSV9VUkw6IGFwaS51cmwgfVxuICAvLyAgICAgZW52aXJvbm1lbnQgPT4gQVBJX1VSTD1cInt7IEFQSV9VUkwgfX1cIlxuICAvL1xuICBjb25zdCBidWlsZENtZEVudmlyb25tZW50OiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG4gIE9iamVjdC5lbnRyaWVzKHNpdGVFbnZpcm9ubWVudCB8fCB7fSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgYnVpbGRDbWRFbnZpcm9ubWVudFtrZXldID0gY2RrLlRva2VuLmlzVW5yZXNvbHZlZCh2YWx1ZSlcbiAgICAgID8gYHt7ICR7a2V5fSB9fWBcbiAgICAgIDogdmFsdWU7XG4gIH0pO1xuXG4gIHJldHVybiBidWlsZENtZEVudmlyb25tZW50O1xufVxuIl19