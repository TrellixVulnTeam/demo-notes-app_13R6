import { JoinNode, JoinType } from '../operation-node/join-node.js';
import { AnyColumn, AnyColumnWithTable } from '../util/type-utils.js';
import { TableExpressionDatabase, TableExpressionTables } from './table-parser.js';
import { JoinBuilder } from '../query-builder/join-builder.js';
import { ParseContext } from './parse-context.js';
export declare type JoinReferenceExpression<DB, TB extends keyof DB, TE> = AnyJoinColumn<DB, TB, TE> | AnyJoinColumnWithTable<DB, TB, TE>;
export declare type JoinCallbackExpression<DB, TB extends keyof DB, TE> = (join: JoinBuilder<TableExpressionDatabase<DB, TE>, TableExpressionTables<DB, TB, TE>>) => JoinBuilder<any, any>;
declare type AnyJoinColumn<DB, TB extends keyof DB, TE> = AnyColumn<TableExpressionDatabase<DB, TE>, TableExpressionTables<DB, TB, TE>>;
declare type AnyJoinColumnWithTable<DB, TB extends keyof DB, TE> = AnyColumnWithTable<TableExpressionDatabase<DB, TE>, TableExpressionTables<DB, TB, TE>>;
export declare function parseJoin(ctx: ParseContext, joinType: JoinType, args: any[]): JoinNode;
export {};
