/// <reference types="./default-query-executor.d.ts" />
import { QueryExecutor } from './query-executor.js';
export class DefaultQueryExecutor extends QueryExecutor {
    #compiler;
    #connectionProvider;
    constructor(compiler, connectionProvider, plugins = []) {
        super(plugins);
        this.#compiler = compiler;
        this.#connectionProvider = connectionProvider;
    }
    compileQuery(node) {
        return this.#compiler.compileQuery(node);
    }
    async executeQueryImpl(compiledQuery) {
        return this.#connectionProvider.withConnection((connection) => {
            return connection.executeQuery(compiledQuery);
        });
    }
    withPlugin(plugin) {
        return new DefaultQueryExecutor(this.#compiler, this.#connectionProvider, [
            ...this.plugins,
            plugin,
        ]);
    }
    withPluginAtFront(plugin) {
        return new DefaultQueryExecutor(this.#compiler, this.#connectionProvider, [
            plugin,
            ...this.plugins,
        ]);
    }
    withConnectionProvider(connectionProvider) {
        return new DefaultQueryExecutor(this.#compiler, connectionProvider, [
            ...this.plugins,
        ]);
    }
    withoutPlugins() {
        return new DefaultQueryExecutor(this.#compiler, this.#connectionProvider, []);
    }
}
