/// <reference types="./query-executor.d.ts" />
import { freeze } from '../util/object-utils.js';
const NO_PLUGINS = freeze([]);
/**
 * This class abstracts away the details of how to compile a query into SQL
 * and execute it. Instead of passing around all those details, {@link SelectQueryBuilder}
 * and other classes that execute queries can just pass around and instance of
 * `QueryExecutor`.
 */
export class QueryExecutor {
    #plugins;
    constructor(plugins) {
        this.#plugins = plugins ?? NO_PLUGINS;
    }
    get plugins() {
        return this.#plugins;
    }
    /**
     * Given the query the user has built (expressed as an operation node tree)
     * this method runs it through all plugins' `transformQuery` methods and
     * returns the result.
     */
    transformQuery(node, queryId) {
        for (const plugin of this.#plugins) {
            const transformedNode = plugin.transformQuery({ node, queryId });
            // We need to do a runtime check here. There is no good way
            // to write types that enforce this constraint.
            if (transformedNode.kind === node.kind) {
                node = transformedNode;
            }
            else {
                throw new Error([
                    `KyselyPlugin.transformQuery must return a node`,
                    `of the same kind that was given to it.`,
                    `The plugin was given a ${node.kind}`,
                    `but it returned a ${transformedNode.kind}`,
                ].join(' '));
            }
        }
        return node;
    }
    /**
     * Executes a compiled query and runs the result through all plugins'
     * `transformResult` method.
     */
    async executeQuery(compiledQuery, queryId) {
        const result = await this.executeQueryImpl(compiledQuery, queryId);
        return this.#transformResult(result, queryId);
    }
    async #transformResult(result, queryId) {
        for (const plugin of this.#plugins) {
            result = await plugin.transformResult({ result, queryId });
        }
        return result;
    }
}
