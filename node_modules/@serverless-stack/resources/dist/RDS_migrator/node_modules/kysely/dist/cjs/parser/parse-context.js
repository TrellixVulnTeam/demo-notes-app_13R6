"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultParseContext = void 0;
const join_node_js_1 = require("../operation-node/join-node.js");
const select_query_node_js_1 = require("../operation-node/select-query-node.js");
const join_builder_js_1 = require("../query-builder/join-builder.js");
const select_query_builder_js_1 = require("../query-builder/select-query-builder.js");
const expression_builder_js_1 = require("../query-builder/expression-builder.js");
const query_creator_js_1 = require("../query-creator.js");
const noop_query_executor_js_1 = require("../query-executor/noop-query-executor.js");
const query_id_js_1 = require("../util/query-id.js");
const table_parser_js_1 = require("./table-parser.js");
class DefaultParseContext {
    #adapter;
    #noopExecutor;
    constructor(adapter) {
        this.#adapter = adapter;
        this.#noopExecutor = new noop_query_executor_js_1.NoopQueryExecutor();
    }
    get adapter() {
        return this.#adapter;
    }
    createSelectQueryBuilder() {
        return new select_query_builder_js_1.SelectQueryBuilder({
            queryId: (0, query_id_js_1.createQueryId)(),
            executor: this.#noopExecutor,
            parseContext: this,
            queryNode: select_query_node_js_1.SelectQueryNode.create((0, table_parser_js_1.parseTableExpressionOrList)(this, [])),
        });
    }
    createExpressionBuilder() {
        return new expression_builder_js_1.ExpressionBuilder({
            executor: this.#noopExecutor,
            parseContext: this,
        });
    }
    createQueryCreator() {
        return new query_creator_js_1.QueryCreator({
            executor: this.#noopExecutor,
            parseContext: this,
        });
    }
    createJoinBuilder(joinType, table) {
        return new join_builder_js_1.JoinBuilder({
            joinNode: join_node_js_1.JoinNode.create(joinType, (0, table_parser_js_1.parseTableExpression)(this, table)),
            parseContext: this,
        });
    }
}
exports.DefaultParseContext = DefaultParseContext;
