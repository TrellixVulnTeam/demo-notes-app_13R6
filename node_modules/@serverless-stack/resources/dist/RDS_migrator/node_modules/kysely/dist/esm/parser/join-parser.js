/// <reference types="./join-parser.d.ts" />
import { JoinNode } from '../operation-node/join-node.js';
import { parseTableExpression, } from './table-parser.js';
import { parseReferenceFilter } from './filter-parser.js';
export function parseJoin(ctx, joinType, args) {
    if (args.length === 3) {
        return parseSingleOnJoin(ctx, joinType, args[0], args[1], args[2]);
    }
    else if (args.length === 2) {
        return parseCallbackJoin(ctx, joinType, args[0], args[1]);
    }
    else {
        throw new Error('not implemented');
    }
}
function parseCallbackJoin(ctx, joinType, from, callback) {
    const joinBuilder = callback(ctx.createJoinBuilder(joinType, from));
    return joinBuilder.toOperationNode();
}
function parseSingleOnJoin(ctx, joinType, from, lhsColumn, rhsColumn) {
    return JoinNode.createWithOn(joinType, parseTableExpression(ctx, from), parseReferenceFilter(ctx, lhsColumn, '=', rhsColumn));
}
