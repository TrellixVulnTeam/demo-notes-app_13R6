/// <reference types="./parse-context.d.ts" />
import { JoinNode } from '../operation-node/join-node.js';
import { SelectQueryNode } from '../operation-node/select-query-node.js';
import { JoinBuilder } from '../query-builder/join-builder.js';
import { SelectQueryBuilder } from '../query-builder/select-query-builder.js';
import { ExpressionBuilder } from '../query-builder/expression-builder.js';
import { QueryCreator } from '../query-creator.js';
import { NoopQueryExecutor } from '../query-executor/noop-query-executor.js';
import { createQueryId } from '../util/query-id.js';
import { parseTableExpression, parseTableExpressionOrList, } from './table-parser.js';
export class DefaultParseContext {
    #adapter;
    #noopExecutor;
    constructor(adapter) {
        this.#adapter = adapter;
        this.#noopExecutor = new NoopQueryExecutor();
    }
    get adapter() {
        return this.#adapter;
    }
    createSelectQueryBuilder() {
        return new SelectQueryBuilder({
            queryId: createQueryId(),
            executor: this.#noopExecutor,
            parseContext: this,
            queryNode: SelectQueryNode.create(parseTableExpressionOrList(this, [])),
        });
    }
    createExpressionBuilder() {
        return new ExpressionBuilder({
            executor: this.#noopExecutor,
            parseContext: this,
        });
    }
    createQueryCreator() {
        return new QueryCreator({
            executor: this.#noopExecutor,
            parseContext: this,
        });
    }
    createJoinBuilder(joinType, table) {
        return new JoinBuilder({
            joinNode: JoinNode.create(joinType, parseTableExpression(this, table)),
            parseContext: this,
        });
    }
}
