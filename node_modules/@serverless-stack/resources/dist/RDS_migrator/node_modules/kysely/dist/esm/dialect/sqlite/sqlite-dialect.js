/// <reference types="./sqlite-dialect.d.ts" />
import { SqliteDriver } from './sqlite-driver.js';
import { SqliteQueryCompiler } from './sqlite-query-compiler.js';
import { SqliteIntrospector } from './sqlite-introspector.js';
import { SqliteAdapter } from './sqlite-adapter.js';
import { freeze } from '../../util/object-utils.js';
/**
 * SQLite dialect that uses the [better-sqlite3](https://github.com/JoshuaWise/better-sqlite3) library.
 *
 * The {@link SqliteDialectConfig | configuration} is used to construct an instance of
 * [Database](https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md#new-databasepath-options)
 * class. The configuration values are passed directly to the `Database` constructor.
 */
export class SqliteDialect {
    #config;
    constructor(config) {
        this.#config = freeze({ ...config });
    }
    createDriver() {
        return new SqliteDriver(this.#config);
    }
    createQueryCompiler() {
        return new SqliteQueryCompiler();
    }
    createAdapter() {
        return new SqliteAdapter();
    }
    createIntrospector(db) {
        return new SqliteIntrospector(db);
    }
}
