import { DialectAdapter } from '../dialect/dialect-adapter.js';
import { JoinType } from '../operation-node/join-node.js';
import { JoinBuilder } from '../query-builder/join-builder.js';
import { SelectQueryBuilder } from '../query-builder/select-query-builder.js';
import { ExpressionBuilder } from '../query-builder/expression-builder.js';
import { QueryCreator } from '../query-creator.js';
import { TableExpression } from './table-parser.js';
/**
 * This interface exposes everything the parsers need to be able to parse
 * method calls into {@link OperationNode} trees.
 */
export interface ParseContext {
    readonly adapter: DialectAdapter;
    /**
     * Creates a select query builder with a {@link NoopQueryExecutor}.
     */
    createSelectQueryBuilder(): SelectQueryBuilder<any, any, any>;
    /**
     * Creates an expression builder for building stuff like subqueries.
     * {@link NoopQueryExecutor} is used as the executor and the queries
     * built using the returned builder can never be executed.
     */
    createExpressionBuilder(): ExpressionBuilder<any, any>;
    /**
     * Creates a query creator with a {@link NoopQueryExecutor}.
     */
    createQueryCreator(): QueryCreator<any>;
    /**
     * Creates an instance of a join builder.
     */
    createJoinBuilder(joinType: JoinType, table: TableExpression<any, any>): JoinBuilder<any, any>;
}
export declare class DefaultParseContext implements ParseContext {
    #private;
    constructor(adapter: DialectAdapter);
    get adapter(): DialectAdapter;
    /**
     * Creates a select query builder with a {@link NoopQueryExecutor}.
     */
    createSelectQueryBuilder(): SelectQueryBuilder<any, any, any>;
    /**
     * Creates an expression builder for building stuff like subqueries.
     * {@link NoopQueryExecutor} is used as the executor and the queries
     * built using the returned builder can never be executed.
     */
    createExpressionBuilder(): ExpressionBuilder<any, any>;
    /**
     * Creates a query creator with a {@link NoopQueryExecutor}.
     */
    createQueryCreator(): QueryCreator<any>;
    /**
     * Creates an instance of a join builder.
     */
    createJoinBuilder(joinType: JoinType, table: TableExpression<any, any>): JoinBuilder<any, any>;
}
