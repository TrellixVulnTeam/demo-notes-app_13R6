"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryCreator = void 0;
const select_query_builder_js_1 = require("./query-builder/select-query-builder.js");
const insert_query_builder_js_1 = require("./query-builder/insert-query-builder.js");
const delete_query_builder_js_1 = require("./query-builder/delete-query-builder.js");
const update_query_builder_js_1 = require("./query-builder/update-query-builder.js");
const delete_query_node_js_1 = require("./operation-node/delete-query-node.js");
const insert_query_node_js_1 = require("./operation-node/insert-query-node.js");
const select_query_node_js_1 = require("./operation-node/select-query-node.js");
const update_query_node_js_1 = require("./operation-node/update-query-node.js");
const table_parser_js_1 = require("./parser/table-parser.js");
const raw_builder_js_1 = require("./raw-builder/raw-builder.js");
const with_parser_js_1 = require("./parser/with-parser.js");
const with_node_js_1 = require("./operation-node/with-node.js");
const query_id_js_1 = require("./util/query-id.js");
const with_schema_plugin_js_1 = require("./plugin/with-schema/with-schema-plugin.js");
const object_utils_js_1 = require("./util/object-utils.js");
class QueryCreator {
    #props;
    constructor(props) {
        this.#props = (0, object_utils_js_1.freeze)(props);
    }
    selectFrom(from) {
        return new select_query_builder_js_1.SelectQueryBuilder({
            queryId: (0, query_id_js_1.createQueryId)(),
            executor: this.#props.executor,
            parseContext: this.#props.parseContext,
            queryNode: select_query_node_js_1.SelectQueryNode.create((0, table_parser_js_1.parseTableExpressionOrList)(this.#props.parseContext, from), this.#props.withNode),
        });
    }
    /**
     * Creates an insert query.
     *
     * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}
     * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of
     * the inserted row if the db returned one.
     *
     * See the {@link InsertQueryBuilder.values | values} method for more info and examples. Also see
     * the {@link ReturningInterface.returning | returning} method for a way to return columns
     * on supported databases like PostgreSQL.
     *
     * ### Examples
     *
     * ```ts
     * const result = await db
     *   .insertInto('person')
     *   .values({
     *     first_name: 'Jennifer',
     *     last_name: 'Aniston'
     *   })
     *   .executeTakeFirst()
     *
     * console.log(result.insertId)
     * ```
     *
     * Some databases like PostgreSQL support the `returning` method:
     *
     * ```ts
     * const { id } = await db
     *   .insertInto('person')
     *   .values({
     *     first_name: 'Jennifer',
     *     last_name: 'Aniston'
     *   })
     *   .returning('id')
     *   .executeTakeFirst()
     * ```
     */
    insertInto(table) {
        return new insert_query_builder_js_1.InsertQueryBuilder({
            queryId: (0, query_id_js_1.createQueryId)(),
            executor: this.#props.executor,
            parseContext: this.#props.parseContext,
            queryNode: insert_query_node_js_1.InsertQueryNode.create((0, table_parser_js_1.parseTable)(table), this.#props.withNode),
        });
    }
    /**
     * Creates a delete query.
     *
     * See the {@link DeleteQueryBuilder.where} method for examples on how to specify
     * a where clause for the delete operation.
     *
     * The return value of the query is an instance of {@link DeleteResult}.
     *
     * ### Examples
     *
     * ```ts
     * const result = await db
     *   .deleteFrom('person')
     *   .where('person.id', '=', 1)
     *   .executeTakeFirst()
     *
     * console.log(result.numDeletedRows)
     * ```
     */
    deleteFrom(table) {
        return new delete_query_builder_js_1.DeleteQueryBuilder({
            queryId: (0, query_id_js_1.createQueryId)(),
            executor: this.#props.executor,
            parseContext: this.#props.parseContext,
            queryNode: delete_query_node_js_1.DeleteQueryNode.create((0, table_parser_js_1.parseTableExpression)(this.#props.parseContext, table), this.#props.withNode),
        });
    }
    /**
     * Creates an update query.
     *
     * See the {@link UpdateQueryBuilder.where} method for examples on how to specify
     * a where clause for the update operation.
     *
     * See the {@link UpdateQueryBuilder.set} method for examples on how to
     * specify the updates.
     *
     * The return value of the query is an {@link UpdateResult}.
     *
     * ### Examples
     *
     * ```ts
     * const result = await db
     *   .updateTable('person')
     *   .set({ first_name: 'Jennifer' })
     *   .where('person.id', '=', 1)
     *   .executeTakeFirst()
     *
     * console.log(result.numUpdatedRows)
     * ```
     */
    updateTable(table) {
        return new update_query_builder_js_1.UpdateQueryBuilder({
            queryId: (0, query_id_js_1.createQueryId)(),
            executor: this.#props.executor,
            parseContext: this.#props.parseContext,
            queryNode: update_query_node_js_1.UpdateQueryNode.create((0, table_parser_js_1.parseTableExpression)(this.#props.parseContext, table), this.#props.withNode),
        });
    }
    /**
     * Creates a `with` query (Common Table Expression).
     *
     * ### Examples
     *
     * ```ts
     * await db
     *   .with('jennifers', (db) => db
     *     .selectFrom('person')
     *     .where('first_name', '=', 'Jennifer')
     *     .select(['id', 'age'])
     *   )
     *   .with('adult_jennifers', (db) => db
     *     .selectFrom('jennifers')
     *     .where('age', '>', 18)
     *     .select(['id', 'age'])
     *   )
     *   .selectFrom('adult_jennifers')
     *   .where('age', '<', 60)
     *   .selectAll()
     *   .execute()
     * ```
     *
     * The CTE name can optionally specify column names in addition to
     * a name. In that case Kysely requires the expression to retun
     * rows with the same columns.
     *
     * ```ts
     * await db
     *   .with('jennifers(id, age)', (db) => db
     *     .selectFrom('person')
     *     .where('first_name', '=', 'Jennifer')
     *     // This is ok since we return columns with the same
     *     // names as specified by `jennifers(id, age)`.
     *     .select(['id', 'age'])
     *   )
     *   .selectFrom('jennifers')
     *   .selectAll()
     *   .execute()
     * ```
     */
    with(name, expression) {
        const cte = (0, with_parser_js_1.parseCommonTableExpression)(this.#props.parseContext, name, expression);
        return new QueryCreator({
            ...this.#props,
            withNode: this.#props.withNode
                ? with_node_js_1.WithNode.cloneWithExpression(this.#props.withNode, cte)
                : with_node_js_1.WithNode.create(cte),
        });
    }
    /**
     * Creates a recursive `with` query (Common Table Expression).
     *
     * See the {@link with} method for examples and more documentation.
     */
    withRecursive(name, expression) {
        const cte = (0, with_parser_js_1.parseCommonTableExpression)(this.#props.parseContext, name, expression);
        return new QueryCreator({
            ...this.#props,
            withNode: this.#props.withNode
                ? with_node_js_1.WithNode.cloneWithExpression(this.#props.withNode, cte)
                : with_node_js_1.WithNode.create(cte, { recursive: true }),
        });
    }
    /**
     * Sets the schema to be used for all table references that don't explicitly
     * specify a schema.
     *
     * This only affects the query created through the builder returned from
     * this method and doesn't modify the `db` instance.
     *
     * See [this recipe](https://github.com/koskimas/kysely/tree/master/recipes/schemas.md)
     * for a more detailed explanation.
     *
     * ### Examples
     *
     * ```
     * await db
     *   .withSchema('mammals')
     *   .selectFrom('pet')
     *   .selectAll()
     *   .innerJoin('public.person', 'public.person.id', 'pet.owner_id')
     *   .execute()
     * ```
     *
     * The generated SQL (PostgreSQL):
     *
     * ```sql
     * select * from "mammals"."pet"
     * inner join "public"."person"
     * on "public"."person"."id" = "mammals"."pet"."owner_id"
     * ```
     *
     * `withSchema` is smart enough to not add schema for aliases,
     * common table expressions or other places where the schema
     * doesn't belong to:
     *
     * ```
     * await db
     *   .withSchema('mammals')
     *   .selectFrom('pet as p')
     *   .select('p.name')
     *   .execute()
     * ```
     *
     * The generated SQL (PostgreSQL):
     *
     * ```sql
     * select "p"."name" from "mammals"."pet" as "p"
     * ```
     */
    withSchema(schema) {
        return new QueryCreator({
            ...this.#props,
            executor: this.#props.executor.withPluginAtFront(new with_schema_plugin_js_1.WithSchemaPlugin(schema)),
        });
    }
    /**
     * Provides a way to pass arbitrary SQL into your query and executing completely
     * raw queries.
     *
     * You can use the strings `?` and `??` in the `sql` to bind parameters such as
     * user input to the SQL. You should never EVER concatenate untrusted user
     * input to the SQL string to avoid injection vulnerabilities. Instead use `?`
     * in place of a value and pass the actual value in the `parameters` list. See
     * the examples below.
     *
     * You should only use `raw` when there is no other way to get the job done. This is
     * because Kysely is not able to use type inference when you use raw SQL. For example
     * Kysely won't be able to automatically provide you with the correct query result
     * type. However, there are ways to manually provide types when you use `raw` in most
     * cases. See the examples below.
     *
     * Raw builder instances can be passed to pretty much anywhere: `select`, `where`,
     * `*Join`, `groupBy`, `orderBy` etc. Just try it. If the method accepts it, it works.
     *
     * ### Examples
     *
     * Example of using `raw` in a select statement:
     *
     * ```ts
     * const [person] = await db.selectFrom('person')
     *   .select(db.raw<string>('concat(first_name, ' ', last_name)').as('name'))
     *   .where('id', '=', 1)
     *   .execute()
     *
     * console.log(person.name)
     * ```
     *
     * The generated SQL (PostgreSQL):
     *
     * ```sql
     * select concat(first_name, ' ', last_name) as "name"
     * from "person" where "id" = 1
     * ```
     *
     * The above example selects computed column `name` by concatenating the first name
     * and last name together.
     *
     * There are couple of things worth noticing:
     *
     *   1. You need to provide the output type of your SQL segment for the `raw` method
     *     so that Kysely knows what type to give for the `name` column. In this case it's
     *     a `string` since that's the output type of the `concat` function in SQL.
     *
     *   2. You need to give an alias for the selection using the `as` method so that
     *     Kysely is able to add a column to the output type. The alias needs to be
     *     known at compile time! If you pass a string variable whose value is not known
     *     at compile time, there is no way for Kysely or typescript to add a column to
     *     the output type. In this case you need to use the `castTo` method on the query
     *     to specify a return type for the query.
     *
     * We could've also used a `??` placeholder to provide `first_name` and `last_name` like
     * this:
     *
     * ```ts
     * db.raw<string>('concat(??, ' ', ??)', ['first_name', 'last_name'])
     * ```
     *
     * or this:
     *
     * ```ts
     * db.raw<string>('concat(??, ' ', ??)', ['person.first_name', 'person.last_name'])
     * ```
     *
     * But it's often cleaner to just write the column names in the SQL. Again remember to
     * never concatenate column names or any other untrusted user input to the SQL string or you
     * are going to create an injection vulnerability. All user input should go to the parameters
     * array, never to the SQL string directly. But if the column names or values are trusted
     * and known at compile time, there is no reason to use parameters.
     *
     * Example of using `raw` in `where`:
     *
     * ```ts
     * function getPersonsOlderThan(ageLimit: number) {
     *   return await db.selectFrom('person')
     *     .selectAll()
     *     .where(
     *       db.raw('now() - birth_date'),
     *       '>',
     *       db.raw('interval ? year', [ageLimit.toString()])
     *     )
     *     .execute()
     * }
     * ```
     *
     * The generated SQL (PostgreSQL):
     *
     * ```sql
     * select * from "person" where now() - birth_date > interval $1 year
     * ```
     *
     * The function in the above example returns people that are older than the given number of
     * years. The number of years in this example is an untrusted user input, and therefore we use
     * a `?` placeholder for it.
     *
     * Example of creating a completely raw query from scratch:
     *
     * ```ts
     * const result = await db.raw<Person>('select p.* from person p').execute()
     * const persons = result.rows
     * ```
     *
     * For a raw query, you need to specify the type of the returned __row__. In
     * this case we know the resulting items will be of type `Person` se specify that.
     * The result of `execute()` method is always an array. In this case the type of
     * the `persons` variable is `Person[]`.
     *
     * @param sql - The raw SQL. Special strings `?` and `??` can be used as parameter
     *    placeholders. `?` for values and `??` for identifiers such as column names
     *    or `column.table` references.
     *
     * @param params - The parameters that will be bound to the `?` and `??` placeholders in
     *    the sql string.
     */
    raw(sql, parameters) {
        return new raw_builder_js_1.RawBuilder({
            queryId: (0, query_id_js_1.createQueryId)(),
            executor: this.#props.executor,
            sql,
            parameters,
        });
    }
}
exports.QueryCreator = QueryCreator;
