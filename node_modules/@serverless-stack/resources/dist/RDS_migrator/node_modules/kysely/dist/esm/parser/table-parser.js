/// <reference types="./table-parser.d.ts" />
import { isReadonlyArray, isString } from '../util/object-utils.js';
import { AliasNode } from '../operation-node/alias-node.js';
import { TableNode } from '../operation-node/table-node.js';
import { parseAliasedComplexExpression, } from './complex-expression-parser.js';
export function parseTableExpressionOrList(ctx, table) {
    if (isReadonlyArray(table)) {
        return table.map((it) => parseTableExpression(ctx, it));
    }
    else {
        return [parseTableExpression(ctx, table)];
    }
}
export function parseTableExpression(ctx, table) {
    if (isString(table)) {
        return parseAliasedTable(table);
    }
    else {
        return parseAliasedComplexExpression(ctx, table);
    }
}
export function parseAliasedTable(from) {
    const ALIAS_SEPARATOR = ' as ';
    if (from.includes(ALIAS_SEPARATOR)) {
        const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim);
        return AliasNode.create(parseTable(table), alias);
    }
    else {
        return parseTable(from);
    }
}
export function parseTable(from) {
    const SCHEMA_SEPARATOR = '.';
    if (from.includes(SCHEMA_SEPARATOR)) {
        const [schema, table] = from.split(SCHEMA_SEPARATOR).map(trim);
        return TableNode.createWithSchema(schema, table);
    }
    else {
        return TableNode.create(from);
    }
}
function trim(str) {
    return str.trim();
}
