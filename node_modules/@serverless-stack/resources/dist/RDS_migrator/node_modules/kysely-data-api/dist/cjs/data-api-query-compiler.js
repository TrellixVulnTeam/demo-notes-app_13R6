"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MysqlDataApiQueryCompiler = exports.PostgresDataApiQueryCompiler = void 0;
const kysely_1 = require("kysely");
class PostgresDataApiQueryCompiler extends kysely_1.PostgresQueryCompiler {
    appendValue(value) {
        const name = this.numParameters;
        this.append(this.getCurrentParameterPlaceholder());
        this.addParameter({
            name: name.toString(),
            value: serialize(value),
        });
    }
    getCurrentParameterPlaceholder() {
        return ":" + this.numParameters;
    }
}
exports.PostgresDataApiQueryCompiler = PostgresDataApiQueryCompiler;
class MysqlDataApiQueryCompiler extends kysely_1.MysqlQueryCompiler {
    appendValue(value) {
        const name = this.numParameters;
        this.append(this.getCurrentParameterPlaceholder());
        this.addParameter({
            name: name.toString(),
            value: serialize(value),
        });
    }
    getCurrentParameterPlaceholder() {
        return ":" + this.numParameters;
    }
}
exports.MysqlDataApiQueryCompiler = MysqlDataApiQueryCompiler;
function serialize(value) {
    if (value == null)
        return { isNull: true };
    switch (typeof value) {
        case "number":
            if (Number.isInteger(value))
                return {
                    longValue: value,
                };
            else
                return {
                    doubleValue: value,
                };
        case "bigint":
            return {
                doubleValue: Number(value),
            };
        case "string":
            return {
                stringValue: value,
            };
        case "boolean":
            return {
                booleanValue: value,
            };
        case "object":
            if (Buffer.isBuffer(value))
                return {
                    blobValue: value,
                };
            else
                break;
    }
    throw "wtf";
}
