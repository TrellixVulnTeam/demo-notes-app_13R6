"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
const AWS = __importStar(require("aws-sdk"));
AWS.config.logger = console;
const util_1 = require("./util");
const cfnResponse = __importStar(require("./cfn-response"));
const s3 = new AWS.S3({ region: "us-east-1" });
function handler(cfnRequest) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)("onEventHandler", cfnRequest);
        // Get bucket name
        const bucketName = cfnRequest.RequestType === "Create"
            ? generateBucketName(cfnRequest.ResourceProperties.BucketNamePrefix)
            : cfnRequest.PhysicalResourceId;
        // Process request
        let responseData;
        switch (cfnRequest.RequestType) {
            case "Create":
                yield createBucket(bucketName);
                responseData = {
                    BucketName: bucketName,
                };
                break;
            case "Update":
                break;
            case "Delete":
                yield emptyBucket(bucketName);
                yield deleteBucket(bucketName);
                break;
            default:
                throw new Error("Unsupported request type");
        }
        // Build response
        return cfnResponse.submitResponse("SUCCESS", Object.assign(Object.assign({}, cfnRequest), { PhysicalResourceId: bucketName, Data: responseData }));
    });
}
function createBucket(bucketName) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`createBucket() called with bucketName`, bucketName);
        const resp = yield s3
            .createBucket({
            Bucket: bucketName,
        })
            .promise();
        (0, util_1.log)(`response`, resp);
    });
}
function deleteBucket(bucketName) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, util_1.log)(`deleteBucket() called with bucketName`, bucketName);
        const resp = yield s3
            .deleteBucket({
            Bucket: bucketName,
        })
            .promise();
        (0, util_1.log)(`response`, resp);
    });
}
function generateBucketName(prefix) {
    const MAX_NAME_LENGTH = 63;
    const length = 20;
    const characters = "abcdefghijklmnopqrstuvwxyz";
    const charactersLength = characters.length;
    let result = `${prefix
        .toLowerCase()
        .slice(0, MAX_NAME_LENGTH - length - 1)}-`;
    for (let i = 0; i < length; i++) {
        result += characters.charAt(Math.floor(Math.random() * charactersLength));
    }
    return result;
}
////////////////
// @aws-cdk/aws-s3/lib/auto-delete-objectshandler
////////////////
function emptyBucket(bucketName) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        const listedObjects = yield s3
            .listObjectVersions({ Bucket: bucketName })
            .promise();
        const contents = [
            ...((_a = listedObjects.Versions) !== null && _a !== void 0 ? _a : []),
            ...((_b = listedObjects.DeleteMarkers) !== null && _b !== void 0 ? _b : []),
        ];
        if (contents.length === 0) {
            return;
        }
        const records = contents.map((record) => ({
            Key: record.Key,
            VersionId: record.VersionId,
        }));
        yield s3
            .deleteObjects({ Bucket: bucketName, Delete: { Objects: records } })
            .promise();
        if (listedObjects === null || listedObjects === void 0 ? void 0 : listedObjects.IsTruncated) {
            yield emptyBucket(bucketName);
        }
    });
}
module.exports = {
    handler: cfnResponse.safeHandler(handler),
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczMtYnVja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL25leHRqcy1zaXRlL2N1c3RvbS1yZXNvdXJjZS9zMy1idWNrZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkNBQStCO0FBQy9CLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQztBQUU1QixpQ0FBNkI7QUFDN0IsNERBQThDO0FBQzlDLE1BQU0sRUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBTS9DLFNBQWUsT0FBTyxDQUNwQixVQUF1RDs7UUFFdkQsSUFBQSxVQUFHLEVBQUMsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFbEMsa0JBQWtCO1FBQ2xCLE1BQU0sVUFBVSxHQUNkLFVBQVUsQ0FBQyxXQUFXLEtBQUssUUFBUTtZQUNqQyxDQUFDLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLGdCQUFnQixDQUFDO1lBQ3BFLENBQUMsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUM7UUFFcEMsa0JBQWtCO1FBQ2xCLElBQUksWUFBWSxDQUFDO1FBQ2pCLFFBQVEsVUFBVSxDQUFDLFdBQVcsRUFBRTtZQUM5QixLQUFLLFFBQVE7Z0JBQ1gsTUFBTSxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQy9CLFlBQVksR0FBRztvQkFDYixVQUFVLEVBQUUsVUFBVTtpQkFDdkIsQ0FBQztnQkFDRixNQUFNO1lBQ1IsS0FBSyxRQUFRO2dCQUNYLE1BQU07WUFDUixLQUFLLFFBQVE7Z0JBQ1gsTUFBTSxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzlCLE1BQU0sWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMvQixNQUFNO1lBQ1I7Z0JBQ0UsTUFBTSxJQUFJ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WUFDOUIsTUFBTSxXQUFXLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDL0I7O0NBQ0Y7QUExR0QsaUJBQVM7SUFDUCxPQUFPLEVBQUUsV0FBVyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7Q0FDMUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIEFXUyBmcm9tIFwiYXdzLXNka1wiO1xuQVdTLmNvbmZpZy5sb2dnZXIgPSBjb25zb2xlO1xuXG5pbXBvcnQgeyBsb2cgfSBmcm9tIFwiLi91dGlsXCI7XG5pbXBvcnQgKiBhcyBjZm5SZXNwb25zZSBmcm9tIFwiLi9jZm4tcmVzcG9uc2VcIjtcbmNvbnN0IHMzID0gbmV3IEFXUy5TMyh7IHJlZ2lvbjogXCJ1cy1lYXN0LTFcIiB9KTtcblxuZXhwb3J0ID0ge1xuICBoYW5kbGVyOiBjZm5SZXNwb25zZS5zYWZlSGFuZGxlcihoYW5kbGVyKSxcbn07XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIoXG4gIGNmblJlcXVlc3Q6IEFXU0xhbWJkYS5DbG91ZEZvcm1hdGlvbkN1c3RvbVJlc291cmNlRXZlbnRcbikge1xuICBsb2coXCJvbkV2ZW50SGFuZGxlclwiLCBjZm5SZXF1ZXN0KTtcblxuICAvLyBHZXQgYnVja2V0IG5hbWVcbiAgY29uc3QgYnVja2V0TmFtZSA9XG4gICAgY2ZuUmVxdWVzdC5SZXF1ZXN0VHlwZSA9PT0gXCJDcmVhdGVcIlxuICAgICAgPyBnZW5lcmF0ZUJ1Y2tldE5hbWUoY2ZuUmVxdWVzdC5SZXNvdXJjZVByb3BlcnRpZXMuQnVja2V0TmFtZVByZWZpeClcbiAgICAgIDogY2ZuUmVxdWVzdC5QaHlzaWNhbFJlc291cmNlSWQ7XG5cbiAgLy8gUHJvY2VzcyByZXF1ZXN0XG4gIGxldCByZXNwb25zZURhdGE7XG4gIHN3aXRjaCAoY2ZuUmVxdWVzdC5SZXF1ZXN0VHlwZSkge1xuICAgIGNhc2UgXCJDcmVhdGVcIjpcbiAgICAgIGF3YWl0IGNyZWF0ZUJ1Y2tldChidWNrZXROYW1lKTtcbiAgICAgIHJlc3BvbnNlRGF0YSA9IHtcbiAgICAgICAgQnVja2V0TmFtZTogYnVja2V0TmFtZSxcbiAgICAgIH07XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiVXBkYXRlXCI6XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiRGVsZXRlXCI6XG4gICAgICBhd2FpdCBlbXB0eUJ1Y2tldChidWNrZXROYW1lKTtcbiAgICAgIGF3YWl0IGRlbGV0ZUJ1Y2tldChidWNrZXROYW1lKTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJVbnN1cHBvcnRlZCByZXF1ZXN0IHR5cGVcIik7XG4gIH1cblxuICAvLyBCdWlsZCByZXNwb25zZVxuICByZXR1cm4gY2ZuUmVzcG9uc2Uuc3VibWl0UmVzcG9uc2UoXCJTVUNDRVNTXCIsIHtcbiAgICAuLi5jZm5SZXF1ZXN0LFxuICAgIFBoeXNpY2FsUmVzb3VyY2VJZDogYnVja2V0TmFtZSxcbiAgICBEYXRhOiByZXNwb25zZURhdGEsXG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBjcmVhdGVCdWNrZXQoYnVja2V0TmFtZTogc3RyaW5nKSB7XG4gIGxvZyhgY3JlYXRlQnVja2V0KCkgY2FsbGVkIHdpdGggYnVja2V0TmFtZWAsIGJ1Y2tldE5hbWUpO1xuXG4gIGNvbnN0IHJlc3AgPSBhd2FpdCBzM1xuICAgIC5jcmVhdGVCdWNrZXQoe1xuICAgICAgQnVja2V0OiBidWNrZXROYW1lLFxuICAgIH0pXG4gICAgLnByb21pc2UoKTtcblxuICBsb2coYHJlc3BvbnNlYCwgcmVzcCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGRlbGV0ZUJ1Y2tldChidWNrZXROYW1lOiBzdHJpbmcpIHtcbiAgbG9nKGBkZWxldGVCdWNrZXQoKSBjYWxsZWQgd2l0aCBidWNrZXROYW1lYCwgYnVja2V0TmFtZSk7XG5cbiAgY29uc3QgcmVzcCA9IGF3YWl0IHMzXG4gICAgLmRlbGV0ZUJ1Y2tldCh7XG4gICAgICBCdWNrZXQ6IGJ1Y2tldE5hbWUsXG4gICAgfSlcbiAgICAucHJvbWlzZSgpO1xuXG4gIGxvZyhgcmVzcG9uc2VgLCByZXNwKTtcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVCdWNrZXROYW1lKHByZWZpeDogc3RyaW5nKSB7XG4gIGNvbnN0IE1BWF9OQU1FX0xFTkdUSCA9IDYzO1xuICBjb25zdCBsZW5ndGggPSAyMDtcbiAgY29uc3QgY2hhcmFjdGVycyA9IFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIjtcbiAgY29uc3QgY2hhcmFjdGVyc0xlbmd0aCA9IGNoYXJhY3RlcnMubGVuZ3RoO1xuICBsZXQgcmVzdWx0ID0gYCR7cHJlZml4XG4gICAgLnRvTG93ZXJDYXNlKClcbiAgICAuc2xpY2UoMCwgTUFYX05BTUVfTEVOR1RIIC0gbGVuZ3RoIC0gMSl9LWA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICByZXN1bHQgKz0gY2hhcmFjdGVycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY2hhcmFjdGVyc0xlbmd0aCkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy9cbi8vIEBhd3MtY2RrL2F3cy1zMy9saWIvYXV0by1kZWxldGUtb2JqZWN0c2hhbmRsZXJcbi8vLy8vLy8vLy8vLy8vLy9cbmFzeW5jIGZ1bmN0aW9uIGVtcHR5QnVja2V0KGJ1Y2tldE5hbWU6IHN0cmluZykge1xuICBjb25zdCBsaXN0ZWRPYmplY3RzID0gYXdhaXQgczNcbiAgICAubGlzdE9iamVjdFZlcnNpb25zKHsgQnVja2V0OiBidWNrZXROYW1lIH0pXG4gICAgLnByb21pc2UoKTtcbiAgY29uc3QgY29udGVudHMgPSBbXG4gICAgLi4uKGxpc3RlZE9iamVjdHMuVmVyc2lvbnMgPz8gW10pLFxuICAgIC4uLihsaXN0ZWRPYmplY3RzLkRlbGV0ZU1hcmtlcnMgPz8gW10pLFxuICBdO1xuICBpZiAoY29udGVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgcmVjb3JkcyA9IGNvbnRlbnRzLm1hcCgocmVjb3JkOiBhbnkpID0+ICh7XG4gICAgS2V5OiByZWNvcmQuS2V5LFxuICAgIFZlcnNpb25JZDogcmVjb3JkLlZlcnNpb25JZCxcbiAgfSkpO1xuICBhd2FpdCBzM1xuICAgIC5kZWxldGVPYmplY3RzKHsgQnVja2V0OiBidWNrZXROYW1lLCBEZWxldGU6IHsgT2JqZWN0czogcmVjb3JkcyB9IH0pXG4gICAgLnByb21pc2UoKTtcblxuICBpZiAobGlzdGVkT2JqZWN0cz8uSXNUcnVuY2F0ZWQpIHtcbiAgICBhd2FpdCBlbXB0eUJ1Y2tldChidWNrZXROYW1lKTtcbiAgfVxufVxuIl19