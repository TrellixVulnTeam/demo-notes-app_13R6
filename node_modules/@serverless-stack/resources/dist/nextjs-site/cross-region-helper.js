"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateVersionLogicalId = exports.createVersion = exports.createFunction = exports.getOrCreateBucket = void 0;
const path = __importStar(require("path"));
const crypto = __importStar(require("crypto"));
const cdk = __importStar(require("aws-cdk-lib"));
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
function getOrCreateBucket(scope) {
    // Do not recreate if exist
    const providerId = "EdgeLambdaBucketProvider";
    const resId = "EdgeLambdaBucket";
    const stack = cdk.Stack.of(scope);
    const existingResource = stack.node.tryFindChild(resId);
    if (existingResource) {
        return existingResource;
    }
    // Create provider
    const provider = new lambda.Function(stack, providerId, {
        code: lambda.Code.fromAsset(path.join(__dirname, "custom-resource")),
        handler: "s3-bucket.handler",
        runtime: lambda.Runtime.NODEJS_12_X,
        timeout: cdk.Duration.minutes(15),
        memorySize: 1024,
        initialPolicy: [
            new iam.PolicyStatement({
                effect: iam.Effect.ALLOW,
                actions: ["s3:*"],
                resources: ["*"],
            }),
        ],
    });
    // Create custom resource
    const resource = new cdk.CustomResource(stack, resId, {
        serviceToken: provider.functionArn,
        resourceType: "Custom::SSTEdgeLambdaBucket",
        properties: {
            BucketNamePrefix: `${stack.stackName}-${resId}`,
        },
    });
    return resource;
}
exports.getOrCreateBucket = getOrCreateBucket;
function createFunction(scope, name, role, bucketName, functionParams) {
    // Do not recreate if exist
    const providerId = "EdgeLambdaProvider";
    const resId = `${name}EdgeLambda`;
    const stack = cdk.Stack.of(scope);
    let provider = stack.node.tryFindChild(providerId);
    // Create provider if not already created
    if (!provider) {
        provider = new lambda.Function(stack, providerId, {
            code: lambda.Code.fromAsset(path.join(__dirname, "custom-resource")),
            handler: "edge-lambda.handler",
            runtime: lambda.Runtime.NODEJS_12_X,
            timeout: cdk.Duration.minutes(15),
            memorySize: 1024,
            initialPolicy: [
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ["lambda:*", "s3:*"],
                    resources: ["*"],
                }),
            ],
        });
        if (provider.role) {
            role.grantPassRole(provider.role);
        }
    }
    // Create custom resource
    const resource = new cdk.CustomResource(scope, resId, {
        serviceToken: provider.functionArn,
        resourceType: "Custom::SSTEdgeLambda",
        properties: {
            FunctionNamePrefix: `${cdk.Stack.of(scope).stackName}-${resId}`,
            FunctionBucket: bucketName,
            FunctionParams: functionParams,
        },
    });
    return resource;
}
exports.createFunction = createFunction;
function createVersion(scope, name, functionArn) {
    // Do not recreate if exist
    const providerId = "EdgeLambdaVersionProvider";
    const resId = `${name}EdgeLambdaVersion`;
    const stack = cdk.Stack.of(scope);
    let provider = stack.node.tryFindChild(providerId);
    // Create provider if not already created
    if (!provider) {
        provider = new lambda.Function(stack, providerId, {
            code: lambda.Code.fromAsset(path.join(__dirname, "custom-resource")),
            handler: "edge-lambda-version.handler",
            runtime: lambda.Runtime.NODEJS_12_X,
            timeout: cdk.Duration.minutes(15),
            memorySize: 1024,
            initialPolicy: [
                new iam.PolicyStatement({
                    effect: iam.Effect.ALLOW,
                    actions: ["lambda:*"],
                    resources: ["*"],
                }),
            ],
        });
    }
    // Create custom resource
    return new cdk.CustomResource(scope, resId, {
        serviceToken: provider.functionArn,
        resourceType: "Custom::SSTEdgeLambdaVersion",
        properties: {
            FunctionArn: functionArn,
        },
    });
}
exports.createVersion = createVersion;
function updateVersionLogicalId(functionCR, versionCR) {
    // Override the version's logical ID with a lazy string which includes the
    // hash of the function itself, so a new version resource is created when
    // the function configuration changes.
    const cfn = versionCR.node.defaultChild;
    const originalLogicalId = cdk.Stack.of(versionCR).resolve(cfn.logicalId);
    cfn.overrideLogicalId(cdk.Lazy.uncachedString({
        produce: () => {
            const hash = calculateHash(functionCR);
            const logicalId = trimFromStart(originalLogicalId, 255 - 32);
            return `${logicalId}${hash}`;
        },
    }));
}
exports.updateVersionLogicalId = updateVersionLogicalId;
function trimFromStart(s, maxLength) {
    const desiredLength = Math.min(maxLength, s.length);
    const newStart = s.length - desiredLength;
    return s.substring(newStart);
}
function calculateHash(resource) {
    // render the cloudformation resource from this function
    // config is of the shape:
    // {
    //  Resources: {
    //    LogicalId: {
    //      Type: 'Function',
    //      Properties: { ... }
    // }}}
    const cfnResource = resource.node.defaultChild;
    const config = cdk.Stack.of(resource).resolve(cfnResource._toCloudFormation());
    const resources = config.Resources;
    const resourceKeys = Object.keys(resources);
    if (resourceKeys.length !== 1) {
        throw new Error(`Expected one rendered CloudFormation resource but found ${resourceKeys.length}`);
    }
    const logicalId = resourceKeys[0];
    const properties = resources[logicalId].Properties.FunctionParams;
    const hash = crypto.createHash("md5");
    hash.update(JSON.stringify(properties));
    return hash.digest("hex");
}
//# sourceMappingURL=data:application/json;base64,