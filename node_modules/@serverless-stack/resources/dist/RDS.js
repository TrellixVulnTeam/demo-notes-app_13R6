"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RDS = void 0;
const path_1 = __importDefault(require("path"));
const glob_1 = __importDefault(require("glob"));
const fs = __importStar(require("fs-extra"));
const crypto = __importStar(require("crypto"));
const constructs_1 = require("constructs");
const cdk = __importStar(require("aws-cdk-lib"));
const ec2 = __importStar(require("aws-cdk-lib/aws-ec2"));
const rds = __importStar(require("aws-cdk-lib/aws-rds"));
const lambda = __importStar(require("aws-cdk-lib/aws-lambda"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
/////////////////////
// Construct
/////////////////////
/**
 * The `RDS` construct is a higher level CDK construct that makes it easy to create an [RDS Serverless Cluster](https://aws.amazon.com/rds/). It uses the following defaults:
 *
 * - Defaults to using the [Serverless v1 On-Demand autoscaling configuration](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html) to make it serverless.
 * - Provides a built-in interface for running schema migrations using [Kysely](https://koskimas.github.io/kysely/#migrations).
 * - Enables [Data API](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html) to allow your Lambda functions to access the database cluster without needing to deploy the functions in a VPC (virtual private cloud).
 * - Enables [Backup Snapshot](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/BackupRestoreAurora.html) to make sure that you don't lose your data.
 *
 * @example
 * ### Using the minimal config
 *
 * ```js
 * import { RDS } from "@serverless-stack/resources";
 *
 * new RDS(stack, "Database", {
 *   engine: "postgresql10.14",
 *   defaultDatabaseName: "my_database",
 * });
 * ```
 *
 */
class RDS extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        const app = scope.node.root;
        const { cdk, engine, defaultDatabaseName, scaling, migrations } = props || {};
        this.cdk = {};
        ////////////////////
        // Create Bucket
        ////////////////////
        const rdsServerlessClusterProps = ((cdk === null || cdk === void 0 ? void 0 : cdk.cluster) ||
            {});
        this.validateRDSServerlessClusterProps(rdsServerlessClusterProps);
        this.validateRequiredProps(props || {});
        this.engine = engine;
        this.defaultDatabaseName = defaultDatabaseName;
        this.cdk.cluster = new rds.ServerlessCluster(this, "Cluster", Object.assign(Object.assign({ clusterIdentifier: app.logicalPrefixedName(id) }, rdsServerlessClusterProps), { defaultDatabaseName, enableDataApi: true, engine: this.getEngine(engine), scaling: this.getScaling(scaling), vpc: this.getVpc(rdsServerlessClusterProps), vpcSubnets: this.getVpcSubnets(rdsServerlessClusterProps) }));
        ///////////////////////////
        // Create Migrations
        ///////////////////////////
        if (migrations) {
            this.validateMigrationsFileExists(migrations);
            this.migratorFunction = this.createMigrationsFunction(engine, defaultDatabaseName, migrations);
            this.createMigrationCustomResource(migrations);
        }
    }
    /**
     * The ARN of the internally created RDS Serverless Cluster.
     */
    get clusterArn() {
        return this.cdk.cluster.clusterArn;
    }
    /**
     * The ARN of the internally created RDS Serverless Cluster.
     */
    get clusterIdentifier() {
        return this.cdk.cluster.clusterIdentifier;
    }
    /**
     * The ARN of the internally created RDS Serverless Cluster.
     */
    get clusterEndpoint() {
        return this.cdk.cluster.clusterEndpoint;
    }
    /**
     * The ARN of the internally created Secrets Manager Secret.
     */
    get secretArn() {
        return this.cdk.cluster.secret.secretArn;
    }
    getConstructMetadata() {
        return {
            type: "RDS",
            data: {
                engine: this.engine,
                secretArn: this.secretArn,
                clusterArn: this.clusterArn,
                clusterIdentifier: this.clusterIdentifier,
                defaultDatabaseName: this.defaultDatabaseName,
                migrator: this.migratorFunction && (0, Construct_1.getFunctionRef)(this.migratorFunction),
            },
        };
    }
    validateRDSServerlessClusterProps(props) {
        // Validate "engine" is passed in from the top level
        if (props.engine) {
            throw new Error(`Use "engine" instead of "cdk.cluster.engine" to configure the RDS database engine.`);
        }
        // Validate "defaultDatabaseName" is passed in from the top level
        if (props.defaultDatabaseName) {
            throw new Error(`Use "defaultDatabaseName" instead of "cdk.cluster.defaultDatabaseName" to configure the RDS database engine.`);
        }
        // Validate "scaling" is passed in from the top level
        if (props.scaling) {
            throw new Error(`Use "scaling" instead of "cdk.cluster.scaling" to configure the RDS database auto-scaling.`);
        }
        // Validate "enableDataApi" is not passed in
        if (props.enableDataApi === false) {
            throw new Error(`Do not configure the "cdk.cluster.enableDataApi". Data API is always enabled for this construct.`);
        }
        // Validate Secrets Manager is used for "credentials"
        if (props.credentials && !props.credentials.secret) {
            throw new Error(`Only credentials managed by SecretManager are supported for the "cdk.cluster.credentials".`);
        }
    }
    validateRequiredProps(props) {
        if (!props.engine) {
            throw new Error(`Missing "engine" in the "${this.node.id}" RDS`);
        }
        if (!props.defaultDatabaseName) {
            throw new Error(`Missing "defaultDatabaseName" in the "${this.node.id}" RDS`);
        }
    }
    validateMigrationsFileExists(migrations) {
        if (!fs.existsSync(migrations))
            throw new Error(`Cannot find the migrations in "${path_1.default.resolve(migrations)}".`);
    }
    getEngine(engine) {
        if (engine === "mysql5.6") {
            return rds.DatabaseClusterEngine.aurora({
                version: rds.AuroraEngineVersion.VER_10A,
            });
        }
        else if (engine === "mysql5.7") {
            return rds.DatabaseClusterEngine.auroraMysql({
                version: rds.AuroraMysqlEngineVersion.VER_2_07_1,
            });
        }
        else if (engine === "postgresql10.14") {
            return rds.DatabaseClusterEngine.auroraPostgres({
                version: rds.AuroraPostgresEngineVersion.VER_10_14,
            });
        }
        throw new Error(`The specified "engine" is not supported for sst.RDS. Only mysql5.6, mysql5.7, and postgresql10.14 engines are currently supported.`);
    }
    getScaling(scaling) {
        return {
            autoPause: (scaling === null || scaling === void 0 ? void 0 : scaling.autoPause) === false
                ? cdk.Duration.minutes(0)
                : (scaling === null || scaling === void 0 ? void 0 : scaling.autoPause) === true || (scaling === null || scaling === void 0 ? void 0 : scaling.autoPause) === undefined
                    ? cdk.Duration.minutes(5)
                    : cdk.Duration.minutes(scaling === null || scaling === void 0 ? void 0 : scaling.autoPause),
            minCapacity: rds.AuroraCapacityUnit[(scaling === null || scaling === void 0 ? void 0 : scaling.minCapacity) || "ACU_2"],
            maxCapacity: rds.AuroraCapacityUnit[(scaling === null || scaling === void 0 ? void 0 : scaling.maxCapacity) || "ACU_16"],
        };
    }
    getVpc(props) {
        if (props.vpc) {
            return props.vpc;
        }
        return new ec2.Vpc(this, "vpc", {
            natGateways: 0,
        });
    }
    getVpcSubnets(props) {
        if (props.vpc) {
            return props.vpcSubnets;
        }
        return {
            subnetType: ec2.SubnetType.PRIVATE_ISOLATED,
        };
    }
    createMigrationsFunction(engine, defaultDatabaseName, migrations) {
        const app = this.node.root;
        // path to migration scripts inside the Lambda function
        const migrationsDestination = "sst_rds_migration_scripts";
        // fullpath of the migrator Lambda function
        // Note:
        // - when invoked from `sst build`, __dirname is `resources/dist`
        // - when running resources tests, __dirname is `resources/src`
        // For now we will do `__dirname/../dist` to make both cases work.
        const srcPath = path_1.default.resolve(path_1.default.join(__dirname, "../dist/RDS_migrator"));
        const fn = new Function_1.Function(this, "MigrationFunction", {
            srcPath,
            handler: "index.handler",
            runtime: "nodejs16.x",
            timeout: 900,
            memorySize: 1024,
            environment: {
                RDS_ARN: this.cdk.cluster.clusterArn,
                RDS_SECRET: this.cdk.cluster.secret.secretArn,
                RDS_DATABASE: defaultDatabaseName,
                RDS_ENGINE_MODE: engine === "postgresql10.14" ? "postgres" : "mysql",
                // for live development, perserve the migrations path so the migrator
                // can locate the migration files
                RDS_MIGRATIONS_PATH: app.local ? migrations : migrationsDestination,
            },
            bundle: {
                // Note that we need to generate a relative path of the migrations off the
                // srcPath because sst.Function internally builds the copy "from" path by
                // joining the srcPath and the from path.
                copyFiles: [
                    {
                        from: path_1.default.relative(path_1.default.resolve(srcPath), path_1.default.resolve(migrations)),
                        to: migrationsDestination,
                    },
                ],
            },
        });
        fn.attachPermissions([this.cdk.cluster]);
        return fn;
    }
    createMigrationCustomResource(migrations) {
        var _a, _b, _c;
        const app = this.node.root;
        // Create custom resource handler
        const handler = new lambda.Function(this, "MigrationHandler", {
            code: lambda.Code.fromAsset(path_1.default.join(__dirname, "Script")),
            runtime: lambda.Runtime.NODEJS_16_X,
            handler: "index.handler",
            timeout: cdk.Duration.minutes(15),
            memorySize: 1024,
        });
        (_a = this.migratorFunction) === null || _a === void 0 ? void 0 : _a.grantInvoke(handler);
        // Note: "MigrationsHash" is generated to ensure the Custom Resource function
        //       is only run when migration files change.
        //
        //       Do not use the hash in Live mode, b/c we want the custom resource
        //       to remain the same in CloudFormation template when rebuilding
        //       infrastructure. Otherwise, there will always be a change when
        //       rebuilding infrastructure b/c the "BuildAt" property changes on
        //       each build.
        const hash = app.local ? 0 : this.generateMigrationsHash(migrations);
        new cdk.CustomResource(this, "MigrationResource", {
            serviceToken: handler.functionArn,
            resourceType: "Custom::SSTScript",
            properties: {
                UserCreateFunction: app.local
                    ? undefined
                    : (_b = this.migratorFunction) === null || _b === void 0 ? void 0 : _b.functionName,
                UserUpdateFunction: app.local
                    ? undefined
                    : (_c = this.migratorFunction) === null || _c === void 0 ? void 0 : _c.functionName,
                UserParams: JSON.stringify({}),
                MigrationsHash: hash,
            },
        });
    }
    generateMigrationsHash(migrations) {
        // Get all files inside the migrations folder
        const files = glob_1.default.sync("**", {
            dot: true,
            nodir: true,
            follow: true,
            cwd: migrations,
        });
        // Calculate hash of all files content
        return crypto
            .createHash("md5")
            .update(files
            .map((file) => fs.readFileSync(path_1.default.join(migrations, file)))
            .join(""))
            .digest("hex");
    }
}
exports.RDS = RDS;
//# sourceMappingURL=data:application/json;base64,