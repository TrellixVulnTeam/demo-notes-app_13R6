"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isCDKConstruct = exports.isCDKConstructOf = exports.isSSTDebugStack = exports.isSSTConstruct = exports.isStackConstruct = exports.isConstruct = exports.getFunctionRef = void 0;
const aws_lambda_1 = require("aws-cdk-lib/aws-lambda");
const Stack_1 = require("./Stack");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
function getFunctionRef(fn) {
    if (!fn)
        return undefined;
    if (!(fn instanceof aws_lambda_1.Function))
        return undefined;
    return {
        node: fn.node.addr,
        stack: Stack_1.Stack.of(fn).node.id,
    };
}
exports.getFunctionRef = getFunctionRef;
function isConstruct(construct) {
    return isSSTConstruct(construct) || isCDKConstruct(construct);
}
exports.isConstruct = isConstruct;
function isStackConstruct(construct) {
    return isCDKConstructOf(construct, "aws-cdk-lib.Stack");
}
exports.isStackConstruct = isStackConstruct;
function isSSTConstruct(construct) {
    return "getConstructMetadata" in construct;
}
exports.isSSTConstruct = isSSTConstruct;
function isSSTDebugStack(construct) {
    return (isStackConstruct(construct) && construct.constructor.name === "DebugStack");
}
exports.isSSTDebugStack = isSSTDebugStack;
function isCDKConstructOf(construct, moduleName) {
    var _a, _b;
    // We need to check if construct is an CDK construct. To do that:
    // - we cannot use the `construct instanceof` check because ie. the PolicyStatement
    //   instance in the user's app might come from a different npm package version
    // - we cannot use the `construct.constructor.name` check because the constructor
    //   name can be prefixed with a number ie. PolicyStatement2
    //
    // Therefore we are going to get the constructor's fqn. The constructor for a CDK
    // construct looks like:
    //    [class Bucket2 extends BucketBase] {
    //      [Symbol(jsii.rtti)]: { fqn: '@aws-cdk/aws-s3.Bucket', version: '1.91.0' }
    //    }
    // We will check against `fqn`.
    const fqn = (_b = (_a = construct === null || construct === void 0 ? void 0 : construct.constructor) === null || _a === void 0 ? void 0 : _a[JSII_RTTI_SYMBOL_1]) === null || _b === void 0 ? void 0 : _b.fqn;
    return typeof fqn === "string" && fqn === moduleName;
}
exports.isCDKConstructOf = isCDKConstructOf;
function isCDKConstruct(construct) {
    var _a, _b;
    const fqn = (_b = (_a = construct === null || construct === void 0 ? void 0 : construct.constructor) === null || _a === void 0 ? void 0 : _a[JSII_RTTI_SYMBOL_1]) === null || _b === void 0 ? void 0 : _b.fqn;
    return (typeof fqn === "string" &&
        (fqn.startsWith("@aws-cdk/") || fqn.startsWith("aws-cdk-lib")));
}
exports.isCDKConstruct = isCDKConstruct;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29uc3RydWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0NvbnN0cnVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSx1REFBd0Q7QUFDeEQsbUNBQWdDO0FBRWhDLE1BQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztBQWdCbkQsU0FBZ0IsY0FBYyxDQUFDLEVBQVE7SUFDckMsSUFBSSxDQUFDLEVBQUU7UUFBRSxPQUFPLFNBQVMsQ0FBQztJQUMxQixJQUFJLENBQUMsQ0FBQyxFQUFFLFlBQVkscUJBQUUsQ0FBQztRQUFFLE9BQU8sU0FBUyxDQUFDO0lBQzFDLE9BQU87UUFDTCxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJO1FBQ2xCLEtBQUssRUFBRSxhQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO0tBQzVCLENBQUM7QUFDSixDQUFDO0FBUEQsd0NBT0M7QUFFRCxTQUFnQixXQUFXLENBQUMsU0FBYztJQUN4QyxPQUFPLGNBQWMsQ0FBQyxTQUFTLENBQUMsSUFBSSxjQUFjLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDaEUsQ0FBQztBQUZELGtDQUVDO0FBQ0QsU0FBZ0IsZ0JBQWdCLENBQUMsU0FBYztJQUM3QyxPQUFPLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQzFELENBQUM7QUFGRCw0Q0FFQztBQUVELFNBQWdCLGNBQWMsQ0FBQyxTQUFjO0lBQzNDLE9BQU8sc0JBQXNCLElBQUksU0FBUyxDQUFDO0FBQzdDLENBQUM7QUFGRCx3Q0FFQztBQUVELFNBQWdCLGVBQWUsQ0FBQyxTQUFjO0lBQzVDLE9BQU8sQ0FDTCxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsSUFBSSxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxZQUFZLENBQzNFLENBQUM7QUFDSixDQUFDO0FBSkQsMENBSUM7QUFFRCxTQUFnQixnQkFBZ0IsQ0FDOUIsU0FBYyxFQUNkLFVBQWtCOztJQUVsQixpRUFBaUU7SUFDakUsbUZBQW1GO0lBQ25GLCtFQUErRTtJQUMvRSxpRkFBaUY7SUFDakYsNERBQTREO0lBQzVELEVBQUU7SUFDRixpRkFBaUY7SUFDakYsd0JBQXdCO0lBQ3hCLDBDQUEwQztJQUMxQyxpRkFBaUY7SUFDakYsT0FBTztJQUNQLCtCQUErQjtJQUMvQixNQUFNLEdBQUcsR0FBRyxNQUFBLE1BQUEsU0FBUyxhQUFULFNBQVMsdUJBQVQsU0FBUyxDQUFFLFdBQVcsMENBQUcsa0JBQWtCLENBQUMsMENBQUUsR0FBRyxDQUFDO0lBQzlELE9BQU8sT0FBTyxHQUFHLEtBQUssUUFBUSxJQUFJLEdBQUcsS0FBSyxVQUFVLENBQUM7QUFDdkQsQ0FBQztBQWxCRCw0Q0FrQkM7QUFFRCxTQUFnQixjQUFjLENBQUMsU0FBYzs7SUFDM0MsTUFBTSxHQUFHLEdBQUcsTUFBQSxNQUFBLFNBQVMsYUFBVCxTQUFTLHVCQUFULFNBQVMsQ0FBRSxXQUFXLDBDQUFHLGtCQUFrQixDQUFDLDBDQUFFLEdBQUcsQ0FBQztJQUM5RCxPQUFPLENBQ0wsT0FBTyxHQUFHLEtBQUssUUFBUTtRQUN2QixDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUMvRCxDQUFDO0FBQ0osQ0FBQztBQU5ELHdDQU1DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCAqIGFzIGNkayBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7IEZ1bmN0aW9uIGFzIEZuIH0gZnJvbSBcImF3cy1jZGstbGliL2F3cy1sYW1iZGFcIjtcbmltcG9ydCB7IFN0YWNrIH0gZnJvbSBcIi4vU3RhY2tcIjtcblxuY29uc3QgSlNJSV9SVFRJX1NZTUJPTF8xID0gU3ltYm9sLmZvcihcImpzaWkucnR0aVwiKTtcblxuZXhwb3J0IGludGVyZmFjZSBTU1RDb25zdHJ1Y3RNZXRhZGF0YTxcbiAgVCBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcbiAgRCBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4gPSBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBMIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiA9IFJlY29yZDxzdHJpbmcsIGFueT5cbj4ge1xuICB0eXBlOiBUO1xuICBkYXRhOiBEO1xuICBsb2NhbD86IEw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU1NUQ29uc3RydWN0IHtcbiAgZ2V0Q29uc3RydWN0TWV0YWRhdGEoKTogU1NUQ29uc3RydWN0TWV0YWRhdGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRGdW5jdGlvblJlZihmbj86IGFueSkge1xuICBpZiAoIWZuKSByZXR1cm4gdW5kZWZpbmVkO1xuICBpZiAoIShmbiBpbnN0YW5jZW9mIEZuKSkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgcmV0dXJuIHtcbiAgICBub2RlOiBmbi5ub2RlLmFkZHIsXG4gICAgc3RhY2s6IFN0YWNrLm9mKGZuKS5ub2RlLmlkLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDb25zdHJ1Y3QoY29uc3RydWN0OiBhbnkpIHtcbiAgcmV0dXJuIGlzU1NUQ29uc3RydWN0KGNvbnN0cnVjdCkgfHwgaXNDREtDb25zdHJ1Y3QoY29uc3RydWN0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1N0YWNrQ29uc3RydWN0KGNvbnN0cnVjdDogYW55KTogY29uc3RydWN0IGlzIGNkay5TdGFjayB7XG4gIHJldHVybiBpc0NES0NvbnN0cnVjdE9mKGNvbnN0cnVjdCwgXCJhd3MtY2RrLWxpYi5TdGFja1wiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzU1NUQ29uc3RydWN0KGNvbnN0cnVjdDogYW55KTogY29uc3RydWN0IGlzIFNTVENvbnN0cnVjdCB7XG4gIHJldHVybiBcImdldENvbnN0cnVjdE1ldGFkYXRhXCIgaW4gY29uc3RydWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTU1REZWJ1Z1N0YWNrKGNvbnN0cnVjdDogYW55KTogY29uc3RydWN0IGlzIGNkay5TdGFjayB7XG4gIHJldHVybiAoXG4gICAgaXNTdGFja0NvbnN0cnVjdChjb25zdHJ1Y3QpICYmIGNvbnN0cnVjdC5jb25zdHJ1Y3Rvci5uYW1lID09PSBcIkRlYnVnU3RhY2tcIlxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDREtDb25zdHJ1Y3RPZihcbiAgY29uc3RydWN0OiBhbnksXG4gIG1vZHVsZU5hbWU6IHN0cmluZ1xuKTogY29uc3RydWN0IGlzIENvbnN0cnVjdCB7XG4gIC8vIFdlIG5lZWQgdG8gY2hlY2sgaWYgY29uc3RydWN0IGlzIGFuIENESyBjb25zdHJ1Y3QuIFRvIGRvIHRoYXQ6XG4gIC8vIC0gd2UgY2Fubm90IHVzZSB0aGUgYGNvbnN0cnVjdCBpbnN0YW5jZW9mYCBjaGVjayBiZWNhdXNlIGllLiB0aGUgUG9saWN5U3RhdGVtZW50XG4gIC8vICAgaW5zdGFuY2UgaW4gdGhlIHVzZXIncyBhcHAgbWlnaHQgY29tZSBmcm9tIGEgZGlmZmVyZW50IG5wbSBwYWNrYWdlIHZlcnNpb25cbiAgLy8gLSB3ZSBjYW5ub3QgdXNlIHRoZSBgY29uc3RydWN0LmNvbnN0cnVjdG9yLm5hbWVgIGNoZWNrIGJlY2F1c2UgdGhlIGNvbnN0cnVjdG9yXG4gIC8vICAgbmFtZSBjYW4gYmUgcHJlZml4ZWQgd2l0aCBhIG51bWJlciBpZS4gUG9saWN5U3RhdGVtZW50MlxuICAvL1xuICAvLyBUaGVyZWZvcmUgd2UgYXJlIGdvaW5nIHRvIGdldCB0aGUgY29uc3RydWN0b3IncyBmcW4uIFRoZSBjb25zdHJ1Y3RvciBmb3IgYSBDREtcbiAgLy8gY29uc3RydWN0IGxvb2tzIGxpa2U6XG4gIC8vICAgIFtjbGFzcyBCdWNrZXQyIGV4dGVuZHMgQnVja2V0QmFzZV0ge1xuICAvLyAgICAgIFtTeW1ib2woanNpaS5ydHRpKV06IHsgZnFuOiAnQGF3cy1jZGsvYXdzLXMzLkJ1Y2tldCcsIHZlcnNpb246ICcxLjkxLjAnIH1cbiAgLy8gICAgfVxuICAvLyBXZSB3aWxsIGNoZWNrIGFnYWluc3QgYGZxbmAuXG4gIGNvbnN0IGZxbiA9IGNvbnN0cnVjdD8uY29uc3RydWN0b3I/LltKU0lJX1JUVElfU1lNQk9MXzFdPy5mcW47XG4gIHJldHVybiB0eXBlb2YgZnFuID09PSBcInN0cmluZ1wiICYmIGZxbiA9PT0gbW9kdWxlTmFtZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQ0RLQ29uc3RydWN0KGNvbnN0cnVjdDogYW55KTogY29uc3RydWN0IGlzIENvbnN0cnVjdCB7XG4gIGNvbnN0IGZxbiA9IGNvbnN0cnVjdD8uY29uc3RydWN0b3I/LltKU0lJX1JUVElfU1lNQk9MXzFdPy5mcW47XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIGZxbiA9PT0gXCJzdHJpbmdcIiAmJlxuICAgIChmcW4uc3RhcnRzV2l0aChcIkBhd3MtY2RrL1wiKSB8fCBmcW4uc3RhcnRzV2l0aChcImF3cy1jZGstbGliXCIpKVxuICApO1xufVxuIl19