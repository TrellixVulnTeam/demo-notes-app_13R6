"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AppSyncApi = void 0;
const path = __importStar(require("path"));
const fs = __importStar(require("fs-extra"));
const graphql_1 = require("graphql");
const merge_1 = require("@graphql-tools/merge");
const load_files_1 = require("@graphql-tools/load-files");
const constructs_1 = require("constructs");
const appsync = __importStar(require("@aws-cdk/aws-appsync-alpha"));
const appSyncApiDomain = __importStar(require("./util/appSyncApiDomain"));
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
/////////////////////
// Construct
/////////////////////
/**
 *
 * The `AppSyncApi` construct is a higher level CDK construct that makes it easy to create an AppSync GraphQL API. It provides a simple way to define the data sources and the resolvers in your API. And allows you to configure the specific Lambda functions if necessary. See the [examples](#examples) for more details.
 *
 * @example
 * ### Using the minimal config
 *
 * ```js
 * import { AppSyncApi } from "@serverless-stack/resources";
 *
 * new AppSyncApi(stack, "GraphqlApi", {
 *   schema: "graphql/schema.graphql",
 *   dataSources: {
 *     notesDS: "src/notes.main",
 *   },
 *   resolvers: {
 *     "Query    listNotes": "notesDS",
 *     "Query    getNoteById": "notesDS",
 *     "Mutation createNote": "notesDS",
 *     "Mutation updateNote": "notesDS",
 *     "Mutation deleteNote": "notesDS",
 *   },
 * });
 * ```
 *
 * Note that, the resolver key can have extra spaces in between, they are just ignored.
 */
class AppSyncApi extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props || {};
        this.cdk = {};
        this.functionsByDsKey = {};
        this.dataSourcesByDsKey = {};
        this.resolversByResKey = {};
        this.dsKeysByResKey = {};
        this.permissionsAttachedForAllFunctions = [];
        this.createGraphApi();
        // Configure data sources
        if (props === null || props === void 0 ? void 0 : props.dataSources) {
            for (const key of Object.keys(props.dataSources)) {
                this.addDataSource(this, key, props.dataSources[key]);
            }
        }
        // Configure resolvers
        if (props === null || props === void 0 ? void 0 : props.resolvers) {
            for (const key of Object.keys(props.resolvers)) {
                this.addResolver(this, key, props.resolvers[key]);
            }
        }
    }
    /**
     * The Id of the internally created AppSync GraphQL API.
     */
    get apiId() {
        return this.cdk.graphqlApi.apiId;
    }
    /**
     * The ARN of the internally created AppSync GraphQL API.
     */
    get apiArn() {
        return this.cdk.graphqlApi.arn;
    }
    /**
     * The name of the internally created AppSync GraphQL API.
     */
    get apiName() {
        return this.cdk.graphqlApi.name;
    }
    /**
     * The AWS generated URL of the Api.
     */
    get url() {
        return this.cdk.graphqlApi.graphqlUrl;
    }
    /**
     * If custom domain is enabled, this is the custom domain URL of the Api.
     */
    get customDomainUrl() {
        return this._customDomainUrl;
    }
    /**
     * Add data sources after the construct has been created
     *
     * @example
     * ```js
     * api.addDataSources(stack, {
     *   billingDS: "src/billing.main",
     * });
     * ```
     */
    addDataSources(scope, dataSources) {
        Object.keys(dataSources).forEach((key) => {
            // add data source
            const fn = this.addDataSource(scope, key, dataSources[key]);
            // attached existing permissions
            if (fn) {
                this.permissionsAttachedForAllFunctions.forEach((permissions) => fn.attachPermissions(permissions));
            }
        });
    }
    /**
     * Add resolvers the construct has been created
     *
     * @example
     * ```js
     * api.addResolvers(stack, {
     *   "Mutation charge": "billingDS",
     * });
     * ```
     */
    addResolvers(scope, resolvers) {
        Object.keys(resolvers).forEach((key) => {
            // add resolver
            const fn = this.addResolver(scope, key, resolvers[key]);
            // attached existing permissions
            if (fn) {
                this.permissionsAttachedForAllFunctions.forEach((permissions) => fn.attachPermissions(permissions));
            }
        });
    }
    /**
     * Get the instance of the internally created Function, for a given resolver.
     *
     * @example
     * ```js
     * const func = api.getFunction("Mutation charge");
     * ```
     */
    getFunction(key) {
        let fn = this.functionsByDsKey[key];
        if (!fn) {
            const resKey = this.normalizeResolverKey(key);
            const dsKey = this.dsKeysByResKey[resKey];
            fn = this.functionsByDsKey[dsKey];
        }
        return fn;
    }
    /**
     * Get a datasource by name
     * @example
     * ```js
     * api.getDataSource("billingDS");
     * ```
     */
    getDataSource(key) {
        let ds = this.dataSourcesByDsKey[key];
        if (!ds) {
            const resKey = this.normalizeResolverKey(key);
            const dsKey = this.dsKeysByResKey[resKey];
            ds = this.dataSourcesByDsKey[dsKey];
        }
        return ds;
    }
    /**
     * Get a resolver
     *
     * @example
     * ```js
     * api.getResolver("Mutation charge");
     * ```
     */
    getResolver(key) {
        const resKey = this.normalizeResolverKey(key);
        return this.resolversByResKey[resKey];
    }
    /**
     * Attaches the given list of permissions to all function datasources
     *
     * @example
     *
     * ```js
     * api.attachPermissions(["s3"]);
     * ```
     */
    attachPermissions(permissions) {
        Object.values(this.functionsByDsKey).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllFunctions.push(permissions);
    }
    /**
     * Attaches the given list of permissions to a specific function datasource. This allows that function to access other AWS resources.
     *
     * @example
     * api.attachPermissionsToRoute("Mutation charge", ["s3"]);
     * ```
     */
    attachPermissionsToDataSource(key, permissions) {
        const fn = this.getFunction(key);
        if (!fn) {
            throw new Error(`Failed to attach permissions. Function does not exist for key "${key}".`);
        }
        fn.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "AppSync",
            data: {
                url: this.cdk.graphqlApi.graphqlUrl,
                appSyncApiId: this.cdk.graphqlApi.apiId,
                appSyncApiKey: this.cdk.graphqlApi.apiKey,
                customDomainUrl: this._customDomainUrl,
                dataSources: Object.entries(this.dataSourcesByDsKey).map(([key]) => ({
                    name: key,
                    fn: (0, Construct_1.getFunctionRef)(this.functionsByDsKey[key]),
                })),
            },
        };
    }
    createGraphApi() {
        const { schema, customDomain, cdk } = this.props;
        const id = this.node.id;
        const app = this.node.root;
        if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.graphqlApi)) {
            if (customDomain !== undefined) {
                throw new Error(`Cannot configure the "customDomain" when "graphqlApi" is a construct`);
            }
            this.cdk.graphqlApi = cdk === null || cdk === void 0 ? void 0 : cdk.graphqlApi;
        }
        else {
            const graphqlApiProps = ((cdk === null || cdk === void 0 ? void 0 : cdk.graphqlApi) ||
                {});
            // build schema
            let mainSchema;
            if (typeof schema === "string") {
                mainSchema = appsync.Schema.fromAsset(schema);
            }
            else if (Array.isArray(schema)) {
                if (schema.length > 0) {
                    // merge schema files
                    const mergedSchema = (0, merge_1.mergeTypeDefs)((0, load_files_1.loadFilesSync)(schema));
                    const filePath = path.join(app.buildDir, `appsyncapi-${id}-${this.node.addr}.graphql`);
                    fs.writeFileSync(filePath, (0, graphql_1.print)(mergedSchema));
                    mainSchema = appsync.Schema.fromAsset(filePath);
                }
            }
            // build domain
            const domainData = appSyncApiDomain.buildCustomDomainData(this, customDomain);
            this._customDomainUrl =
                domainData && `https://${domainData.domainName}/graphql`;
            this.cdk.graphqlApi = new appsync.GraphqlApi(this, "Api", Object.assign({ name: app.logicalPrefixedName(id), xrayEnabled: true, schema: mainSchema, domainName: domainData }, graphqlApiProps));
            this.cdk.certificate = domainData === null || domainData === void 0 ? void 0 : domainData.certificate;
            // note: As of CDK 2.20.0, the "AWS::AppSync::DomainNameApiAssociation" resource
            //       is not dependent on the "AWS::AppSync::DomainName" resource. This leads
            //       CloudFormation deploy error if DomainNameApiAssociation is created before
            //       DomainName is created.
            //       https://github.com/aws/aws-cdk/issues/18395#issuecomment-1099455502
            //       To workaround this issue, we need to add a dependency manually.
            if (domainData) {
                this._cfnDomainName = this.cdk.graphqlApi.node.children.find((child) => child.cfnResourceType ===
                    "AWS::AppSync::DomainName");
                const cfnDomainNameApiAssociation = this.cdk.graphqlApi.node.children.find((child) => child
                    .cfnResourceType === "AWS::AppSync::DomainNameApiAssociation");
                if (this._cfnDomainName && cfnDomainNameApiAssociation) {
                    cfnDomainNameApiAssociation.node.addDependency(this._cfnDomainName);
                }
            }
        }
    }
    addDataSource(scope, dsKey, dsValue) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        let dataSource;
        let lambda;
        // Lambda function
        if (Function_1.Function.isInlineDefinition(dsValue)) {
            lambda = Function_1.Function.fromDefinition(scope, `Lambda_${dsKey}`, dsValue, (_a = this.props.defaults) === null || _a === void 0 ? void 0 : _a.function, `Cannot define defaults.function when a Function is passed in to the "${dsKey} data source`);
            dataSource = this.cdk.graphqlApi.addLambdaDataSource(dsKey, lambda);
        }
        // DynamoDb ds
        else if (dsValue.type === "dynamodb") {
            dataSource = this.cdk.graphqlApi.addDynamoDbDataSource(dsKey, dsValue.table
                ? dsValue.table.cdk.table
                : (_c = (_b = dsValue.cdk) === null || _b === void 0 ? void 0 : _b.dataSource) === null || _c === void 0 ? void 0 : _c.table, {
                name: dsValue.name,
                description: dsValue.description,
            });
        }
        // Rds ds
        else if (dsValue.type === "rds") {
            dataSource = this.cdk.graphqlApi.addRdsDataSource(dsKey, dsValue.rds
                ? dsValue.rds.cdk.cluster
                : (_e = (_d = dsValue.cdk) === null || _d === void 0 ? void 0 : _d.dataSource) === null || _e === void 0 ? void 0 : _e.serverlessCluster, dsValue.rds
                ? dsValue.rds.cdk.cluster.secret
                : (_g = (_f = dsValue.cdk) === null || _f === void 0 ? void 0 : _f.dataSource) === null || _g === void 0 ? void 0 : _g.secretStore, dsValue.rds
                ? dsValue.databaseName || dsValue.rds.defaultDatabaseName
                : (_j = (_h = dsValue.cdk) === null || _h === void 0 ? void 0 : _h.dataSource) === null || _j === void 0 ? void 0 : _j.databaseName, {
                name: dsValue.name,
                description: dsValue.description,
            });
        }
        // Http ds
        else if (dsValue.type === "http") {
            dataSource = this.cdk.graphqlApi.addHttpDataSource(dsKey, dsValue.endpoint, {
                name: dsValue.name,
                description: dsValue.description,
            });
        }
        // Http ds
        else if (dsValue.type === "none") {
            dataSource = this.cdk.graphqlApi.addNoneDataSource(dsKey, {
                name: dsValue.name,
                description: dsValue.description,
            });
        }
        // Lambda ds
        else {
            lambda = Function_1.Function.fromDefinition(scope, `Lambda_${dsKey}`, dsValue.function, (_k = this.props.defaults) === null || _k === void 0 ? void 0 : _k.function, `Cannot define defaults.function when a Function is passed in to the "${dsKey} data source`);
            dataSource = this.cdk.graphqlApi.addLambdaDataSource(dsKey, lambda, {
                name: dsValue.name,
                description: dsValue.description,
            });
        }
        this.dataSourcesByDsKey[dsKey] = dataSource;
        if (lambda) {
            this.functionsByDsKey[dsKey] = lambda;
        }
        return lambda;
    }
    addResolver(scope, resKey, resValue) {
        var _a, _b, _c, _d;
        // Normalize resKey
        resKey = this.normalizeResolverKey(resKey);
        // Get type and field
        const resolverKeyParts = resKey.split(" ");
        if (resolverKeyParts.length !== 2) {
            throw new Error(`Invalid resolver ${resKey}`);
        }
        const [typeName, fieldName] = resolverKeyParts;
        if (fieldName.length === 0) {
            throw new Error(`Invalid field defined for "${resKey}"`);
        }
        ///////////////////
        // Create data source if not created before
        ///////////////////
        let lambda;
        let dataSource;
        let dataSourceKey;
        let resolverProps;
        // DataSource key
        if (typeof resValue === "string" &&
            Object.keys(this.dataSourcesByDsKey).includes(resValue)) {
            dataSourceKey = resValue;
            dataSource = this.dataSourcesByDsKey[resValue];
            resolverProps = {};
        }
        // DataSource key not exist (string does not have a dot, assume it is referencing a data store)
        else if (typeof resValue === "string" && resValue.indexOf(".") === -1) {
            throw new Error(`Failed to create resolver "${resKey}". Data source "${resValue}" does not exist.`);
        }
        // Lambda resolver
        else if (this.isLambdaResolverProps(resValue)) {
            resValue = resValue;
            lambda = Function_1.Function.fromDefinition(scope, `Lambda_${typeName}_${fieldName}`, resValue.function, (_a = this.props.defaults) === null || _a === void 0 ? void 0 : _a.function, `Cannot define defaults.function when a Function is passed in to the "${resKey} resolver`);
            dataSourceKey = this.buildDataSourceKey(typeName, fieldName);
            dataSource = this.cdk.graphqlApi.addLambdaDataSource(dataSourceKey, lambda);
            resolverProps = Object.assign({ requestMappingTemplate: this.buildMappingTemplate(resValue.requestMapping), responseMappingTemplate: this.buildMappingTemplate(resValue.responseMapping) }, (_b = resValue.cdk) === null || _b === void 0 ? void 0 : _b.resolver);
        }
        // DataSource resolver
        else if (this.isDataSourceResolverProps(resValue)) {
            resValue = resValue;
            dataSourceKey = resValue.dataSource;
            dataSource = this.dataSourcesByDsKey[dataSourceKey];
            resolverProps = Object.assign({ requestMappingTemplate: this.buildMappingTemplate(resValue.requestMapping), responseMappingTemplate: this.buildMappingTemplate(resValue.responseMapping) }, (_c = resValue.cdk) === null || _c === void 0 ? void 0 : _c.resolver);
        }
        // Lambda function
        else {
            resValue = resValue;
            lambda = Function_1.Function.fromDefinition(scope, `Lambda_${typeName}_${fieldName}`, resValue, (_d = this.props.defaults) === null || _d === void 0 ? void 0 : _d.function, `Cannot define defaults.function when a Function is passed in to the "${resKey} resolver`);
            dataSourceKey = this.buildDataSourceKey(typeName, fieldName);
            dataSource = this.cdk.graphqlApi.addLambdaDataSource(dataSourceKey, lambda);
            resolverProps = {};
        }
        // Store new data source created
        if (lambda) {
            this.dataSourcesByDsKey[dataSourceKey] = dataSource;
            this.functionsByDsKey[dataSourceKey] = lambda;
        }
        this.dsKeysByResKey[resKey] = dataSourceKey;
        ///////////////////
        // Create resolver
        ///////////////////
        const resolver = this.cdk.graphqlApi.createResolver(Object.assign({ dataSource,
            typeName,
            fieldName }, resolverProps));
        this.resolversByResKey[resKey] = resolver;
        return lambda;
    }
    isLambdaResolverProps(object) {
        return object.function !== undefined;
    }
    isDataSourceResolverProps(object) {
        return object.dataSource !== undefined;
    }
    normalizeResolverKey(resolverKey) {
        // remove extra spaces in the key
        return resolverKey.split(/\s+/).join(" ");
    }
    buildMappingTemplate(mapping) {
        if (!mapping) {
            return undefined;
        }
        if (mapping.file) {
            return appsync.MappingTemplate.fromFile(mapping.file);
        }
        return appsync.MappingTemplate.fromString(mapping.inline);
    }
    buildDataSourceKey(typeName, fieldName) {
        return `LambdaDS_${typeName}_${fieldName}`;
    }
}
exports.AppSyncApi = AppSyncApi;
//# sourceMappingURL=data:application/json;base64,