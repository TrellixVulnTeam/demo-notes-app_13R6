"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStack = exports.dependsOn = exports.use = exports.stack = void 0;
const Stack_1 = require("./Stack");
function stack(app, fn, props) {
    currentApp = app;
    currentStack = fn;
    const id = (props === null || props === void 0 ? void 0 : props.id) || fn.name;
    const exists = getExports(app).has(fn);
    if (exists)
        throw new Error(`StackDuplicates: Attempting to initialize stack ${id} several times`);
    const stack = new EmptyStack(app, id, props);
    getStacks(app).set(fn, stack);
    const ctx = {
        app,
        stack,
    };
    const returns = fn.bind(stack)(ctx);
    if (returns && "then" in returns)
        return returns.then((data) => {
            getExports(app).set(fn, data);
        });
    getExports(app).set(fn, returns);
    return app;
}
exports.stack = stack;
let currentApp;
let currentStack;
const exportsCache = new Map();
const stackCache = new Map();
function getExports(app) {
    if (!exportsCache.has(app))
        exportsCache.set(app, new Map());
    return exportsCache.get(app);
}
function getStacks(app) {
    if (!stackCache.has(app))
        stackCache.set(app, new Map());
    return stackCache.get(app);
}
function use(stack) {
    if (!currentApp)
        throw new Error("No app is set");
    const exports = getExports(currentApp);
    if (!exports.has(stack))
        throw new Error(`StackWrongOrder: Initialize "${stack.name}" stack before "${currentStack === null || currentStack === void 0 ? void 0 : currentStack.name}" stack`);
    return exports.get(stack);
}
exports.use = use;
function dependsOn(stack) {
    const current = getStack(currentStack);
    const target = getStack(stack);
    current.addDependency(target);
}
exports.dependsOn = dependsOn;
function getStack(stack) {
    if (!currentApp)
        throw new Error("No app is set");
    const stacks = getStacks(currentApp);
    if (!stacks.has(stack))
        throw new Error(`StackWrongOrder: Initialize "${stack.name}" stack before "${currentStack === null || currentStack === void 0 ? void 0 : currentStack.name}" stack`);
    return stacks.get(stack);
}
exports.getStack = getStack;
class EmptyStack extends Stack_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVuY3Rpb25hbFN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0Z1bmN0aW9uYWxTdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFDQSxtQ0FBNEM7QUFFNUMsU0FBZ0IsS0FBSyxDQUNuQixHQUFRLEVBQ1IsRUFBd0IsRUFDeEIsS0FBb0M7SUFFcEMsVUFBVSxHQUFHLEdBQUcsQ0FBQztJQUNqQixZQUFZLEdBQUcsRUFBRSxDQUFDO0lBQ2xCLE1BQU0sRUFBRSxHQUFHLENBQUEsS0FBSyxhQUFMLEtBQUssdUJBQUwsS0FBSyxDQUFFLEVBQUUsS0FBSSxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQ2hDLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDdkMsSUFBSSxNQUFNO1FBQ1IsTUFBTSxJQUFJLEtBQUssQ0FDYixtREFBbUQsRUFBRSxnQkFBZ0IsQ0FDdEUsQ0FBQztJQUVKLE1BQU0sS0FBSyxHQUFHLElBQUksVUFBVSxDQUFDLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0MsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDOUIsTUFBTSxHQUFHLEdBQWlCO1FBQ3hCLEdBQUc7UUFDSCxLQUFLO0tBQ04sQ0FBQztJQUNGLE1BQU0sT0FBTyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEMsSUFBSSxPQUFPLElBQUksTUFBTSxJQUFJLE9BQU87UUFDOUIsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBUyxFQUFFLEVBQUU7WUFDaEMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsQ0FBQyxDQUFDLENBQUM7SUFFTCxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNqQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUE1QkQsc0JBNEJDO0FBRUQsSUFBSSxVQUFlLENBQUM7QUFDcEIsSUFBSSxZQUFrQyxDQUFDO0FBQ3ZDLE1BQU0sWUFBWSxHQUFHLElBQUksR0FBRyxFQUF1QyxDQUFDO0FBQ3BFLE1BQU0sVUFBVSxHQUFHLElBQUksR0FBRyxFQUF5QyxDQUFDO0FBRXBFLFNBQVMsVUFBVSxDQUFDLEdBQVE7SUFDMUIsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO1FBQUUsWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO0lBQzdELE9BQU8sWUFBWSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUUsQ0FBQztBQUNoQyxDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsR0FBUTtJQUN6QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFBRSxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7SUFDekQsT0FBTyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBRSxDQUFDO0FBQzlCLENBQUM7QUFFRCxTQUFnQixHQUFHLENBQUksS0FBeUI7SUFDOUMsSUFBSSxDQUFDLFVBQVU7UUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ2xELE1BQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDckIsTUFBTSxJQUFJLEtBQUssQ0FDYixnQ0FBZ0MsS0FBSyxDQUFDLElBQUksbUJBQW1CLFlBQVksYUFBWixZQUFZLHVCQUFaLFlBQVksQ0FBRSxJQUFJLFNBQVMsQ0FDekYsQ0FBQztJQUNKLE9BQU8sT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBUkQsa0JBUUM7QUFFRCxTQUFnQixTQUFTLENBQUMsS0FBMkI7SUFDbkQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQ3ZDLE1BQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUUsQ0FBQztJQUNoQyxPQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pDLENBQUM7QUFKRCw4QkFJQztBQUVELFNBQWdCLFFBQVEsQ0FBQyxLQUEyQjtJQUNsRCxJQUFJLENBQUMsVUFBVTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7SUFDbEQsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3JDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQztRQUNwQixNQUFNLElBQUksS0FBSyxDQUNiLGdDQUFnQyxLQUFLLENBQUMsSUFBSSxtQkFBbUIsWUFBWSxhQUFaLFlBQVksdUJBQVosWUFBWSxDQUFFLElBQUksU0FBUyxDQUN6RixDQUFDO0lBRUosT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBRSxDQUFDO0FBQzVCLENBQUM7QUFURCw0QkFTQztBQVlELE1BQU0sVUFBVyxTQUFRLGFBQUs7SUFDNUIsWUFBWSxLQUFVLEVBQUUsRUFBVSxFQUFFLEtBQWtCO1FBQ3BELEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcCB9IGZyb20gXCIuL0FwcFwiO1xuaW1wb3J0IHsgU3RhY2ssIFN0YWNrUHJvcHMgfSBmcm9tIFwiLi9TdGFja1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gc3RhY2soXG4gIGFwcDogQXBwLFxuICBmbjogRnVuY3Rpb25hbFN0YWNrPGFueT4sXG4gIHByb3BzPzogU3RhY2tQcm9wcyAmIHsgaWQ/OiBzdHJpbmcgfVxuKSB7XG4gIGN1cnJlbnRBcHAgPSBhcHA7XG4gIGN1cnJlbnRTdGFjayA9IGZuO1xuICBjb25zdCBpZCA9IHByb3BzPy5pZCB8fCBmbi5uYW1lO1xuICBjb25zdCBleGlzdHMgPSBnZXRFeHBvcnRzKGFwcCkuaGFzKGZuKTtcbiAgaWYgKGV4aXN0cylcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgU3RhY2tEdXBsaWNhdGVzOiBBdHRlbXB0aW5nIHRvIGluaXRpYWxpemUgc3RhY2sgJHtpZH0gc2V2ZXJhbCB0aW1lc2BcbiAgICApO1xuXG4gIGNvbnN0IHN0YWNrID0gbmV3IEVtcHR5U3RhY2soYXBwLCBpZCwgcHJvcHMpO1xuICBnZXRTdGFja3MoYXBwKS5zZXQoZm4sIHN0YWNrKTtcbiAgY29uc3QgY3R4OiBTdGFja0NvbnRleHQgPSB7XG4gICAgYXBwLFxuICAgIHN0YWNrLFxuICB9O1xuICBjb25zdCByZXR1cm5zID0gZm4uYmluZChzdGFjaykoY3R4KTtcbiAgaWYgKHJldHVybnMgJiYgXCJ0aGVuXCIgaW4gcmV0dXJucylcbiAgICByZXR1cm4gcmV0dXJucy50aGVuKChkYXRhOiBhbnkpID0+IHtcbiAgICAgIGdldEV4cG9ydHMoYXBwKS5zZXQoZm4sIGRhdGEpO1xuICAgIH0pO1xuXG4gIGdldEV4cG9ydHMoYXBwKS5zZXQoZm4sIHJldHVybnMpO1xuICByZXR1cm4gYXBwO1xufVxuXG5sZXQgY3VycmVudEFwcDogQXBwO1xubGV0IGN1cnJlbnRTdGFjazogRnVuY3Rpb25hbFN0YWNrPGFueT47XG5jb25zdCBleHBvcnRzQ2FjaGUgPSBuZXcgTWFwPEFwcCwgTWFwPEZ1bmN0aW9uYWxTdGFjazxhbnk+LCBhbnk+PigpO1xuY29uc3Qgc3RhY2tDYWNoZSA9IG5ldyBNYXA8QXBwLCBNYXA8RnVuY3Rpb25hbFN0YWNrPGFueT4sIFN0YWNrPj4oKTtcblxuZnVuY3Rpb24gZ2V0RXhwb3J0cyhhcHA6IEFwcCkge1xuICBpZiAoIWV4cG9ydHNDYWNoZS5oYXMoYXBwKSkgZXhwb3J0c0NhY2hlLnNldChhcHAsIG5ldyBNYXAoKSk7XG4gIHJldHVybiBleHBvcnRzQ2FjaGUuZ2V0KGFwcCkhO1xufVxuXG5mdW5jdGlvbiBnZXRTdGFja3MoYXBwOiBBcHApIHtcbiAgaWYgKCFzdGFja0NhY2hlLmhhcyhhcHApKSBzdGFja0NhY2hlLnNldChhcHAsIG5ldyBNYXAoKSk7XG4gIHJldHVybiBzdGFja0NhY2hlLmdldChhcHApITtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZTxUPihzdGFjazogRnVuY3Rpb25hbFN0YWNrPFQ+KTogVCB7XG4gIGlmICghY3VycmVudEFwcCkgdGhyb3cgbmV3IEVycm9yKFwiTm8gYXBwIGlzIHNldFwiKTtcbiAgY29uc3QgZXhwb3J0cyA9IGdldEV4cG9ydHMoY3VycmVudEFwcCk7XG4gIGlmICghZXhwb3J0cy5oYXMoc3RhY2spKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBTdGFja1dyb25nT3JkZXI6IEluaXRpYWxpemUgXCIke3N0YWNrLm5hbWV9XCIgc3RhY2sgYmVmb3JlIFwiJHtjdXJyZW50U3RhY2s/Lm5hbWV9XCIgc3RhY2tgXG4gICAgKTtcbiAgcmV0dXJuIGV4cG9ydHMuZ2V0KHN0YWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlcGVuZHNPbihzdGFjazogRnVuY3Rpb25hbFN0YWNrPGFueT4pIHtcbiAgY29uc3QgY3VycmVudCA9IGdldFN0YWNrKGN1cnJlbnRTdGFjayk7XG4gIGNvbnN0IHRhcmdldCA9IGdldFN0YWNrKHN0YWNrKSE7XG4gIGN1cnJlbnQhLmFkZERlcGVuZGVuY3kodGFyZ2V0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0YWNrKHN0YWNrOiBGdW5jdGlvbmFsU3RhY2s8YW55Pikge1xuICBpZiAoIWN1cnJlbnRBcHApIHRocm93IG5ldyBFcnJvcihcIk5vIGFwcCBpcyBzZXRcIik7XG4gIGNvbnN0IHN0YWNrcyA9IGdldFN0YWNrcyhjdXJyZW50QXBwKTtcbiAgaWYgKCFzdGFja3MuaGFzKHN0YWNrKSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgU3RhY2tXcm9uZ09yZGVyOiBJbml0aWFsaXplIFwiJHtzdGFjay5uYW1lfVwiIHN0YWNrIGJlZm9yZSBcIiR7Y3VycmVudFN0YWNrPy5uYW1lfVwiIHN0YWNrYFxuICAgICk7XG5cbiAgcmV0dXJuIHN0YWNrcy5nZXQoc3RhY2spITtcbn1cblxuZXhwb3J0IHR5cGUgU3RhY2tDb250ZXh0ID0ge1xuICBhcHA6IEFwcDtcbiAgc3RhY2s6IFN0YWNrO1xufTtcblxuZXhwb3J0IHR5cGUgRnVuY3Rpb25hbFN0YWNrPFQ+ID0gKFxuICB0aGlzOiBTdGFjayxcbiAgY3R4OiBTdGFja0NvbnRleHRcbikgPT4gVCB8IFByb21pc2U8VD47XG5cbmNsYXNzIEVtcHR5U3RhY2sgZXh0ZW5kcyBTdGFjayB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBBcHAsIGlkOiBzdHJpbmcsIHByb3BzPzogU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuICB9XG59XG4iXX0=