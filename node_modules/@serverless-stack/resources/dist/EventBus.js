"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventBus = void 0;
const constructs_1 = require("constructs");
const events = __importStar(require("aws-cdk-lib/aws-events"));
const eventsTargets = __importStar(require("aws-cdk-lib/aws-events-targets"));
const Queue_1 = require("./Queue");
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
/////////////////////
// Construct
/////////////////////
/**
 * The `EventBus` construct is a higher level CDK construct that makes it easy to create an [EventBridge Event Bus](https://aws.amazon.com/eventbridge/). You can create a bus that has a list of rules and targets. And you can publish messages to it from any part of your serverless app.
 *
 * You can have two types of targets; Function targets (with a Lambda function) or Queue targets (with an SQS queue). See the [examples](#examples) for more details.
 *
 * @example
 *
 * ### Using the minimal config
 *
 * ```js
 * import { EventBus } from "@serverless-stack/resources";
 *
 * new EventBus(stack, "Bus", {
 *   rules: {
 *     rule1: {
 *       pattern: { source: ["myevent"] },
 *       targets: {
 *         myTarget1: "src/function1.handler",
 *         myTarget2: "src/function2.handler"
 *       },
 *     },
 *   },
 * });
 * ```
 *
 * Note that, `rule1` here is simply a key to identify the rule.
 */
class EventBus extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props || {};
        this.cdk = {};
        this.targetsData = {};
        this.permissionsAttachedForAllTargets = [];
        this.createEventBus();
        this.addRules(this, (props === null || props === void 0 ? void 0 : props.rules) || {});
    }
    /**
     * The ARN of the internally created `EventBus` instance.
     */
    get eventBusArn() {
        return this.cdk.eventBus.eventBusArn;
    }
    /**
     * The name of the internally created `EventBus` instance.
     */
    get eventBusName() {
        return this.cdk.eventBus.eventBusName;
    }
    /**
     * Add rules after the EventBus has been created.
     *
     * @example
     * ```js
     * bus.addRules(stack, {
     *   rule2: {
     *     pattern: { source: ["myevent"] },
     *       targets: {
     *         myTarget3: "src/function3.handler"
     *         myTarget4: "src/function4.handler"
     *       },
     *   },
     * });
     * ```
     */
    addRules(scope, rules) {
        Object.entries(rules).forEach(([ruleKey, rule]) => this.addRule(scope, ruleKey, rule));
    }
    /**
     * Add permissions to all event targets in this EventBus.
     *
     * @example
     * ```js {10}
     * bus.attachPermissions(["s3"]);
     * ```
     */
    attachPermissions(permissions) {
        Object.values(this.targetsData).forEach((rule) => Object.values(rule)
            .filter((target) => target instanceof Function_1.Function)
            .forEach((target) => target.attachPermissions(permissions)));
        this.permissionsAttachedForAllTargets.push(permissions);
    }
    /**
     * Add permissions to a specific event bus rule target
     *
     * @example
     * ```js {10}
     * const bus = new EventBus(stack, "Bus", {
     *   rules: {
     *     rule1: {
     *       pattern: { source: ["myevent"] },
     *       targets: {
     *         myTarget1: "src/function1.handler"
     *         myTarget2: "src/function2.handler"
     *       },
     *     },
     *   },
     * });
     *
     * bus.attachPermissionsToTarget("rule1", 0, ["s3"]);
     * ```
     */
    attachPermissionsToTarget(ruleKey, targetName, permissions) {
        const rule = this.targetsData[ruleKey];
        if (!rule) {
            throw new Error(`Cannot find the rule "${ruleKey}" in the "${this.node.id}" EventBus.`);
        }
        const target = rule[targetName];
        if (!(target instanceof Function_1.Function)) {
            throw new Error(`Cannot attach permissions to the "${this.node.id}" EventBus target because it's not a Lambda function`);
        }
        target.attachPermissions(permissions);
    }
    getConstructMetadata() {
        return {
            type: "EventBus",
            data: {
                eventBusName: this.cdk.eventBus.eventBusName,
                rules: Object.entries(this.targetsData).map(([ruleName, rule]) => ({
                    key: ruleName,
                    targets: Object.values(rule).map(Construct_1.getFunctionRef),
                    targetNames: Object.keys(rule),
                })),
            },
        };
    }
    createEventBus() {
        const app = this.node.root;
        const id = this.node.id;
        const { cdk } = this.props;
        if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.eventBus)) {
            this.cdk.eventBus = cdk === null || cdk === void 0 ? void 0 : cdk.eventBus;
        }
        else {
            const ebProps = ((cdk === null || cdk === void 0 ? void 0 : cdk.eventBus) || {});
            this.cdk.eventBus = new events.EventBus(this, "EventBus", Object.assign({ 
                // Note: Set default eventBusName only if eventSourceName is not configured.
                //       This is because both cannot be configured at the same time.
                eventBusName: ebProps.eventSourceName
                    ? undefined
                    : app.logicalPrefixedName(id) }, ebProps));
        }
    }
    addRule(scope, ruleKey, rule) {
        var _a, _b, _c, _d;
        // Validate input
        // @ts-expect-error "eventBus" is not a prop
        if ((_a = rule.cdk) === null || _a === void 0 ? void 0 : _a.rule.eventBus) {
            throw new Error(`Cannot configure the "rule.cdk.rule.eventBus" in the "${this.node.id}" EventBus`);
        }
        // Validate rule not redefined
        if (this.targetsData[ruleKey]) {
            throw new Error(`A rule already exists for "${ruleKey}"`);
        }
        // Create Rule
        const root = this.node.root;
        const eventsRule = new events.Rule(scope, ruleKey, Object.assign(Object.assign({ ruleName: root.logicalPrefixedName(ruleKey) }, (_b = rule.cdk) === null || _b === void 0 ? void 0 : _b.rule), { eventPattern: rule.pattern
                ? Object.assign({}, rule.pattern) : (_d = (_c = rule.cdk) === null || _c === void 0 ? void 0 : _c.rule) === null || _d === void 0 ? void 0 : _d.eventPattern, eventBus: this.cdk.eventBus, targets: [] }));
        // Create Targets
        Object.entries(rule.targets || {}).forEach(([targetName, target]) => this.addTarget(scope, ruleKey, eventsRule, targetName, target));
    }
    addTarget(scope, ruleKey, eventsRule, targetName, target) {
        this.targetsData[ruleKey] = this.targetsData[ruleKey] || {};
        if (target instanceof Queue_1.Queue || target.queue) {
            target = target;
            this.addQueueTarget(scope, ruleKey, eventsRule, targetName, target);
        }
        else {
            target = target;
            this.addFunctionTarget(scope, ruleKey, eventsRule, targetName, target);
        }
    }
    addQueueTarget(scope, ruleKey, eventsRule, targetName, target) {
        var _a;
        // Parse target props
        let targetProps;
        let queue;
        if (target instanceof Queue_1.Queue) {
            target = target;
            queue = target;
        }
        else {
            target = target;
            targetProps = (_a = target.cdk) === null || _a === void 0 ? void 0 : _a.target;
            queue = target.queue;
        }
        this.targetsData[ruleKey][targetName] = queue;
        // Create target
        eventsRule.addTarget(new eventsTargets.SqsQueue(queue.cdk.queue, targetProps));
    }
    addFunctionTarget(scope, ruleKey, eventsRule, targetName, target) {
        var _a, _b;
        // Parse target props
        let targetProps;
        let functionDefinition;
        if (target.function) {
            target = target;
            targetProps = (_a = target.cdk) === null || _a === void 0 ? void 0 : _a.target;
            functionDefinition = target.function;
        }
        else {
            target = target;
            functionDefinition = target;
        }
        // Create function
        const fn = Function_1.Function.fromDefinition(scope, `Target_${this.node.id}_${ruleKey}_${targetName}`, functionDefinition, (_b = this.props.defaults) === null || _b === void 0 ? void 0 : _b.function, `The "defaults.function" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the targets using FunctionProps, so the EventBus construct can apply the "defaults.function" to them.`);
        this.targetsData[ruleKey][targetName] = fn;
        // Create target
        eventsRule.addTarget(new eventsTargets.LambdaFunction(fn, targetProps));
        // Attach existing permissions
        this.permissionsAttachedForAllTargets.forEach((permissions) => fn.attachPermissions(permissions));
    }
}
exports.EventBus = EventBus;
//# sourceMappingURL=data:application/json;base64,