"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Auth = void 0;
const constructs_1 = require("constructs");
const iam = __importStar(require("aws-cdk-lib/aws-iam"));
const cognito = __importStar(require("aws-cdk-lib/aws-cognito"));
const Stack_1 = require("./Stack");
const Construct_1 = require("./Construct");
const Function_1 = require("./Function");
const permission_1 = require("./util/permission");
const AuthUserPoolTriggerOperationMapping = {
    createAuthChallenge: cognito.UserPoolOperation.CREATE_AUTH_CHALLENGE,
    customEmailSender: cognito.UserPoolOperation.CUSTOM_EMAIL_SENDER,
    customMessage: cognito.UserPoolOperation.CUSTOM_MESSAGE,
    customSmsSender: cognito.UserPoolOperation.CUSTOM_SMS_SENDER,
    defineAuthChallenge: cognito.UserPoolOperation.DEFINE_AUTH_CHALLENGE,
    postAuthentication: cognito.UserPoolOperation.POST_AUTHENTICATION,
    postConfirmation: cognito.UserPoolOperation.POST_CONFIRMATION,
    preAuthentication: cognito.UserPoolOperation.PRE_AUTHENTICATION,
    preSignUp: cognito.UserPoolOperation.PRE_SIGN_UP,
    preTokenGeneration: cognito.UserPoolOperation.PRE_TOKEN_GENERATION,
    userMigration: cognito.UserPoolOperation.USER_MIGRATION,
    verifyAuthChallengeResponse: cognito.UserPoolOperation.VERIFY_AUTH_CHALLENGE_RESPONSE,
};
/////////////////////
// Construct
/////////////////////
/**
 * The `Auth` construct is a higher level CDK construct that makes it easy to configure a [Cognito User Pool](https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html) and [Cognito Identity Pool](https://docs.aws.amazon.com/cognito/latest/developerguide/identity-pools.html). Also, allows setting up Auth0, Facebook, Google, Twitter, Apple, and Amazon as authentication providers.
 */
class Auth extends constructs_1.Construct {
    constructor(scope, id, props) {
        super(scope, id);
        this.props = props || {};
        this.cdk = {};
        this.functions = {};
        this.permissionsAttachedForAllTriggers = [];
        this.createUserPool();
        this.createUserPoolClient();
        this.addTriggers();
        this.createIdentityPool();
    }
    /**
     * The id of the internally created Cognito User Pool.
     */
    get userPoolId() {
        return this.cdk.userPool.userPoolId;
    }
    /**
     * The ARN of the internally created Cognito User Pool.
     */
    get userPoolArn() {
        return this.cdk.userPool.userPoolArn;
    }
    /**
     * The id of the internally created Cognito User Pool client.
     */
    get userPoolClientId() {
        return this.cdk.userPoolClient.userPoolClientId;
    }
    /**
     * The id of the internally created `IdentityPool` instance.
     */
    get cognitoIdentityPoolId() {
        var _a;
        return (_a = this.cdk.cfnIdentityPool) === null || _a === void 0 ? void 0 : _a.ref;
    }
    attachPermissionsForAuthUsers(permissions) {
        (0, permission_1.attachPermissionsToRole)(this.cdk.authRole, permissions);
    }
    attachPermissionsForUnauthUsers(permissions) {
        (0, permission_1.attachPermissionsToRole)(this.cdk.unauthRole, permissions);
    }
    attachPermissionsForTriggers(permissions) {
        Object.values(this.functions).forEach((fn) => fn.attachPermissions(permissions));
        this.permissionsAttachedForAllTriggers.push(permissions);
    }
    attachPermissionsForTrigger(triggerKey, permissions) {
        const fn = this.getFunction(triggerKey);
        if (!fn) {
            throw new Error(`Failed to attach permissions. Trigger "${triggerKey}" does not exist.`);
        }
        fn.attachPermissions(permissions);
    }
    getFunction(triggerKey) {
        return this.functions[triggerKey];
    }
    getConstructMetadata() {
        var _a;
        return {
            type: "Auth",
            data: {
                identityPoolId: (_a = this.cdk.cfnIdentityPool) === null || _a === void 0 ? void 0 : _a.ref,
                userPoolId: this.cdk.userPool.userPoolId,
                triggers: Object.entries(this.functions).map(([name, fun]) => ({
                    name,
                    fn: (0, Construct_1.getFunctionRef)(fun),
                })),
            },
        };
    }
    createUserPool() {
        const { login, cdk } = this.props;
        const app = this.node.root;
        if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.userPool)) {
            this.cdk.userPool = cdk === null || cdk === void 0 ? void 0 : cdk.userPool;
        }
        else {
            const cognitoUserPoolProps = ((cdk === null || cdk === void 0 ? void 0 : cdk.userPool) ||
                {});
            // validate `lambdaTriggers` is not specified
            if (cognitoUserPoolProps.lambdaTriggers) {
                throw new Error(`Cannot configure the "cdk.userPool.lambdaTriggers" in the Auth construct. Use the "triggers" instead.`);
            }
            // validate `cdk.userPoolClient` is not imported
            if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.userPoolClient)) {
                throw new Error(`Cannot import the "userPoolClient" when the "userPool" is not imported.`);
            }
            this.cdk.userPool = new cognito.UserPool(this, "UserPool", Object.assign({ userPoolName: app.logicalPrefixedName(this.node.id), selfSignUpEnabled: true, signInCaseSensitive: false, signInAliases: this.buildSignInAliases(login) }, cognitoUserPoolProps));
        }
    }
    createUserPoolClient() {
        const { cdk } = this.props;
        if ((0, Construct_1.isCDKConstruct)(cdk === null || cdk === void 0 ? void 0 : cdk.userPoolClient)) {
            this.cdk.userPoolClient = cdk === null || cdk === void 0 ? void 0 : cdk.userPoolClient;
        }
        else {
            const clientProps = ((cdk === null || cdk === void 0 ? void 0 : cdk.userPoolClient) ||
                {});
            this.cdk.userPoolClient = new cognito.UserPoolClient(this, "UserPoolClient", Object.assign({ userPool: this.cdk.userPool }, clientProps));
        }
    }
    createIdentityPool() {
        var _a;
        const { identityPoolFederation } = this.props;
        if (identityPoolFederation === false) {
            return;
        }
        const id = this.node.id;
        const app = this.node.root;
        const cognitoIdentityProviders = [];
        const openIdConnectProviderArns = [];
        const supportedLoginProviders = {};
        ////////////////////
        // Handle Cognito Identity Providers (ie. User Pool)
        ////////////////////
        const urlSuffix = Stack_1.Stack.of(this).urlSuffix;
        cognitoIdentityProviders.push({
            providerName: `cognito-idp.${app.region}.${urlSuffix}/${this.cdk.userPool.userPoolId}`,
            clientId: this.cdk.userPoolClient.userPoolClientId,
        });
        if (typeof identityPoolFederation === "object") {
            const { auth0, amazon, apple, facebook, google, twitter } = identityPoolFederation;
            ////////////////////
            // Handle OpenId Connect Providers (ie. Auth0)
            ////////////////////
            if (auth0) {
                if (!auth0.domain) {
                    throw new Error(`Auth0Domain: No Auth0 domain defined for the "${id}" Auth`);
                }
                if (!auth0.clientId) {
                    throw new Error(`Auth0ClientId: No Auth0 clientId defined for the "${id}" Auth`);
                }
                const provider = new iam.OpenIdConnectProvider(this, "Auth0Provider", {
                    url: auth0.domain.startsWith("https://")
                        ? auth0.domain
                        : `https://${auth0.domain}`,
                    clientIds: [auth0.clientId],
                });
                openIdConnectProviderArns.push(provider.openIdConnectProviderArn);
            }
            ////////////////////
            // Handle Social Identity Providers
            ////////////////////
            if (amazon) {
                if (!amazon.appId) {
                    throw new Error(`AmazonAppId: No Amazon appId defined for the "${id}" Auth`);
                }
                supportedLoginProviders["www.amazon.com"] = amazon.appId;
            }
            if (facebook) {
                if (!facebook.appId) {
                    throw new Error(`FacebookAppId: No Facebook appId defined for the "${id}" Auth`);
                }
                supportedLoginProviders["graph.facebook.com"] = facebook.appId;
            }
            if (google) {
                if (!google.clientId) {
                    throw new Error(`GoogleClientId: No Google appId defined for the "${id}" Auth`);
                }
                supportedLoginProviders["accounts.google.com"] = google.clientId;
            }
            if (twitter) {
                if (!twitter.consumerKey) {
                    throw new Error(`TwitterConsumerKey: No Twitter consumer key defined for the "${id}" Auth`);
                }
                if (!twitter.consumerSecret) {
                    throw new Error(`TwitterConsumerSecret: No Twitter consumer secret defined for the "${id}" Auth`);
                }
                supportedLoginProviders["api.twitter.com"] = `${twitter.consumerKey};${twitter.consumerSecret}`;
            }
            if (apple) {
                if (!apple.servicesId) {
                    throw new Error(`AppleServicesId: No Apple servicesId defined for the "${id}" Auth`);
                }
                supportedLoginProviders["appleid.apple.com"] = apple.servicesId;
            }
        }
        // Create Cognito Identity Pool
        const identityPoolProps = typeof identityPoolFederation === "object"
            ? ((_a = identityPoolFederation.cdk) === null || _a === void 0 ? void 0 : _a.cfnIdentityPool) || {}
            : {};
        this.cdk.cfnIdentityPool = new cognito.CfnIdentityPool(this, "IdentityPool", Object.assign({ identityPoolName: app.logicalPrefixedName(id), allowUnauthenticatedIdentities: true, cognitoIdentityProviders,
            supportedLoginProviders,
            openIdConnectProviderArns }, identityPoolProps));
        this.cdk.authRole = this.createAuthRole(this.cdk.cfnIdentityPool);
        this.cdk.unauthRole = this.createUnauthRole(this.cdk.cfnIdentityPool);
        // Attach roles to Identity Pool
        new cognito.CfnIdentityPoolRoleAttachment(this, "IdentityPoolRoleAttachment", {
            identityPoolId: this.cdk.cfnIdentityPool.ref,
            roles: {
                authenticated: this.cdk.authRole.roleArn,
                unauthenticated: this.cdk.unauthRole.roleArn,
            },
        });
    }
    addTriggers() {
        const { triggers, defaults } = this.props;
        if (!triggers || Object.keys(triggers).length === 0) {
            return;
        }
        // Validate cognito user pool is not imported
        // ie. imported IUserPool does not have the "addTrigger" function
        if (!this.cdk.userPool.addTrigger) {
            throw new Error(`Cannot add triggers when the "userPool" is imported.`);
        }
        Object.entries(triggers).forEach(([triggerKey, triggerValue]) => this.addTrigger(this, triggerKey, triggerValue, defaults === null || defaults === void 0 ? void 0 : defaults.function));
    }
    addTrigger(scope, triggerKey, triggerValue, functionProps) {
        // Validate cognito user pool is defined
        if (!this.cdk.userPool) {
            throw new Error(`Triggers cannot be added. No Cognito UserPool defined for the Auth construct.`);
        }
        // Create Function
        const lambda = Function_1.Function.fromDefinition(scope, triggerKey, triggerValue, functionProps, `The "defaults.function" cannot be applied if an instance of a Function construct is passed in. Make sure to define all the triggers using FunctionProps, so the Auth construct can apply the "defaults.function" to them.`);
        // Create trigger
        const operation = AuthUserPoolTriggerOperationMapping[triggerKey];
        this.cdk.userPool.addTrigger(operation, lambda);
        // Store function
        this.functions[triggerKey] = lambda;
        return lambda;
    }
    createAuthRole(identityPool) {
        const role = new iam.Role(this, "IdentityPoolAuthRole", {
            assumedBy: new iam.FederatedPrincipal("cognito-identity.amazonaws.com", {
                StringEquals: {
                    "cognito-identity.amazonaws.com:aud": identityPool.ref,
                },
                "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "authenticated",
                },
            }, "sts:AssumeRoleWithWebIdentity"),
        });
        role.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: [
                "mobileanalytics:PutEvents",
                "cognito-sync:*",
                "cognito-identity:*",
            ],
            resources: ["*"],
        }));
        return role;
    }
    createUnauthRole(identityPool) {
        const role = new iam.Role(this, "IdentityPoolUnauthRole", {
            assumedBy: new iam.FederatedPrincipal("cognito-identity.amazonaws.com", {
                StringEquals: {
                    "cognito-identity.amazonaws.com:aud": identityPool.ref,
                },
                "ForAnyValue:StringLike": {
                    "cognito-identity.amazonaws.com:amr": "unauthenticated",
                },
            }, "sts:AssumeRoleWithWebIdentity"),
        });
        role.addToPolicy(new iam.PolicyStatement({
            effect: iam.Effect.ALLOW,
            actions: ["mobileanalytics:PutEvents", "cognito-sync:*"],
            resources: ["*"],
        }));
        return role;
    }
    buildSignInAliases(login) {
        if (!login) {
            return;
        }
        return {
            email: login.includes("email"),
            phone: login.includes("phone"),
            username: login.includes("username"),
            preferredUsername: login.includes("preferredUsername"),
        };
    }
}
exports.Auth = Auth;
//# sourceMappingURL=data:application/json;base64,