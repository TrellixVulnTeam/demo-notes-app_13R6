"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatDiagnostics = exports.check = exports.build = void 0;
const esbuild = __importStar(require("esbuild"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const __1 = require("..");
const path_1 = __importDefault(require("path"));
const typescript_1 = require("typescript");
const chalk_1 = __importDefault(require("chalk"));
async function build(root, config) {
    const buildDir = __1.State.stacksPath(root);
    const pkg = await fs_extra_1.default.readJson(path_1.default.join(root, "package.json"));
    const entry = path_1.default.join(root, config.main);
    if (!fs_extra_1.default.existsSync(entry))
        throw new Error(`Cannot find app handler. Make sure to add a "${config.main}" file`);
    await esbuild.build({
        external: [
            "aws-cdk-lib",
            ...Object.keys({
                ...pkg.devDependencies,
                ...pkg.dependencies,
                ...pkg.peerDependencies,
            }),
        ],
        keepNames: true,
        bundle: true,
        format: "cjs",
        sourcemap: true,
        platform: "node",
        target: "node14",
        // The entry can have any file name (ie. "stacks/anything.ts"). We want the
        // build output to be always named "lib/index.js". This allow us to always
        // import from "buildDir" without needing to pass "anything" around.
        outfile: `${buildDir}/index.js`,
        entryPoints: [entry],
    });
}
exports.build = build;
// This is used to typecheck JS code to provide helpful errors even if the user isn't using typescript
function check(root, config) {
    const entry = path_1.default.join(root, config.main);
    const program = (0, typescript_1.createProgram)({
        rootNames: [entry],
        options: {
            incremental: true,
            tsBuildInfoFile: path_1.default.join(root, ".sst", "tsbuildinfo"),
            allowJs: true,
            checkJs: true,
            noEmit: true,
            strict: true,
            strictNullChecks: false,
            noImplicitAny: false,
        },
    });
    const result = program.emit();
    return (0, typescript_1.getPreEmitDiagnostics)(program).concat(result.diagnostics);
}
exports.check = check;
function formatDiagnostics(list) {
    function bottom(msg) {
        var _a, _b;
        if (typeof msg === "string")
            return msg;
        if ((_a = msg.next) === null || _a === void 0 ? void 0 : _a[0])
            return bottom((_b = msg.next) === null || _b === void 0 ? void 0 : _b[0]);
        return msg.messageText;
    }
    return list.map((diagnostic) => {
        if (diagnostic.file) {
            const { line, character } = (0, typescript_1.getLineAndCharacterOfPosition)(diagnostic.file, diagnostic.start);
            const message = bottom(diagnostic.messageText);
            return [
                `${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`,
                `${line - 1}. ${diagnostic.file.text.split("\n")[line - 1]}`,
                chalk_1.default.yellow(`${line}. ${diagnostic.file.text.split("\n")[line]}`),
                `${line + 1}. ${diagnostic.file.text.split("\n")[line + 1]}`,
            ].join("\n");
        }
        else {
            return bottom(diagnostic.messageText);
        }
    });
}
exports.formatDiagnostics = formatDiagnostics;
